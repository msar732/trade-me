# ==================== LIBRARY IMPORTS ====================
import os
import json
import uuid
import hashlib
import secrets
import re
import random
import base64
import hmac
import time
import threading
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any, Union
import logging
from pathlib import Path
from functools import lru_cache, wraps
from collections import defaultdict
import math
import asyncio
from concurrent.futures import ThreadPoolExecutor

# Core Flask and Web Framework
from flask import Flask, render_template_string, request, jsonify, redirect, url_for, flash, session, send_from_directory, make_response, abort
from flask_cors import CORS
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.middleware.profiler import ProfilerMiddleware

# Database and ORM
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Boolean, Float, Text, ForeignKey, JSON, Index, event, func, and_, or_
from sqlalchemy.orm import declarative_base, sessionmaker, Session, relationship, scoped_session
from sqlalchemy.pool import QueuePool
from sqlalchemy.exc import IntegrityError

# MongoDB Support
try:
    import pymongo
    from pymongo import MongoClient
    from pymongo.errors import ConnectionFailure
    MONGODB_AVAILABLE = True
    print("✅ MongoDB support loaded successfully!")
except ImportError:
    MONGODB_AVAILABLE = False
    print("⚠️ MongoDB libraries not available")

# Hindi Language Support
try:
    from googletrans import Translator
    HINDI_AVAILABLE = True
    print("✅ Hindi language support loaded successfully!")
except ImportError:
    HINDI_AVAILABLE = False
    print("⚠️ Hindi language libraries not available")

# Production Performance
import redis
from email_validator import validate_email, EmailNotValidError
import threading
import queue
import gzip
from io import BytesIO

# Advanced AI Libraries (Production Ready)
try:
    import numpy as np
    import pandas as pd
    from sklearn.feature_extraction.text import TfidfVectorizer
    from sklearn.metrics.pairwise import cosine_similarity
    from sklearn.cluster import KMeans
    from sklearn.preprocessing import StandardScaler
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.model_selection import train_test_split
    ML_AVAILABLE = True
    print("Production ML Stack Loaded Successfully!")
except ImportError as e:
    ML_AVAILABLE = False
    print(f"ML libraries not available: {e}")

# Web Scraping Libraries
try:
    import requests
    from bs4 import BeautifulSoup
    import urllib.parse
    WEB_SCRAPING_AVAILABLE = True
    print("✅ Web Scraping libraries loaded successfully!")
except ImportError as e:
    WEB_SCRAPING_AVAILABLE = False
    print(f"⚠️ Web Scraping libraries not available: {e}")

# ==================== PRODUCTION CONFIGURATION ====================
class ProductionConfig:
    """Production-grade configuration for millions of users"""
    
    # Database Configuration (Production Ready)
    DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./dealhub_production.db")
    DATABASE_POOL_SIZE = int(os.getenv("DB_POOL_SIZE", "50"))
    DATABASE_MAX_OVERFLOW = int(os.getenv("DB_MAX_OVERFLOW", "100"))
    DATABASE_POOL_TIMEOUT = int(os.getenv("DB_POOL_TIMEOUT", "30"))
    DATABASE_POOL_RECYCLE = int(os.getenv("DB_POOL_RECYCLE", "3600"))
    
    # MongoDB Configuration (MongoDB TV Support)
    MONGODB_URI = os.getenv("MONGODB_URI", "mongodb://localhost:27017/")
    MONGODB_DB = os.getenv("MONGODB_DB", "dealhub_mongodb")
    MONGODB_MAX_POOL_SIZE = int(os.getenv("MONGODB_MAX_POOL_SIZE", "100"))
    MONGODB_MIN_POOL_SIZE = int(os.getenv("MONGODB_MIN_POOL_SIZE", "10"))
    
    # Hindi Language Configuration
    DEFAULT_LANGUAGE = os.getenv("DEFAULT_LANGUAGE", "en")
    SUPPORTED_LANGUAGES = ["en", "hi"]
    
    # Redis Configuration (Production Caching)
    REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
    REDIS_MAX_CONNECTIONS = int(os.getenv("REDIS_MAX_CONNECTIONS", "100"))
    
    # Security (Military Grade)
    SECRET_KEY = os.getenv("SECRET_KEY", secrets.token_urlsafe(64))
    ALGORITHM = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("TOKEN_EXPIRE", "60"))
    BCRYPT_LOG_ROUNDS = int(os.getenv("BCRYPT_ROUNDS", "12"))
    MAX_LOGIN_ATTEMPTS = int(os.getenv("MAX_LOGIN_ATTEMPTS", "5"))
    ACCOUNT_LOCKOUT_MINUTES = int(os.getenv("LOCKOUT_MINUTES", "30"))
    
    # File Upload (Production)
    UPLOAD_PATH = os.getenv("UPLOAD_PATH", "uploads/")
    MAX_FILE_SIZE = int(os.getenv("MAX_FILE_SIZE", "50")) * 1024 * 1024  # 50MB
    ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif', '.webp', '.pdf', '.doc', '.docx'}
    
    # Performance (Million Users Ready)
    RATE_LIMIT_PER_MINUTE = int(os.getenv("RATE_LIMIT", "1000"))
    RATE_LIMIT_PER_HOUR = int(os.getenv("RATE_LIMIT_HOUR", "10000"))
    CACHE_TTL = int(os.getenv("CACHE_TTL", "3600"))
    SESSION_TIMEOUT = int(os.getenv("SESSION_TIMEOUT", "86400"))  # 24 hours
    
    # AI Configuration (Production ML)
    ML_MODEL_UPDATE_INTERVAL = int(os.getenv("ML_UPDATE_INTERVAL", "3600"))
    ML_BATCH_SIZE = int(os.getenv("ML_BATCH_SIZE", "1000"))
    ML_WORKER_THREADS = int(os.getenv("ML_WORKERS", "4"))
    
    # Production Features
    ENABLE_COMPRESSION = os.getenv("ENABLE_COMPRESSION", "true").lower() == "true"
    ENABLE_PROFILING = os.getenv("ENABLE_PROFILING", "false").lower() == "true"
    LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")

config = ProductionConfig()

# ==================== PRODUCTION LOGGING ====================
def setup_production_logging():
    """Setup production-grade logging system"""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s'
    
    # Create formatters
    formatter = logging.Formatter(log_format)
    
    # Setup file handler with rotation
    from logging.handlers import RotatingFileHandler
    file_handler = RotatingFileHandler(
        'dealhub_production.log',
        maxBytes=10*1024*1024,  # 10MB
        backupCount=10
    )
    file_handler.setFormatter(formatter)
    file_handler.setLevel(getattr(logging, config.LOG_LEVEL))
    
    # Setup console handler
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)
    
    # Configure root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, config.LOG_LEVEL))
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)
    
    return logging.getLogger(__name__)

logger = setup_production_logging()

# ==================== UTILITY DECORATORS ====================
def login_required(f):
    """Decorator to require user login"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify({
                'success': False,
                'error': 'Login required',
                'code': 'LOGIN_REQUIRED'
            }), 401
        return f(*args, **kwargs)
    return decorated_function

# ==================== MONGODB MANAGER ====================
class MongoDBManager:
    """Production MongoDB manager for MongoDB TV and millions of users"""
    
    def __init__(self):
        self.client = None
        self.db = None
        self.is_connected = False
        self._setup_mongodb()
    
    def _setup_mongodb(self):
        """Setup MongoDB connection"""
        if not MONGODB_AVAILABLE:
            logger.warning("MongoDB not available, using SQLite fallback")
            return
            
        try:
            self.client = MongoClient(
                config.MONGODB_URI,
                maxPoolSize=config.MONGODB_MAX_POOL_SIZE,
                minPoolSize=config.MONGODB_MIN_POOL_SIZE,
                serverSelectionTimeoutMS=5000,
                connectTimeoutMS=10000,
                socketTimeoutMS=20000
            )
            
            # Test connection
            self.client.admin.command('ping')
            self.db = self.client[config.MONGODB_DB]
            self.is_connected = True
            
            logger.info("✅ MongoDB connected successfully for MongoDB TV!")
            
            # Create indexes for performance
            self._create_indexes()
            
        except Exception as e:
            logger.warning(f"MongoDB connection failed: {e}, using SQLite fallback")
            self.is_connected = False
    
    def _create_indexes(self):
        """Create performance indexes"""
        try:
            # Users collection
            if 'users' in self.db.list_collection_names():
                self.db.users.create_index([("email", pymongo.ASCENDING)], unique=True)
                self.db.users.create_index([("phone", pymongo.ASCENDING)], unique=True)
                self.db.users.create_index([("state", pymongo.ASCENDING)])
                self.db.users.create_index([("district", pymongo.ASCENDING)])
            
            # Listings collection
            if 'listings' in self.db.list_collection_names():
                self.db.listings.create_index([("category", pymongo.ASCENDING)])
                self.db.listings.create_index([("state", pymongo.ASCENDING)])
                self.db.listings.create_index([("price", pymongo.ASCENDING)])
                self.db.listings.create_index([("created_at", pymongo.DESCENDING)])
                self.db.listings.create_index([("is_active", pymongo.ASCENDING)])
            
            # Messages collection
            if 'messages' in self.db.list_collection_names():
                self.db.messages.create_index([("sender_id", pymongo.ASCENDING)])
                self.db.messages.create_index([("receiver_id", pymongo.ASCENDING)])
                self.db.messages.create_index([("created_at", pymongo.DESCENDING)])
            
            logger.info("✅ MongoDB indexes created for optimal performance")
            
        except Exception as e:
            logger.error(f"Failed to create MongoDB indexes: {e}")
    
    def insert_user(self, user_data):
        """Insert user into MongoDB"""
        if not self.is_connected:
            return None
            
        try:
            result = self.db.users.insert_one(user_data)
            return str(result.inserted_id)
        except Exception as e:
            logger.error(f"MongoDB user insert error: {e}")
            return None
    
    def find_user(self, query):
        """Find user in MongoDB"""
        if not self.is_connected:
            return None
            
        try:
            return self.db.users.find_one(query)
        except Exception as e:
            logger.error(f"MongoDB user find error: {e}")
            return None
    
    def update_user(self, query, update_data):
        """Update user in MongoDB"""
        if not self.is_connected:
            return False
            
        try:
            result = self.db.users.update_one(query, {"$set": update_data})
            return result.modified_count > 0
        except Exception as e:
            logger.error(f"MongoDB user update error: {e}")
            return False
    
    def insert_listing(self, listing_data):
        """Insert listing into MongoDB"""
        if not self.is_connected:
            return None
            
        try:
            result = self.db.listings.insert_one(listing_data)
            return str(result.inserted_id)
        except Exception as e:
            logger.error(f"MongoDB listing insert error: {e}")
            return None
    
    def find_listings(self, query, limit=50):
        """Find listings in MongoDB"""
        if not self.is_connected:
            return []
            
        try:
            cursor = self.db.listings.find(query).limit(limit)
            return list(cursor)
        except Exception as e:
            logger.error(f"MongoDB listings find error: {e}")
            return []
    
    def get_stats(self):
        """Get MongoDB statistics"""
        if not self.is_connected:
            return {}
            
        try:
            stats = {
                'total_users': self.db.users.count_documents({}),
                'total_listings': self.db.listings.count_documents({}),
                'total_messages': self.db.messages.count_documents({}),
                'active_listings': self.db.listings.count_documents({"is_active": True}),
                'mongodb_connected': True
            }
            return stats
        except Exception as e:
            logger.error(f"MongoDB stats error: {e}")
            return {'mongodb_connected': False}

# ==================== HINDI LANGUAGE MANAGER ====================
class HindiLanguageManager:
    """Hindi language support manager"""
    
    def __init__(self):
        self.translator = None
        self.is_available = False
        self._setup_translator()
    
    def _setup_translator(self):
        """Setup Hindi language translator"""
        if not HINDI_AVAILABLE:
            logger.warning("Hindi language support not available")
            return
            
        try:
            self.translator = Translator()
            self.is_available = True
            logger.info("✅ Hindi language support loaded successfully!")
        except Exception as e:
            logger.warning(f"Hindi translator setup failed: {e}")
            self.is_available = False
    
    def translate_to_hindi(self, text):
        """Translate text to Hindi"""
        if not self.is_available or not text:
            return text
            
        try:
            result = self.translator.translate(text, dest='hi')
            return result.text
        except Exception as e:
            logger.error(f"Hindi translation error: {e}")
            return text
    
    def translate_to_english(self, text):
        """Translate Hindi text to English"""
        if not self.is_available or not text:
            return text
            
        try:
            result = self.translator.translate(text, dest='en')
            return result.text
        except Exception as e:
            logger.error(f"English translation error: {e}")
            return text
    
    def get_hindi_text(self, key):
        """Get Hindi text for common UI elements"""
        hindi_texts = {
            'welcome': 'स्वागत है',
            'login': 'लॉगिन करें',
            'register': 'रजिस्टर करें',
            'email': 'ईमेल पता',
            'password': 'पासवर्ड',
            'full_name': 'पूरा नाम',
            'phone': 'फोन नंबर',
            'state': 'राज्य',
            'district': 'जिला',
            'address': 'पता',
            'submit': 'जमा करें',
            'cancel': 'रद्द करें',
            'search': 'खोजें',
            'categories': 'श्रेणियां',
            'listings': 'सूचियां',
            'messages': 'संदेश',
            'profile': 'प्रोफाइल',
            'logout': 'लॉगआउट',
            'create_account': 'खाता बनाएं',
            'already_have_account': 'पहले से खाता है?',
            'dont_have_account': 'खाता नहीं है?',
            'step_basic_info': 'चरण 1: बुनियादी जानकारी',
            'step_location': 'चरण 2: स्थान',
            'next_step': 'अगला चरण',
            'previous_step': 'पिछला चरण',
            'password_strength': 'पासवर्ड की ताकत',
            'weak': 'कमजोर',
            'medium': 'मध्यम',
            'strong': 'मजबूत'
        }
        return hindi_texts.get(key, key)

# ==================== PRODUCTION REDIS CACHE ====================
class ProductionCacheManager:
    """Production-grade Redis cache manager with fallback"""
    
    def __init__(self):
        self.redis_pool = None
        self.memory_cache = {}
        self.cache_stats = {'hits': 0, 'misses': 0, 'errors': 0}
        self._setup_redis()
    
    def _setup_redis(self):
        """Setup Redis connection pool"""
        try:
            self.redis_pool = redis.ConnectionPool.from_url(
                config.REDIS_URL,
                max_connections=config.REDIS_MAX_CONNECTIONS,
                retry_on_timeout=True,
                socket_keepalive=True,
                socket_keepalive_options={},
                health_check_interval=30
            )
            
            # Test connection
            redis_client = redis.Redis(connection_pool=self.redis_pool)
            redis_client.ping()
            logger.info("✅ Production Redis cache connected successfully")
            
        except Exception as e:
            logger.warning(f"Redis connection failed: {e}, using memory cache")
            self.redis_pool = None
    
    def get(self, key: str) -> Any:
        """Get value from cache with stats tracking"""
        try:
            if self.redis_pool:
                redis_client = redis.Redis(connection_pool=self.redis_pool)
                value = redis_client.get(key)
                if value:
                    self.cache_stats['hits'] += 1
                    return json.loads(value.decode('utf-8'))
                else:
                    self.cache_stats['misses'] += 1
                    return None
            else:
                # Memory cache fallback
                if key in self.memory_cache:
                    self.cache_stats['hits'] += 1
                    return self.memory_cache[key]
                else:
                    self.cache_stats['misses'] += 1
                    return None
                    
        except Exception as e:
            self.cache_stats['errors'] += 1
            logger.error(f"Cache get error: {e}")
            return None
    
    def set(self, key: str, value: Any, ttl: int = config.CACHE_TTL) -> bool:
        """Set value in cache"""
        try:
            if self.redis_pool:
                redis_client = redis.Redis(connection_pool=self.redis_pool)
                return redis_client.setex(key, ttl, json.dumps(value, default=str))
            else:
                self.memory_cache[key] = value
                # Simple TTL for memory cache
                threading.Timer(ttl, lambda: self.memory_cache.pop(key, None)).start()
                return True
                
        except Exception as e:
            logger.error(f"Cache set error: {e}")
            return False
    
    def delete(self, key: str) -> bool:
        """Delete value from cache"""
        try:
            if self.redis_pool:
                redis_client = redis.Redis(connection_pool=self.redis_pool)
                return bool(redis_client.delete(key))
            else:
                return bool(self.memory_cache.pop(key, None))
                
        except Exception as e:
            logger.error(f"Cache delete error: {e}")
            return False
    
    def get_stats(self) -> Dict:
        """Get cache performance statistics"""
        total_requests = self.cache_stats['hits'] + self.cache_stats['misses']
        hit_rate = (self.cache_stats['hits'] / total_requests * 100) if total_requests > 0 else 0
        
        return {
            'hit_rate': round(hit_rate, 2),
            'total_requests': total_requests,
            'hits': self.cache_stats['hits'],
            'misses': self.cache_stats['misses'],
            'errors': self.cache_stats['errors']
        }

cache_manager = ProductionCacheManager()

# Initialize MongoDB and Hindi Language managers
mongodb_manager = MongoDBManager()
hindi_manager = HindiLanguageManager()

# ==================== PRODUCTION DATABASE MODELS ====================
Base = declarative_base()

class User(Base):
    """Production User model with advanced features"""
    __tablename__ = "users"
    
    # Primary Fields
    id = Column(Integer, primary_key=True, index=True)
    uuid = Column(String(36), unique=True, default=lambda: str(uuid.uuid4()), index=True)
    email = Column(String(255), unique=True, nullable=False, index=True)
    phone = Column(String(15), unique=True, nullable=False, index=True)
    password_hash = Column(String(255), nullable=False)
    full_name = Column(String(100), nullable=False)
    
    # Profile & Location
    state = Column(String(50), nullable=False)
    district = Column(String(50), nullable=False)
    pincode = Column(String(6), nullable=False)
    address = Column(Text, nullable=False)
    profile_picture = Column(String(255))
    bio = Column(Text)
    date_of_birth = Column(DateTime)
    occupation = Column(String(100))
    
    # Security & Authentication
    email_verified = Column(Boolean, default=False)
    phone_verified = Column(Boolean, default=False)
    two_factor_enabled = Column(Boolean, default=False)
    login_attempts = Column(Integer, default=0)
    locked_until = Column(DateTime)
    last_password_change = Column(DateTime, default=datetime.utcnow)
    
    # Performance Metrics
    trust_score = Column(Float, default=50.0)
    seller_rating = Column(Float, default=0.0)
    buyer_rating = Column(Float, default=0.0)
    total_sales = Column(Integer, default=0)
    total_purchases = Column(Integer, default=0)
    response_rate = Column(Float, default=100.0)
    avg_response_time = Column(Integer, default=60)  # minutes
    
    # AI & Analytics
    interaction_score = Column(Float, default=0.0)
    preferred_categories = Column(JSON, default=list)
    search_history = Column(JSON, default=list)
    behavior_patterns = Column(JSON, default=dict)
    ai_recommendations = Column(JSON, default=list)
    
    # Status & Timestamps
    is_active = Column(Boolean, default=True, index=True)
    is_premium = Column(Boolean, default=False)
    subscription_expires = Column(DateTime)
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    last_active = Column(DateTime, default=datetime.utcnow, index=True)
    last_login_ip = Column(String(45))
    
    # Properties
    @property
    def user_name(self):
        """Get user's display name"""
        return self.full_name or self.email.split('@')[0]
    
    @property
    def average_rating(self):
        """Calculate average rating from received ratings"""
        if not self.ratings_received:
            return 0.0
        total = sum(r.rating for r in self.ratings_received)
        return round(total / len(self.ratings_received), 1)
    
    @property
    def total_ratings(self):
        """Get total number of ratings received"""
        return len(self.ratings_received)
    
    @property
    def is_locked(self):
        """Check if account is currently locked"""
        if not self.locked_until:
            return False
        return datetime.utcnow() < self.locked_until
    
    # Relationships
    listings = relationship("Listing", back_populates="owner", lazy="dynamic")
    messages_sent = relationship("Message", foreign_keys="Message.sender_id", back_populates="sender", lazy="dynamic")
    messages_received = relationship("Message", foreign_keys="Message.receiver_id", back_populates="receiver", lazy="dynamic")
    watchlist_items = relationship("Watchlist", back_populates="user", lazy="dynamic")
    ratings_given = relationship("Rating", foreign_keys="Rating.rater_id", back_populates="rater", lazy="dynamic")
    ratings_received = relationship("Rating", foreign_keys="Rating.rated_user_id", back_populates="rated_user", lazy="dynamic")
    notifications = relationship("Notification", back_populates="user", lazy="dynamic")

class Category(Base):
    """Production Category model with ML features"""
    __tablename__ = "categories"
    
    id = Column(Integer, primary_key=True)
    name = Column(String(100), unique=True, nullable=False, index=True)
    slug = Column(String(100), unique=True, nullable=False, index=True)
    icon = Column(String(50))
    description = Column(Text)
    parent_id = Column(Integer, ForeignKey("categories.id"))
    
    # AI & Analytics
    popularity_score = Column(Float, default=0.0)
    avg_price = Column(Float, default=0.0)
    total_listings = Column(Integer, default=0)
    trending_score = Column(Float, default=0.0)
    
    # Configuration
    is_active = Column(Boolean, default=True)
    sort_order = Column(Integer, default=0)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    subcategories = relationship("Category", backref="parent", remote_side=[id])
    listings = relationship("Listing", back_populates="category", lazy="dynamic")
class Listing(Base):
    """Production Listing model with advanced features"""
    __tablename__ = "listings"
    
    # Primary Fields
    id = Column(Integer, primary_key=True, index=True)
    uuid = Column(String(36), unique=True, default=lambda: str(uuid.uuid4()), index=True)
    title = Column(String(200), nullable=False, index=True)
    description = Column(Text, nullable=False)
    category_id = Column(Integer, ForeignKey("categories.id"), nullable=False, index=True)
    owner_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    
    # Product Details
    brand = Column(String(100))
    model = Column(String(100))
    condition_type = Column(String(20), default="good", index=True)
    year_of_purchase = Column(Integer)
    
    # Pricing (Production)
    asking_price = Column(Float, nullable=False, index=True)
    original_price = Column(Float)
    min_price = Column(Float)
    price_negotiable = Column(Boolean, default=True)
    currency = Column(String(3), default="INR")
    
    # Location
    state = Column(String(50), nullable=False, index=True)
    district = Column(String(50), nullable=False, index=True)
    pincode = Column(String(6))
    latitude = Column(Float)
    longitude = Column(Float)
    
    # Media & Content
    images = Column(JSON, default=list)
    videos = Column(JSON, default=list)
    documents = Column(JSON, default=list)
    specifications = Column(JSON, default=dict)
    features = Column(JSON, default=list)
    tags = Column(JSON, default=list)
    
    # AI & ML Features
    quality_score = Column(Float, default=0.0)
    demand_score = Column(Float, default=0.0)
    price_competitiveness = Column(Float, default=0.0)
    predicted_sale_days = Column(Integer, default=30)
    ai_generated_tags = Column(JSON, default=list)
    similarity_hash = Column(String(64))
    
    # Performance Metrics
    views_count = Column(Integer, default=0, index=True)
    unique_views = Column(Integer, default=0)
    favorites_count = Column(Integer, default=0)
    inquiries_count = Column(Integer, default=0)
    shares_count = Column(Integer, default=0)
    conversion_rate = Column(Float, default=0.0)
    
    # Engagement Tracking
    view_sources = Column(JSON, default=dict)
    viewer_demographics = Column(JSON, default=dict)
    engagement_timeline = Column(JSON, default=list)
    
    # Status & Workflow
    is_active = Column(Boolean, default=True, index=True)
    is_sold = Column(Boolean, default=False, index=True)
    is_featured = Column(Boolean, default=False)
    is_promoted = Column(Boolean, default=False)
    is_verified = Column(Boolean, default=False)
    moderation_status = Column(String(20), default="pending")  # pending, approved, rejected
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    sold_at = Column(DateTime)
    
    # Relationships
    owner = relationship("User", back_populates="listings")
    category = relationship("Category", back_populates="listings")
    watchlist_items = relationship("Watchlist", back_populates="listing")
    messages = relationship("Message", back_populates="listing")
    
    def __repr__(self):
        return f"<Listing(id={self.id}, title='{self.title}', price={self.asking_price})>"
    
    @property
    def main_image(self):
        """Get the main image URL"""
        if self.images and len(self.images) > 0:
            return f"/uploads/{self.images[0]}"
        return None
    
    @property
    def image_count(self):
        """Get the number of images"""
        return len(self.images) if self.images else 0
    
    @property
    def days_listed(self):
        """Get the number of days the item has been listed"""
        delta = datetime.utcnow() - self.created_at
        return delta.days
    
    @property
    def popularity_score(self):
        """Calculate popularity score based on views and time"""
        base_score = min(self.views_count * 2, 100)
        time_factor = max(1 - (self.days_listed / 30), 0.1)
        return round(base_score * time_factor, 1)

# New Models for Enhanced Features
class Watchlist(Base):
    """Watchlist model for users to save items"""
    __tablename__ = "watchlists"
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    listing_id = Column(Integer, ForeignKey("listings.id"), nullable=False, index=True)
    added_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    user = relationship("User", back_populates="watchlist_items")
    listing = relationship("Listing", back_populates="watchlist_items")
    
    def __repr__(self):
        return f"<Watchlist(user_id={self.user_id}, listing_id={self.listing_id})>"

class Message(Base):
    """Message model for user communication"""
    __tablename__ = "messages"
    
    id = Column(Integer, primary_key=True)
    sender_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    receiver_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    listing_id = Column(Integer, ForeignKey("listings.id"), nullable=False, index=True)
    message = Column(Text, nullable=False)
    sent_at = Column(DateTime, default=datetime.utcnow)
    read = Column(Boolean, default=False)
    read_at = Column(DateTime)
    
    # Relationships
    sender = relationship("User", foreign_keys=[sender_id], back_populates="messages_sent")
    receiver = relationship("User", foreign_keys=[receiver_id], back_populates="messages_received")
    listing = relationship("Listing", back_populates="messages")
    
    def __repr__(self):
        return f"<Message(sender_id={self.sender_id}, receiver_id={self.receiver_id})>"
class Rating(Base):
    """Rating model for user reviews"""
    __tablename__ = "ratings"
    
    id = Column(Integer, primary_key=True)
    rater_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    rated_user_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    listing_id = Column(Integer, ForeignKey("listings.id"), nullable=False, index=True)
    rating = Column(Integer, nullable=False)  # 1-5 stars
    comment = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    rater = relationship("User", foreign_keys=[rater_id], back_populates="ratings_given")
    rated_user = relationship("User", foreign_keys=[rated_user_id], back_populates="ratings_received")
    
    def __repr__(self):
        return f"<Rating(rater_id={self.rater_id}, rated_user_id={self.rated_user_id}, rating={self.rating})>"

class Notification(Base):
    """Notification model for user alerts"""
    __tablename__ = "notifications"
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    type = Column(String(50), nullable=False)  # message, offer, system, etc.
    message = Column(Text, nullable=False)
    data = Column(JSON, default=dict)
    read = Column(Boolean, default=False)
    read_at = Column(DateTime)
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    
    # Relationships
    user = relationship("User", back_populates="notifications")
    
    def __repr__(self):
        return f"<Notification(user_id={self.user_id}, type='{self.type}')>"



# Add performance indexes
Index('idx_user_performance', User.is_active, User.trust_score, User.last_active)
Index('idx_listing_search', Listing.is_active, Listing.is_sold, Listing.state, Listing.category_id, Listing.asking_price)
Index('idx_listing_trending', Listing.views_count, Listing.favorites_count, Listing.created_at)
Index('idx_message_thread', Message.listing_id, Message.sender_id, Message.receiver_id, Message.sent_at)

# ==================== PRODUCTION DATA ====================
PRODUCTION_CATEGORIES = {
    "📱 Electronics & Technology": {
        "icon": "📱",
        "subcategories": [
            "Mobile Phones & Accessories", "Laptops & Computers", "Tablets & iPads", 
            "Cameras & Photography", "Gaming Consoles & Games", "Smart Watches & Fitness",
            "Audio & Headphones", "TV & Home Entertainment", "Smart Home Devices"
        ],
        "description": "Latest technology and electronic gadgets",
        "trending": True,
        "avg_price": 25000
    },
    "🚗 Vehicles & Automotive": {
        "icon": "🚗", 
        "subcategories": [
            "Cars & Sedans", "SUVs & Crossovers", "Motorcycles & Scooters", 
            "Bicycles & E-bikes", "Commercial Vehicles", "Auto Parts & Accessories",
            "Tires & Wheels", "Car Audio & Electronics"
        ],
        "description": "All types of vehicles and automotive parts",
        "trending": True,
        "avg_price": 350000
    },
    "🏠 Real Estate & Property": {
        "icon": "🏠",
        "subcategories": [
            "Houses for Sale", "Apartments & Flats", "Villas & Independent Houses",
            "Commercial Properties", "Rental Properties", "Land & Plots",
            "PG & Hostels", "Co-working Spaces"
        ],
        "description": "Real estate properties and rental options",
        "trending": False,
        "avg_price": 2500000
    },
    "👗 Fashion & Lifestyle": {
        "icon": "👗",
        "subcategories": [
            "Men's Clothing", "Women's Clothing", "Kids & Baby Fashion",
            "Footwear & Shoes", "Bags & Luggage", "Jewelry & Accessories",
            "Watches & Timepieces", "Beauty & Personal Care"
        ],
        "description": "Fashion clothing and lifestyle products",
        "trending": True,
        "avg_price": 1500
    },
    "🏡 Home & Living": {
        "icon": "🏡",
        "subcategories": [
            "Furniture & Decor", "Kitchen & Dining", "Home Appliances",
            "Bed & Bath", "Garden & Outdoor", "Tools & Hardware",
            "Art & Collectibles", "Books & Magazines"
        ],
        "description": "Everything for your home and living",
        "trending": False,
        "avg_price": 8000
    },
    "⚽ Sports & Fitness": {
        "icon": "⚽",
        "subcategories": [
            "Sports Equipment", "Fitness & Gym Equipment", "Outdoor & Adventure",
            "Team Sports", "Individual Sports", "Sports Apparel",
            "Supplements & Nutrition", "Sports Accessories"
        ],
        "description": "Sports equipment and fitness gear",
        "trending": False,
        "avg_price": 3500
    },
    "💼 Business & Services": {
        "icon": "💼",
        "subcategories": [
            "Office Equipment", "Business Services", "Professional Courses",
            "Consultancy Services", "Digital Marketing", "Web Development",
            "Legal Services", "Financial Services"
        ],
        "description": "Business equipment and professional services",
        "trending": True,
        "avg_price": 15000
    },
    "🎓 Education & Learning": {
        "icon": "🎓",
        "subcategories": [
            "Books & Study Material", "Online Courses", "Tutoring Services",
            "Educational Toys", "School Supplies", "Professional Certification",
            "Language Learning", "Skill Development"
        ],
        "description": "Educational resources and learning materials",
        "trending": False,
        "avg_price": 2000
    }
}

PRODUCTION_STATES_DISTRICTS = {
    "Delhi": {
        "districts": [
            {"name": "Central Delhi", "is_metro": True, "tier": "tier_1", "population": 582320},
            {"name": "North Delhi", "is_metro": True, "tier": "tier_1", "population": 887978},
            {"name": "South Delhi", "is_metro": True, "tier": "tier_1", "population": 2731929},
            {"name": "West Delhi", "is_metro": True, "tier": "tier_1", "population": 2543243},
            {"name": "East Delhi", "is_metro": True, "tier": "tier_1", "population": 1709346},
            {"name": "New Delhi", "is_metro": True, "tier": "tier_1", "population": 249998},
            {"name": "North West Delhi", "is_metro": True, "tier": "tier_1", "population": 3656539},
            {"name": "South West Delhi", "is_metro": True, "tier": "tier_1", "population": 2292958},
            {"name": "North East Delhi", "is_metro": True, "tier": "tier_1", "population": 2241624}
        ]
    },
    "Maharashtra": {
        "districts": [
            {"name": "Mumbai City", "is_metro": True, "tier": "tier_1", "population": 3085411},
            {"name": "Mumbai Suburban", "is_metro": True, "tier": "tier_1", "population": 9356962},
            {"name": "Pune", "is_metro": True, "tier": "tier_1", "population": 9429408},
            {"name": "Thane", "is_metro": True, "tier": "tier_1", "population": 11060148},
            {"name": "Nashik", "is_metro": False, "tier": "tier_2", "population": 6107187},
            {"name": "Nagpur", "is_metro": False, "tier": "tier_2", "population": 4653570},
            {"name": "Aurangabad", "is_metro": False, "tier": "tier_2", "population": 3701282},
            {"name": "Solapur", "is_metro": False, "tier": "tier_3", "population": 4317756}
        ]
    },
    "Karnataka": {
        "districts": [
            {"name": "Bangalore Urban", "is_metro": True, "tier": "tier_1", "population": 9621551},
            {"name": "Mysore", "is_metro": False, "tier": "tier_2", "population": 3001127},
            {"name": "Hubli-Dharwad", "is_metro": False, "tier": "tier_2", "population": 1943857},
            {"name": "Mangalore", "is_metro": False, "tier": "tier_2", "population": 2083625},
            {"name": "Belgaum", "is_metro": False, "tier": "tier_3", "population": 4779661},
            {"name": "Gulbarga", "is_metro": False, "tier": "tier_3", "population": 2566326}
        ]
    },
    "Tamil Nadu": {
        "districts": [
            {"name": "Chennai", "is_metro": True, "tier": "tier_1", "population": 4681087},
            {"name": "Coimbatore", "is_metro": False, "tier": "tier_2", "population": 3458045},
            {"name": "Madurai", "is_metro": False, "tier": "tier_2", "population": 3038252},
            {"name": "Tiruchirappalli", "is_metro": False, "tier": "tier_3", "population": 2722290},
            {"name": "Salem", "is_metro": False, "tier": "tier_3", "population": 3482056},
            {"name": "Erode", "is_metro": False, "tier": "tier_3", "population": 2251744}
        ]
    },
    "Gujarat": {
        "districts": [
            {"name": "Ahmedabad", "is_metro": True, "tier": "tier_1", "population": 7214225},
            {"name": "Surat", "is_metro": False, "tier": "tier_1", "population": 6081322},
            {"name": "Vadodara", "is_metro": False, "tier": "tier_2", "population": 4165626},
            {"name": "Rajkot", "is_metro": False, "tier": "tier_2", "population": 3804558},
            {"name": "Bhavnagar", "is_metro": False, "tier": "tier_3", "population": 2880365},
            {"name": "Jamnagar", "is_metro": False, "tier": "tier_3", "population": 2160119}
        ]
    },
    "West Bengal": {
        "districts": [
            {"name": "Kolkata", "is_metro": True, "tier": "tier_1", "population": 4496694},
            {"name": "Howrah", "is_metro": True, "tier": "tier_1", "population": 4850029},
            {"name": "North 24 Parganas", "is_metro": True, "tier": "tier_1", "population": 10009781},
            {"name": "South 24 Parganas", "is_metro": False, "tier": "tier_2", "population": 8161961},
            {"name": "Hooghly", "is_metro": False, "tier": "tier_2", "population": 5519145},
            {"name": "Bardhaman", "is_metro": False, "tier": "tier_3", "population": 7717563}
        ]
    },
    "Uttar Pradesh": {
        "districts": [
            {"name": "Ghaziabad", "is_metro": True, "tier": "tier_1", "population": 4681645},
            {"name": "Noida", "is_metro": True, "tier": "tier_1", "population": 637272},
            {"name": "Lucknow", "is_metro": False, "tier": "tier_1", "population": 4589838},
            {"name": "Kanpur", "is_metro": False, "tier": "tier_2", "population": 4581006},
            {"name": "Agra", "is_metro": False, "tier": "tier_2", "population": 4418797},
            {"name": "Varanasi", "is_metro": False, "tier": "tier_2", "population": 3676841},
            {"name": "Meerut", "is_metro": False, "tier": "tier_2", "population": 3443689},
            {"name": "Allahabad", "is_metro": False, "tier": "tier_2", "population": 5954391}
        ]
    },
    "Rajasthan": {
        "districts": [
            {"name": "Jaipur", "is_metro": False, "tier": "tier_1", "population": 6626178},
            {"name": "Jodhpur", "is_metro": False, "tier": "tier_2", "population": 3687165},
            {"name": "Udaipur", "is_metro": False, "tier": "tier_2", "population": 3068420},
            {"name": "Kota", "is_metro": False, "tier": "tier_2", "population": 1951014},
            {"name": "Bikaner", "is_metro": False, "tier": "tier_3", "population": 2363937},
            {"name": "Ajmer", "is_metro": False, "tier": "tier_3", "population": 2583052}
        ]
    },
    "Himachal Pradesh": {
        "districts": [
            {"name": "Shimla", "is_metro": False, "tier": "tier_2", "population": 813384},
            {"name": "Kangra", "is_metro": False, "tier": "tier_3", "population": 1507223},
            {"name": "Mandi", "is_metro": False, "tier": "tier_3", "population": 999518},
            {"name": "Solan", "is_metro": False, "tier": "tier_3", "population": 580320},
            {"name": "Una", "is_metro": False, "tier": "tier_3", "population": 521173},
            {"name": "Hamirpur", "is_metro": False, "tier": "tier_3", "population": 454293}
        ]
    },
    "Punjab": {
        "districts": [
            {"name": "Ludhiana", "is_metro": False, "tier": "tier_1", "population": 3498739},
            {"name": "Amritsar", "is_metro": False, "tier": "tier_2", "population": 2490891},
            {"name": "Jalandhar", "is_metro": False, "tier": "tier_2", "population": 2193590},
            {"name": "Patiala", "is_metro": False, "tier": "tier_2", "population": 1895686},
            {"name": "Bathinda", "is_metro": False, "tier": "tier_3", "population": 1388859},
            {"name": "Mohali", "is_metro": False, "tier": "tier_2", "population": 994628}
        ]
    },
    "Haryana": {
        "districts": [
            {"name": "Gurugram", "is_metro": True, "tier": "tier_1", "population": 1514432},
            {"name": "Faridabad", "is_metro": True, "tier": "tier_1", "population": 1404653},
            {"name": "Panipat", "is_metro": False, "tier": "tier_2", "population": 1205437},
            {"name": "Ambala", "is_metro": False, "tier": "tier_2", "population": 1128350},
            {"name": "Yamunanagar", "is_metro": False, "tier": "tier_3", "population": 1214205},
            {"name": "Rohtak", "is_metro": False, "tier": "tier_3", "population": 1061204}
        ]
    },
    "Uttarakhand": {
        "districts": [
            {"name": "Dehradun", "is_metro": False, "tier": "tier_2", "population": 1696694},
            {"name": "Haridwar", "is_metro": False, "tier": "tier_2", "population": 1890422},
            {"name": "Udham Singh Nagar", "is_metro": False, "tier": "tier_3", "population": 1648902},
            {"name": "Nainital", "is_metro": False, "tier": "tier_3", "population": 954605},
            {"name": "Pauri Garhwal", "is_metro": False, "tier": "tier_3", "population": 687271},
            {"name": "Almora", "is_metro": False, "tier": "tier_3", "population": 622506}
        ]
    }
}
# ==================== PRODUCTION VALIDATION SYSTEM ====================
class ProductionValidationHelper:
    """Military-grade validation system for production"""
    
    # Enhanced security patterns
    THREAT_PATTERNS = {
        'sql_injection': r'(union|select|insert|delete|update|drop|create|alter|exec|script|;|\-\-|\/\*|\*\/)',
        'xss_attempt': r'<script|javascript:|vbscript:|onload=|onerror=|onclick=|onmouseover=',
        'path_traversal': r'\.\.|\/\.\.|\\\.\.|\%2e\%2e|\%2f|\%5c',
        'command_injection': r'(\||&|;|\$\(|\`)',
        'spam_indicators': r'(urgent|limited time|act now|guaranteed|100%|free money|click here|buy now)',
        'suspicious_urls': r'(bit\.ly|tinyurl|t\.co|goo\.gl|short\.link)',
        'phone_exposure': r'(\+91|91)?\s*[6-9]\d{9}',
        'email_exposure': r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}',
        'profanity': r'(damn|hell|crap|stupid|idiot|moron)',  # Basic list
        'suspicious_pricing': r'(free|0\s*rs|0\s*rupees|no\s*cost)',
        'fake_urgency': r'(only\s*\d+\s*left|hurry|limited\s*stock|last\s*chance)'
    }
    
    PHONE_PATTERNS = {
        'indian_mobile': r'^[6-9]\d{9}$',
        'with_country': r'^(\+91|91)?[6-9]\d{9}$',
        'international': r'^\+[1-9]\d{1,14}$',
    }
    
    @classmethod
    def validate_indian_phone(cls, phone: str) -> tuple:
        """Simple and flexible Indian phone validation"""
        if not phone:
            return False, "Phone number is required"
        
        # Clean the phone number - remove all non-digits
        clean_phone = re.sub(r'[^\d]', '', phone)
        
        # Remove country code if present
        if clean_phone.startswith('91') and len(clean_phone) == 12:
            clean_phone = clean_phone[2:]
        elif clean_phone.startswith('0') and len(clean_phone) == 11:
            clean_phone = clean_phone[1:]
        
        # Basic validation - must be 10 digits
        if len(clean_phone) != 10:
            return False, "Phone number must be 10 digits"
        
        # Must start with 6, 7, 8, or 9 (Indian mobile numbers)
        if not clean_phone[0] in '6789':
            return False, "Phone number must start with 6, 7, 8, or 9"
        
        # Check if all digits are the same (obviously fake)
        if len(set(clean_phone)) == 1:
            return False, "Invalid phone number"
        
        return True, clean_phone
    
    @classmethod
    def validate_email_production(cls, email: str) -> tuple:
        """Production-grade email validation"""
        if not email:
            return False, "Email is required"
        
        if len(email) > 254:
            return False, "Email address too long"
        
        try:
            # Use email-validator library for thorough validation
            valid = validate_email(email)
            email = valid.email
            
            # Additional security checks
            local, domain = email.split('@')
            
            # Check for suspicious patterns
            suspicious_patterns = [
                r'^[0-9]+$',  # All numbers in local part
                r'^.{1,2}$',  # Too short local part
                r'\.{2,}$',    # Multiple consecutive dots
                r'^\.|\.@$',   # Starts or ends with dot
            ]
            
            for pattern in suspicious_patterns:
                if re.search(pattern, local):
                    return False, "Invalid email format"
            
            # Check domain reputation (simplified)
            disposable_domains = [
                '10minutemail.com', 'tempmail.org', 'guerrillamail.com',
                'mailinator.com', 'yopmail.com', 'temp-mail.org'
            ]
            
            if domain.lower() in disposable_domains:
                return False, "Disposable email addresses are not allowed"
            
            return True, email
            
        except EmailNotValidError as e:
            return False, str(e)
    
    @classmethod
    def validate_password_strength(cls, password: str) -> dict:
        """Military-grade password validation"""
        result = {
            'is_valid': False,
            'strength_score': 0,
            'strength_level': 'Very Weak',
            'feedback': [],
            'requirements_met': {},
            'estimated_crack_time': '',
            'suggestions': []
        }
        
        if not password:
            result['feedback'].append("Password is required")
            return result
        
        # Length requirements
        length_score = 0
        if len(password) >= 8:
            length_score = 20
            result['requirements_met']['min_length'] = True
        else:
            result['feedback'].append("Password must be at least 8 characters long")
            result['requirements_met']['min_length'] = False
        
        if len(password) >= 12:
            length_score = 30
        if len(password) >= 16:
            length_score = 40
        
        # Character complexity
        has_upper = bool(re.search(r'[A-Z]', password))
        has_lower = bool(re.search(r'[a-z]', password))
        has_digit = bool(re.search(r'\d', password))
        has_special = bool(re.search(r'[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]', password))
        
        result['requirements_met'].update({
            'has_uppercase': has_upper,
            'has_lowercase': has_lower,
            'has_digits': has_digit,
            'has_special': has_special
        })
        
        complexity_score = sum([has_upper, has_lower, has_digit, has_special]) * 15
        
        # Pattern analysis
        pattern_score = 40
        
        # Check for common patterns
        if re.search(r'(.)\1{2,}', password):  # Repeated characters
            pattern_score -= 10
            result['feedback'].append("Avoid repeating characters")
        
        if re.search(r'(012|123|234|345|456|567|678|789|890)', password):
            pattern_score -= 10
            result['feedback'].append("Avoid sequential numbers")
        
        if re.search(r'(abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz)', password.lower()):
            pattern_score -= 10
            result['feedback'].append("Avoid sequential letters")
        
        if re.search(r'(qwer|asdf|zxcv|qwerty|asdfgh|zxcvbn)', password.lower()):
            pattern_score -= 15
            result['feedback'].append("Avoid keyboard patterns")
        
        # Common password check
        common_passwords = {
            'password', '12345678', 'qwerty123', 'password123', 'admin123',
            'welcome123', 'changeme', 'letmein123', 'password1', 'admin1234'
        }
        
        if password.lower() in common_passwords:
            pattern_score -= 30
            result['feedback'].append("This is a commonly used password")
        
        # Dictionary word check (simplified)
        common_words = {
            'password', 'welcome', 'admin', 'user', 'login', 'system',
            'computer', 'internet', 'security', 'account', 'india', 'dealhub'
        }
        
        password_lower = password.lower()
        for word in common_words:
            if word in password_lower:
                pattern_score -= 10
                result['feedback'].append(f"Avoid using common words like '{word}'")
                break
        
        # Calculate final score
        total_score = min(100, max(0, length_score + complexity_score + pattern_score))
        result['strength_score'] = total_score
        
        # Determine strength level and crack time
        if total_score >= 90:
            result['strength_level'] = 'Very Strong'
            result['estimated_crack_time'] = 'Centuries'
            result['is_valid'] = True
        elif total_score >= 75:
            result['strength_level'] = 'Strong'
            result['estimated_crack_time'] = 'Years'
            result['is_valid'] = True
        elif total_score >= 60:
            result['strength_level'] = 'Good'
            result['estimated_crack_time'] = 'Months'
            result['is_valid'] = True
        elif total_score >= 40:
            result['strength_level'] = 'Fair'
            result['estimated_crack_time'] = 'Days'
        elif total_score >= 20:
            result['strength_level'] = 'Weak'
            result['estimated_crack_time'] = 'Hours'
        else:
            result['strength_level'] = 'Very Weak'
            result['estimated_crack_time'] = 'Minutes'
        
        # Generate suggestions
        if not has_upper:
            result['suggestions'].append("Add uppercase letters (A-Z)")
        if not has_lower:
            result['suggestions'].append("Add lowercase letters (a-z)")
        if not has_digit:
            result['suggestions'].append("Add numbers (0-9)")
        if not has_special:
            result['suggestions'].append("Add special characters (!@#$%^&*)")
        if len(password) < 12:
            result['suggestions'].append("Make it longer (12+ characters recommended)")
        
        return result
    
    @classmethod
    def advanced_threat_detection(cls, text: str, context: str = "general") -> dict:
        """Advanced threat detection with ML-enhanced scoring"""
        threats = {
            'detected_threats': [],
            'risk_score': 0,
            'confidence': 0,
            'action_required': 'none',  # none, review, block
            'recommendations': []
        }
        
        if not text:
            return threats
        
        text_lower = text.lower()
        total_risk = 0
        
        # Pattern-based detection
        for threat_type, pattern in cls.THREAT_PATTERNS.items():
            matches = re.findall(pattern, text_lower, re.IGNORECASE)
            if matches:
                severity = cls._get_threat_severity(threat_type)
                threats['detected_threats'].append({
                    'type': threat_type,
                    'matches': len(matches),
                    'severity': severity,
                    'sample_matches': matches[:3]  # Show first 3 matches
                })
                total_risk += severity * len(matches)
        
        # Context-specific analysis
        if context == "listing":
            context_threats = cls._analyze_listing_threats(text)
            threats['detected_threats'].extend(context_threats)
            total_risk += sum(t['severity'] for t in context_threats)
        
        elif context == "profile":
            context_threats = cls._analyze_profile_threats(text)
            threats['detected_threats'].extend(context_threats)
            total_risk += sum(t['severity'] for t in context_threats)
        
        # Calculate final risk score (0-100)
        threats['risk_score'] = min(100, total_risk)
        threats['confidence'] = min(100, len(threats['detected_threats']) * 25)
        
        # Determine action required
        if threats['risk_score'] >= 80:
            threats['action_required'] = 'block'
            threats['recommendations'].append("Content blocked - high security risk detected")
        elif threats['risk_score'] >= 50:
            threats['action_required'] = 'review'
            threats['recommendations'].append("Content flagged for manual review")
        elif threats['risk_score'] >= 25:
            threats['action_required'] = 'monitor'
            threats['recommendations'].append("Monitor user activity")
        
        return threats
    
    @classmethod
    def _get_threat_severity(cls, threat_type: str) -> int:
        """Get severity score for each threat type"""
        severity_map = {
            'sql_injection': 95,
            'xss_attempt': 90,
            'command_injection': 95,
            'path_traversal': 85,
            'spam_indicators': 40,
            'suspicious_urls': 60,
            'phone_exposure': 30,
            'email_exposure': 25,
            'profanity': 20,
            'suspicious_pricing': 35,
            'fake_urgency': 30
        }
        return severity_map.get(threat_type, 25)
    
    @classmethod
    def _analyze_listing_threats(cls, text: str) -> List[dict]:
        """Analyze listing-specific threats"""
        threats = []
        
        # Check for contact info in listing description (against policy)
        phone_pattern = r'(\+91|91)?\s*[6-9]\d{9}'
        phone_matches = re.findall(phone_pattern, text)
        if phone_matches:
            threats.append({
                'type': 'contact_info_violation',
                'severity': 70,
                'matches': len(phone_matches),
                'description': 'Phone number found in listing content'
            })
        
        email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
        email_matches = re.findall(email_pattern, text)
        if email_matches:
            threats.append({
                'type': 'contact_info_violation',
                'severity': 70,
                'matches': len(email_matches),
                'description': 'Email address found in listing content'
            })
        
        # Check for suspicious pricing claims
        free_patterns = [
            r'completely\s+free',
            r'no\s+money\s+required',
            r'zero\s+cost',
            r'free\s+of\s+charge'
        ]
        
        for pattern in free_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                threats.append({
                    'type': 'suspicious_pricing_claim',
                    'severity': 50,
                    'matches': 1,
                    'description': 'Suspicious free pricing claim detected'
                })
                break
        
        return threats
    
    @classmethod
    def _analyze_profile_threats(cls, text: str) -> List[dict]:
        """Analyze profile-specific threats"""
        threats = []
        
        # Check for inappropriate content in bio
        inappropriate_patterns = [
            r'looking\s+for\s+relationship',
            r'dating\s+profile',
            r'single\s+and\s+ready',
            r'hookup|hook\s+up'
        ]
        
        for pattern in inappropriate_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                threats.append({
                    'type': 'inappropriate_profile_content',
                    'severity': 60,
                    'matches': 1,
                    'description': 'Inappropriate dating-related content in profile'
                })
                break
        
        return threats

validation_helper = ProductionValidationHelper()

# ==================== PRODUCTION SECURITY MANAGER ====================
class ProductionSecurityManager:
    """Military-grade security for production deployment"""
    
    @staticmethod
    def hash_password(password: str) -> str:
        """Production password hashing with configurable rounds"""
        return generate_password_hash(password, method='pbkdf2:sha256', salt_length=16)
    
    @staticmethod
    def verify_password(plain_password: str, hashed_password: str) -> bool:
        """Secure password verification"""
        return check_password_hash(hashed_password, plain_password)
    
    @staticmethod
    def generate_secure_token() -> str:
        """Generate cryptographically secure token"""
        return secrets.token_urlsafe(32)
    
    @staticmethod
    def hash_sensitive_data(data: str) -> str:
        """Hash sensitive data with salt"""
        salt = secrets.token_bytes(32)
        return hashlib.pbkdf2_hmac('sha256', data.encode(), salt, 100000).hex()
    
    @staticmethod
    def rate_limit_key(identifier: str) -> str:
        """Generate rate limiting key"""
        return f"rate_limit:{hashlib.md5(identifier.encode()).hexdigest()}"

security_manager = ProductionSecurityManager()

# ==================== PRODUCTION DATABASE SETUP ====================
def create_production_engine():
    """Create production-grade database engine"""
    if config.DATABASE_URL.startswith('sqlite'):
        # SQLite for development
        engine = create_engine(
            config.DATABASE_URL,
            connect_args={"check_same_thread": False},
            pool_pre_ping=True,
            echo=False
        )
    else:
        # PostgreSQL/MySQL for production
        engine = create_engine(
            config.DATABASE_URL,
            poolclass=QueuePool,
            pool_size=config.DATABASE_POOL_SIZE,
            max_overflow=config.DATABASE_MAX_OVERFLOW,
            pool_timeout=config.DATABASE_POOL_TIMEOUT,
            pool_recycle=config.DATABASE_POOL_RECYCLE,
            pool_pre_ping=True,
            echo=False
        )
    
    return engine

# Create database engine and session
engine = create_production_engine()
SessionLocal = scoped_session(sessionmaker(autocommit=False, autoflush=False, bind=engine))

def get_db():
    """Get database session with proper cleanup"""
    db = SessionLocal()
    try:
        yield db
    except Exception as e:
        db.rollback()
        logger.error(f"Database error: {e}")
        raise
    finally:
        db.close()

# ==================== PRODUCTION FLASK APP ====================
app = Flask(__name__)

# Production Configuration
app.config['SECRET_KEY'] = config.SECRET_KEY
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(seconds=config.SESSION_TIMEOUT)
app.config['MAX_CONTENT_LENGTH'] = config.MAX_FILE_SIZE

# CORS Configuration
CORS(app, resources={
    r"/api/*": {
        "origins": ["*"],
        "methods": ["GET", "POST", "PUT", "DELETE"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

# Rate Limiting
limiter = Limiter(
    key_func=get_remote_address,
    app=app,
    default_limits=[f"{config.RATE_LIMIT_PER_MINUTE} per minute", f"{config.RATE_LIMIT_PER_HOUR} per hour"],
    storage_uri=config.REDIS_URL if cache_manager.redis_pool else None
)

# Compression middleware
if config.ENABLE_COMPRESSION:
    @app.after_request
    def compress_response(response):
        if (response.status_code == 200 and 
            'text/html' in response.content_type and
            len(response.get_data()) > 1000):
            
            accept_encoding = request.headers.get('Accept-Encoding', '')
            if 'gzip' in accept_encoding:
                gzipped_data = gzip.compress(response.get_data())
                response.set_data(gzipped_data)
                response.headers['Content-Encoding'] = 'gzip'
                response.headers['Content-Length'] = len(gzipped_data)
        
        return response

# Profiling middleware (development only)
if config.ENABLE_PROFILING:
    app.wsgi_app = ProfilerMiddleware(app.wsgi_app, profile_dir='./profiles')

# Create directories
os.makedirs(config.UPLOAD_PATH, exist_ok=True)
os.makedirs('static', exist_ok=True)
os.makedirs('templates', exist_ok=True)
os.makedirs('profiles', exist_ok=True)


# ==================== PRODUCTION INITIALIZATION ====================
def reset_database():
    """Reset database by dropping and recreating all tables"""
    logger.info("Resetting database...")
    try:
        # Drop all tables
        Base.metadata.drop_all(bind=engine)
        # Recreate all tables
        Base.metadata.create_all(bind=engine)
        logger.info("Database reset completed successfully")
    except Exception as e:
        logger.error(f"Database reset failed: {e}")
        raise
def initialize_production_database():
    """Initialize production database with comprehensive data"""
    logger.info("Initializing production database...")
    
    try:
        # Create all tables
        Base.metadata.create_all(bind=engine)
        
        db = next(get_db())
        
        # Initialize categories with production data
        for category_name, category_data in PRODUCTION_CATEGORIES.items():
            existing_category = db.query(Category).filter(Category.name == category_name).first()
            if not existing_category:
                # Create unique slug from name
                base_slug = re.sub(r'[^\w\s-]', '', category_name.lower()).strip()
                base_slug = re.sub(r'[-\s]+', '-', base_slug)
                
                # Ensure slug uniqueness
                slug = base_slug
                counter = 1
                while db.query(Category).filter(Category.slug == slug).first():
                    slug = f"{base_slug}-{counter}"
                    counter += 1
                
                category = Category(
                    name=category_name,
                    slug=slug,
                    icon=category_data["icon"],
                    description=category_data["description"],
                    popularity_score=90.0 if category_data["trending"] else 60.0,
                    avg_price=category_data["avg_price"],
                    is_active=True
                )
                db.add(category)
                db.flush()
                
                # Add subcategories
                for i, subcategory_name in enumerate(category_data["subcategories"]):
                    # Create unique slug for subcategory
                    base_subcategory_slug = re.sub(r'[^\w\s-]', '', subcategory_name.lower()).strip()
                    base_subcategory_slug = re.sub(r'[-\s]+', '-', base_subcategory_slug)
                    
                    subcategory_slug = base_subcategory_slug
                    counter = 1
                    while db.query(Category).filter(Category.slug == subcategory_slug).first():
                        subcategory_slug = f"{base_subcategory_slug}-{counter}"
                        counter += 1
                    
                    subcategory = Category(
                        name=subcategory_name,
                        slug=subcategory_slug,
                        parent_id=category.id,
                        sort_order=i,
                        is_active=True
                    )
                    db.add(subcategory)
        
        # Create sample users for testing
        sample_users = [
            {
                "email": "john.doe@example.com",
                "phone": "9876543210",
                "full_name": "John Doe",
                "state": "Delhi",
                "district": "Central Delhi",
                "pincode": "110001",
                "address": "123 Main Street, Connaught Place",
                "trust_score": 85.0
            },
            {
                "email": "priya.sharma@example.com", 
                "phone": "8765432109",
                "full_name": "Priya Sharma",
                "state": "Maharashtra",
                "district": "Mumbai City",
                "pincode": "400001",
                "address": "456 Marine Drive, Mumbai",
                "trust_score": 92.0
            },
            {
                "email": "raj.patel@example.com",
                "phone": "7654321098", 
                "full_name": "Raj Patel",
                "state": "Gujarat",
                "district": "Ahmedabad",
                "pincode": "380001",
                "address": "789 SG Highway, Ahmedabad",
                "trust_score": 78.0
            },
            {
                "email": "amit.singh@example.com",
                "phone": "9876512345",
                "full_name": "Amit Singh", 
                "state": "Punjab",
                "district": "Ludhiana",
                "pincode": "141001",
                "address": "Plot 45, Model Town, Ludhiana",
                "trust_score": 88.0
            },
            {
                "email": "neha.gupta@example.com",
                "phone": "8765123456",
                "full_name": "Neha Gupta",
                "state": "Haryana", 
                "district": "Gurugram",
                "pincode": "122001",
                "address": "Sector 14, DLF City, Gurugram",
                "trust_score": 90.0
            }
        ]
        
        for user_data in sample_users:
            existing_user = db.query(User).filter(User.email == user_data["email"]).first()
            if not existing_user:
                user = User(
                    email=user_data["email"],
                    phone=user_data["phone"],
                    password_hash=security_manager.hash_password("SecurePass123!"),
                    full_name=user_data["full_name"],
                    state=user_data["state"],
                    district=user_data["district"],
                    pincode=user_data["pincode"],
                    address=user_data["address"],
                    trust_score=user_data["trust_score"],
                    email_verified=True,
                    phone_verified=True,
                    is_active=True
                )
                db.add(user)
        
        # Create sample listings
        sample_listings = [
            {
                "title": "iPhone 14 Pro Max 256GB Deep Purple - Excellent Condition",
                "description": "Selling my iPhone 14 Pro Max in excellent condition. All accessories included. Battery health 98%. No scratches or dents. Reason for selling: Upgraded to iPhone 15.",
                "category_name": "📱 Electronics & Technology",
                "brand": "Apple",
                "model": "iPhone 14 Pro Max",
                "condition_type": "excellent",
                "asking_price": 89999.0,
                "original_price": 129900.0,
                "owner_email": "john.doe@example.com"
            },
            {
                "title": "Honda City 2020 Petrol Manual - Well Maintained",
                "description": "Honda City 2020 model, petrol manual transmission. Single owner, well maintained with complete service history. All documents clear. AC working perfectly.",
                "category_name": "🚗 Vehicles & Automotive", 
                "brand": "Honda",
                "model": "City",
                "condition_type": "good",
                "asking_price": 975000.0,
                "original_price": 1200000.0,
                "owner_email": "priya.sharma@example.com"
            },
            {
                "title": "MacBook Pro 13-inch M2 Chip 512GB - Like New",
                "description": "MacBook Pro 13-inch with M2 chip, 512GB storage. Purchased 6 months ago, barely used. All original packaging and accessories included. Perfect for students and professionals.",
                "category_name": "📱 Electronics & Technology",
                "brand": "Apple", 
                "model": "MacBook Pro M2",
                "condition_type": "like_new",
                "asking_price": 115000.0,
                "original_price": 139900.0,
                "owner_email": "raj.patel@example.com"
            },
            {
                "title": "Royal Enfield Classic 350 - Black Color",
                "description": "Royal Enfield Classic 350 in excellent condition. Black color, well maintained, all papers clear. Perfect for long rides and city commuting.",
                "category_name": "🚗 Vehicles & Automotive",
                "brand": "Royal Enfield",
                "model": "Classic 350",
                "condition_type": "excellent",
                "asking_price": 145000.0,
                "original_price": 185000.0,
                "owner_email": "amit.singh@example.com"
            },
            {
                "title": "Samsung 55-inch 4K Smart TV - Crystal Display",
                "description": "Samsung 55-inch 4K Smart TV with Crystal Display technology. Excellent picture quality, all smart features working. Selling due to relocation.",
                "category_name": "📱 Electronics & Technology",
                "brand": "Samsung",
                "model": "Crystal 4K 55-inch",
                "condition_type": "good",
                "asking_price": 42000.0,
                "original_price": 65000.0,
                "owner_email": "neha.gupta@example.com"
            }
        ]
        
        for listing_data in sample_listings:
            owner = db.query(User).filter(User.email == listing_data["owner_email"]).first()
            category = db.query(Category).filter(Category.name == listing_data["category_name"]).first()
            
            if owner and category:
                existing_listing = db.query(Listing).filter(
                    Listing.title == listing_data["title"],
                    Listing.owner_id == owner.id
                ).first()
                
                if not existing_listing:
                    listing = Listing(
                        title=listing_data["title"],
                        description=listing_data["description"],
                        category_id=category.id,
                        owner_id=owner.id,
                        brand=listing_data["brand"],
                        model=listing_data["model"],
                        condition_type=listing_data["condition_type"],
                        asking_price=listing_data["asking_price"],
                        original_price=listing_data["original_price"],
                        state=owner.state,
                        district=owner.district,
                        pincode=owner.pincode,
                        price_negotiable=True,
                        is_active=True,
                        moderation_status="approved",
                                created_at=datetime.utcnow(),
                        views_count=random.randint(50, 500),
                        favorites_count=random.randint(5, 50),
                        quality_score=random.uniform(75.0, 95.0)
                    )
                    db.add(listing)
        
        db.commit()
        logger.info("Production database initialized successfully")
        
        # Print initialization summary
        total_users = db.query(User).count()
        total_categories = db.query(Category).count() 
        total_listings = db.query(Listing).count()
        
        logger.info(f"Database Summary:")
        logger.info(f"   Users: {total_users}")
        logger.info(f"   Categories: {total_categories}")
        logger.info(f"   Listings: {total_listings}")
        
    except Exception as e:
        logger.error(f"Database initialization failed: {e}")
        if 'db' in locals():
            db.rollback()
        raise

# ==================== PRODUCTION HELPERS ====================
def requires_auth(f):
    """Production authentication decorator"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify({
                'error': 'Authentication required',
                'code': 'AUTH_REQUIRED'
            }), 401
        
        # Verify session is still valid
        db = next(get_db())
        user = db.query(User).filter(User.id == session['user_id']).first()
        if not user or not user.is_active:
            session.clear()
            return jsonify({
                'error': 'Invalid session',
                'code': 'INVALID_SESSION'
            }), 401
        
        return f(*args, **kwargs)
    return decorated_function

def cache_response(timeout=300):
    """Production response caching decorator"""
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            # Generate cache key
            cache_key = f"response:{request.path}:{hashlib.md5(request.query_string).hexdigest()}"
            
            # Try to get from cache
            cached_response = cache_manager.get(cache_key)
            if cached_response:
                return jsonify(cached_response)
            
            # Execute function and cache result
            result = f(*args, **kwargs)
            if isinstance(result, dict):
                cache_manager.set(cache_key, result, timeout)
            
            return result
        return decorated_function
    return decorator

# ==================== ENHANCED FEATURES ====================

# Watchlist functionality
@app.route('/api/watchlist/add', methods=['POST'])
@login_required
def add_to_watchlist():
    """Add item to user's watchlist"""
    try:
        data = request.get_json()
        listing_id = data.get('listing_id')
        
        if not listing_id:
            return jsonify({'success': False, 'error': 'Listing ID required'}), 400
        
        db = next(get_db())
        user = db.query(User).filter(User.id == session['user_id']).first()
        listing = db.query(Listing).filter(Listing.id == listing_id).first()
        
        if not listing:
            return jsonify({'success': False, 'error': 'Listing not found'}), 404
        
        # Check if already in watchlist
        existing = db.query(Watchlist).filter(
            Watchlist.user_id == user.id,
            Watchlist.listing_id == listing_id
        ).first()
        
        if existing:
            return jsonify({'success': False, 'error': 'Already in watchlist'}), 400
        
        watchlist_item = Watchlist(
            user_id=user.id,
            listing_id=listing_id,
            added_at=datetime.utcnow()
        )
        
        db.add(watchlist_item)
        db.commit()
        
        return jsonify({'success': True, 'message': 'Added to watchlist'})
        
    except Exception as e:
        logger.error(f"Watchlist add error: {e}")
        return jsonify({'success': False, 'error': 'Failed to add to watchlist'}), 500

@app.route('/api/watchlist/remove', methods=['POST'])
@login_required
def remove_from_watchlist():
    """Remove item from user's watchlist"""
    try:
        data = request.get_json()
        listing_id = data.get('listing_id')
        
        if not listing_id:
            return jsonify({'success': False, 'error': 'Listing ID required'}), 400
        
        db = next(get_db())
        user = db.query(User).filter(User.id == session['user_id']).first()
        
        watchlist_item = db.query(Watchlist).filter(
            Watchlist.user_id == user.id,
            Watchlist.listing_id == listing_id
        ).first()
        
        if not watchlist_item:
            return jsonify({'success': False, 'error': 'Not in watchlist'}), 404
        
        db.delete(watchlist_item)
        db.commit()
        
        return jsonify({'success': True, 'message': 'Removed from watchlist'})
        
    except Exception as e:
        logger.error(f"Watchlist remove error: {e}")
        return jsonify({'success': False, 'error': 'Failed to remove from watchlist'}), 500

@app.route('/api/watchlist')
@login_required
def get_watchlist():
    """Get user's watchlist"""
    try:
        db = next(get_db())
        user = db.query(User).filter(User.id == session['user_id']).first()
        
        watchlist_items = db.query(Watchlist).filter(
            Watchlist.user_id == user.id
        ).join(Listing).all()
        
        watchlist_data = []
        for item in watchlist_items:
            listing = item.listing
            watchlist_data.append({
                'id': listing.id,
                'title': listing.title,
                'price': listing.asking_price,
                'image': listing.images[0] if listing.images else None,
                'category': listing.category.name,
                'added_at': item.added_at.isoformat()
            })
        
        return jsonify({'success': True, 'watchlist': watchlist_data})
        
    except Exception as e:
        logger.error(f"Watchlist get error: {e}")
        return jsonify({'success': False, 'error': 'Failed to get watchlist'}), 500

# Advanced search functionality
@app.route('/api/search/advanced')
def advanced_search():
    """Advanced search with filters"""
    try:
        query = request.args.get('q', '')
        category = request.args.get('category', '')
        min_price = request.args.get('min_price', '')
        max_price = request.args.get('max_price', '')
        condition = request.args.get('condition', '')
        location = request.args.get('location', '')
        sort_by = request.args.get('sort_by', 'relevance')
        
        db = next(get_db())
        
        # Build query
        search_query = db.query(Listing).filter(Listing.is_active == True)
        
        if query:
            search_query = search_query.filter(
                or_(
                    Listing.title.ilike(f'%{query}%'),
                    Listing.description.ilike(f'%{query}%'),
                    Listing.brand.ilike(f'%{query}%')
                )
            )
        
        if category:
            search_query = search_query.join(Category).filter(Category.name == category)
        
        if min_price:
            search_query = search_query.filter(Listing.asking_price >= float(min_price))
        
        if max_price:
            search_query = search_query.filter(Listing.asking_price <= float(max_price))
        
        if condition:
            search_query = search_query.filter(Listing.condition_type == condition)
        
        if location:
            search_query = search_query.filter(
                or_(
                    Listing.state.ilike(f'%{location}%'),
                    Listing.district.ilike(f'%{location}%')
                )
            )
        
        # Apply sorting
        if sort_by == 'price_low':
            search_query = search_query.order_by(Listing.asking_price.asc())
        elif sort_by == 'price_high':
            search_query = search_query.order_by(Listing.asking_price.desc())
        elif sort_by == 'newest':
            search_query = search_query.order_by(Listing.created_at.desc())
        elif sort_by == 'popular':
            search_query = search_query.order_by(Listing.views_count.desc())
        else:  # relevance
            search_query = search_query.order_by(Listing.popularity_score.desc())
        
        results = search_query.limit(50).all()
        
        search_results = []
        for listing in results:
            search_results.append({
                'id': listing.id,
                'title': listing.title,
                'price': listing.asking_price,
                'image': listing.images[0] if listing.images else None,
                'category': listing.category.name,
                'condition': listing.condition_type,
                'location': f"{listing.district}, {listing.state}",
                'created_at': listing.created_at.isoformat(),
                'views': listing.views_count
            })
        
        return jsonify({
            'success': True,
            'results': search_results,
            'total': len(search_results)
        })
        
    except Exception as e:
        logger.error(f"Advanced search error: {e}")
        return jsonify({'success': False, 'error': 'Search failed'}), 500

# Messaging system
@app.route('/api/messages/send', methods=['POST'])
@login_required
def send_message():
    """Send message to listing owner"""
    try:
        data = request.get_json()
        listing_id = data.get('listing_id')
        message_text = data.get('message', '')
        
        if not listing_id or not message_text:
            return jsonify({'success': False, 'error': 'Listing ID and message required'}), 400
        
        db = next(get_db())
        sender = db.query(User).filter(User.id == session['user_id']).first()
        listing = db.query(Listing).filter(Listing.id == listing_id).first()
        
        if not listing:
            return jsonify({'success': False, 'error': 'Listing not found'}), 404
        
        if sender.id == listing.owner_id:
            return jsonify({'success': False, 'error': 'Cannot message yourself'}), 400
        
        message = Message(
            sender_id=sender.id,
            receiver_id=listing.owner_id,
            listing_id=listing_id,
            message=message_text,
            sent_at=datetime.utcnow()
        )
        
        db.add(message)
        db.commit()
        
        return jsonify({'success': True, 'message': 'Message sent successfully'})
        
    except Exception as e:
        logger.error(f"Send message error: {e}")
        return jsonify({'success': False, 'error': 'Failed to send message'}), 500

@app.route('/api/messages/inbox')
@login_required
def get_inbox():
    """Get user's inbox messages"""
    try:
        db = next(get_db())
        user = db.query(User).filter(User.id == session['user_id']).first()
        
        messages = db.query(Message).filter(
            Message.receiver_id == user.id
        ).order_by(Message.sent_at.desc()).all()
        
        inbox_data = []
        for msg in messages:
            sender = db.query(User).filter(User.id == msg.sender_id).first()
            listing = db.query(Listing).filter(Listing.id == msg.listing_id).first()
            
            inbox_data.append({
                'id': msg.id,
                'sender_name': sender.full_name,
                'sender_id': sender.id,
                'listing_title': listing.title if listing else 'Deleted Listing',
                'message': msg.message,
                'sent_at': msg.sent_at.isoformat(),
                'read': msg.read
            })
        
        return jsonify({'success': True, 'inbox': inbox_data})
        
    except Exception as e:
        logger.error(f"Get inbox error: {e}")
        return jsonify({'success': False, 'error': 'Failed to get inbox'}), 500

# User ratings and reviews
@app.route('/api/ratings/submit', methods=['POST'])
@login_required
def submit_rating():
    """Submit rating for a user"""
    try:
        data = request.get_json()
        rated_user_id = data.get('rated_user_id')
        listing_id = data.get('listing_id')
        rating = data.get('rating')
        comment = data.get('comment', '')
        
        if not rated_user_id or not listing_id or not rating:
            return jsonify({'success': False, 'error': 'User ID, listing ID and rating required'}), 400
        
        if not 1 <= rating <= 5:
            return jsonify({'success': False, 'error': 'Rating must be 1-5'}), 400
        
        db = next(get_db())
        rater = db.query(User).filter(User.id == session['user_id']).first()
        rated_user = db.query(User).filter(User.id == rated_user_id).first()
        
        if not rated_user:
            return jsonify({'success': False, 'error': 'User not found'}), 404
        
        if rater.id == rated_user.id:
            return jsonify({'success': False, 'error': 'Cannot rate yourself'}), 400
        
        # Check if already rated for this listing
        existing_rating = db.query(Rating).filter(
            Rating.rater_id == rater.id,
            Rating.rated_user_id == rated_user_id,
            Rating.listing_id == listing_id
        ).first()
        
        if existing_rating:
            existing_rating.rating = rating
            existing_rating.comment = comment
            existing_rating.updated_at = datetime.utcnow()
        else:
            new_rating = Rating(
                rater_id=rater.id,
                rated_user_id=rated_user_id,
                listing_id=listing_id,
                rating=rating,
                comment=comment,
                created_at=datetime.utcnow()
            )
            db.add(new_rating)
        
        db.commit()
        
        return jsonify({'success': True, 'message': 'Rating submitted successfully'})
        
    except Exception as e:
        logger.error(f"Submit rating error: {e}")
        return jsonify({'success': False, 'error': 'Failed to submit rating'}), 500

# Notification system
@app.route('/api/notifications')
@login_required
def get_notifications():
    """Get user's notifications"""
    try:
        db = next(get_db())
        user = db.query(User).filter(User.id == session['user_id']).first()
        
        notifications = db.query(Notification).filter(
            Notification.user_id == user.id
        ).order_by(Notification.created_at.desc()).limit(20).all()
        
        notification_data = []
        for notif in notifications:
            notification_data.append({
                'id': notif.id,
                'type': notif.type,
                'message': notif.message,
                'data': notif.data,
                'read': notif.read,
                'created_at': notif.created_at.isoformat()
            })
        
        return jsonify({'success': True, 'notifications': notification_data})
        
    except Exception as e:
        logger.error(f"Get notifications error: {e}")
        return jsonify({'success': False, 'error': 'Failed to get notifications'}), 500
@app.route('/api/notifications/mark-read', methods=['POST'])
@login_required
def mark_notification_read():
    """Mark notification as read"""
    try:
        data = request.get_json()
        notification_id = data.get('notification_id')
        
        if not notification_id:
            return jsonify({'success': False, 'error': 'Notification ID required'}), 400
        
        db = next(get_db())
        user = db.query(User).filter(User.id == session['user_id']).first()
        
        notification = db.query(Notification).filter(
            Notification.id == notification_id,
            Notification.user_id == user.id
        ).first()
        
        if not notification:
            return jsonify({'success': False, 'error': 'Notification not found'}), 404
        
        notification.read = True
        notification.read_at = datetime.utcnow()
        db.commit()
        
        return jsonify({'success': True, 'message': 'Notification marked as read'})
        
    except Exception as e:
        logger.error(f"Mark notification read error: {e}")
        return jsonify({'success': False, 'error': 'Failed to mark notification as read'}), 500

# ==================== PRODUCTION ROUTES ====================

@app.route('/')
def homepage():
    """Production homepage with dynamic data"""
    try:
        db = next(get_db())
        
        # Get categories
        categories = db.query(Category).filter(
            Category.parent_id == None,
            Category.is_active == True
        ).order_by(Category.sort_order, Category.name).all()
        
        # Get featured listings
        featured_listings = db.query(Listing).filter(
            Listing.is_active == True,
            Listing.is_sold == False,
            Listing.moderation_status == "approved"
        ).order_by(Listing.views_count.desc()).limit(8).all()
        
        # Get statistics
        stats = {
            'total_users': db.query(User).filter(User.is_active == True).count(),
            'total_listings': db.query(Listing).filter(Listing.is_active == True).count(),
            'total_categories': db.query(Category).filter(Category.is_active == True).count()
        }
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='home',
                                    categories=categories,
                                    featured_listings=featured_listings,
                                    stats=stats,
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Homepage error: {e}")
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='home',
                                    categories=[],
                                    featured_listings=[],
                                    stats={'total_users': 0, 'total_listings': 0, 'total_categories': 0},
                                    user_session=session)

@app.route('/api/locations')
@cache_response(timeout=3600)  # Cache for 1 hour
def get_locations():
    """Get production location data"""
    return jsonify({
        'success': True,
        'states': PRODUCTION_STATES_DISTRICTS
    })

@app.route('/api/categories')
@cache_response(timeout=1800)  # Cache for 30 minutes
def get_categories():
    """Get production categories"""
    try:
        db = next(get_db())
        categories = db.query(Category).filter(
            Category.parent_id == None,
            Category.is_active == True
        ).order_by(Category.popularity_score.desc()).all()
        
        categories_data = []
        for category in categories:
            subcategories = db.query(Category).filter(
                Category.parent_id == category.id,
                Category.is_active == True
            ).all()
            
            categories_data.append({
                'id': category.id,
                'name': category.name,
                'slug': category.slug,
                'icon': category.icon,
                'description': category.description,
                'subcategories': [
                    {
                        'id': sub.id,
                        'name': sub.name,
                        'slug': sub.slug
                    }
                    for sub in subcategories
                ],
                'popularity_score': category.popularity_score,
                'avg_price': category.avg_price,
                'total_listings': category.total_listings,
                'trending': category.popularity_score > 80
            })
        
        return jsonify({
            'success': True,
            'categories': categories_data
        })
        
    except Exception as e:
        logger.error(f"Categories API error: {e}")
        return jsonify({
            'success': False,
            'error': 'Failed to load categories'
        }), 500
# ==================== MULTIPAGE ROUTES ====================
@app.route('/property')
def property_page():
    """Property page - Real estate listings"""
    try:
        db = next(get_db())
        property_listings = db.query(Listing).filter(
            Listing.is_active == True,
            Listing.category_id.in_(
                db.query(Category.id).filter(
                    Category.slug.in_(['residential', 'commercial', 'plots', 'rental'])
                )
            )
        ).order_by(Listing.created_at.desc()).limit(50).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='property',
                                    listings=property_listings,
                                    category='property',
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Property page error: {e}")
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='property',
                                    listings=[],
                                    category='property',
                                    user_session=session)

@app.route('/motors')
def motors_page():
    """Motors page - Vehicles and automotive"""
    try:
        db = next(get_db())
        motor_listings = db.query(Listing).filter(
            Listing.is_active == True,
            Listing.category_id.in_(
                db.query(Category.id).filter(
                    Category.slug.in_(['cars', 'bikes', 'commercial-vehicles', 'auto-parts'])
                )
            )
        ).order_by(Listing.created_at.desc()).limit(50).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='motors',
                                    listings=motor_listings,
                                    category='motors',
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Motors page error: {e}")
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='motors',
                                    listings=[],
                                    category='motors',
                                    user_session=session)

@app.route('/jobs')
def jobs_page():
    """Jobs page - Employment opportunities"""
    try:
        db = next(get_db())
        job_listings = db.query(Listing).filter(
            Listing.is_active == True,
            Listing.category_id.in_(
                db.query(Category.id).filter(
                    Category.slug.in_(['it-software', 'finance-banking', 'marketing-sales', 'healthcare', 'education', 'engineering'])
                )
            )
        ).order_by(Listing.created_at.desc()).limit(50).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='jobs',
                                    listings=job_listings,
                                    category='jobs',
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Jobs page error: {e}")
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='jobs',
                                    listings=[],
                                    category='jobs',
                                    user_session=session)

@app.route('/services')
def services_page():
    """Services page - Professional services"""
    try:
        db = next(get_db())
        service_listings = db.query(Listing).filter(
            Listing.is_active == True,
            Listing.category_id.in_(
                db.query(Category.id).filter(
                    Category.slug.in_(['home-services', 'beauty-wellness', 'education-training', 'business-services', 'event-services', 'tech-services'])
                )
            )
        ).order_by(Listing.created_at.desc()).limit(50).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='services',
                                    listings=service_listings,
                                    category='services',
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Services page error: {e}")
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='services',
                                    listings=[],
                                    category='services',
                                    user_session=session)

@app.route('/marketplace')
def marketplace_page():
    """Marketplace page - General goods and items"""
    try:
        db = next(get_db())
        marketplace_listings = db.query(Listing).filter(
            Listing.is_active == True,
            Listing.category_id.in_(
                db.query(Category.id).filter(
                    Category.slug.in_(['electronics', 'fashion', 'home-garden', 'sports-leisure', 'books-media', 'collectibles'])
                )
            )
        ).order_by(Listing.created_at.desc()).limit(50).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='marketplace',
                                    listings=marketplace_listings,
                                    category='marketplace',
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Marketplace page error: {e}")
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='marketplace',
                                    listings=[],
                                    category='marketplace',
                                    user_session=session)

@app.route('/web-scraping')
def web_scraping_page():
    """Web scraping page"""
    try:
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='web-scraping',
                                    user_session=session)
    except Exception as e:
        logger.error(f"Web scraping page error: {e}")
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='web-scraping',
                                    user_session=session)

# Subcategory pages
@app.route('/property/<subcategory>')
def property_subcategory_page(subcategory):
    """Property subcategory pages"""
    try:
        db = next(get_db())
        subcategory_obj = db.query(Category).filter(
            Category.slug == subcategory,
            Category.parent_id.in_(
                db.query(Category.id).filter(Category.slug == 'property')
            )
        ).first()
        
        if not subcategory_obj:
            abort(404)
        
        listings = db.query(Listing).filter(
            Listing.category_id == subcategory_obj.id,
            Listing.is_active == True
        ).order_by(Listing.created_at.desc()).limit(50).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='property',
                                    subcategory=subcategory_obj,
                                    listings=listings,
                                    category='property',
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Property subcategory page error: {e}")
        abort(404)

@app.route('/motors/<subcategory>')
def motors_subcategory_page(subcategory):
    """Motors subcategory pages"""
    try:
        db = next(get_db())
        subcategory_obj = db.query(Category).filter(
            Category.slug == subcategory,
            Category.parent_id.in_(
                db.query(Category.id).filter(Category.slug == 'motors')
            )
        ).first()
        
        if not subcategory_obj:
            abort(404)
        
        listings = db.query(Listing).filter(
            Listing.category_id == subcategory_obj.id,
            Listing.is_active == True
        ).order_by(Listing.created_at.desc()).limit(50).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='motors',
                                    subcategory=subcategory_obj,
                                    listings=listings,
                                    category='motors',
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Motors subcategory page error: {e}")
        abort(404)

# User profile and account pages
@app.route('/profile')
def profile_page():
    """User profile page"""
    if 'user_id' not in session:
        return redirect('/auth/login')
    
    try:
        db = next(get_db())
        user = db.query(User).filter(User.id == session['user_id']).first()
        
        if not user:
            session.pop('user_id', None)
            return redirect('/auth/login')
        
        user_listings = db.query(Listing).filter(
            Listing.user_id == session['user_id']
        ).order_by(Listing.created_at.desc()).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='profile',
                                    user=user,
                                    user_listings=user_listings,
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Profile page error: {e}")
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='profile',
                                    user=None,
                                    user_listings=[],
                                    user_session=session)

@app.route('/my-listings')
def my_listings_page():
    """User's listings page"""
    if 'user_id' not in session:
        return redirect('/auth/login')
    
    try:
        db = next(get_db())
        user_listings = db.query(Listing).filter(
            Listing.user_id == session['user_id']
        ).order_by(Listing.created_at.desc()).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='my-listings',
                                    user_listings=user_listings,
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"My listings page error: {e}")
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='my-listings',
                                    user_listings=[],
                                    user_session=session)

@app.route('/watchlist')
def watchlist_page():
    """User's watchlist page"""
    if 'user_id' not in session:
        return redirect('/auth/login')
    
    try:
        db = next(get_db())
        user = db.query(User).filter(User.id == session['user_id']).first()
        
        if not user:
            session.pop('user_id', None)
            return redirect('/auth/login')
        
        # Get watchlist items
        watchlist_listings = []
        if user.watchlist:
            watchlist_ids = json.loads(user.watchlist)
            watchlist_listings = db.query(Listing).filter(
                Listing.id.in_(watchlist_ids),
                Listing.is_active == True
            ).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='watchlist',
                                    watchlist_listings=watchlist_listings,
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Watchlist page error: {e}")
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='watchlist',
                                    watchlist_listings=[],
                                    user_session=session)

# Search results page
@app.route('/search')
def search_page():
    """Search results page"""
    query = request.args.get('q', '')
    category = request.args.get('category', '')
    location = request.args.get('location', '')
    
    try:
        db = next(get_db())
        
        # Build search query
        search_query = db.query(Listing).filter(Listing.is_active == True)
        
        if query:
            search_query = search_query.filter(
                or_(
                    Listing.title.ilike(f'%{query}%'),
                    Listing.description.ilike(f'%{query}%'),
                    Listing.tags.ilike(f'%{query}%')
                )
            )
        
        if category:
            search_query = search_query.filter(Listing.category_id == category)
        
        if location:
            search_query = search_query.filter(
                or_(
                    Listing.state.ilike(f'%{location}%'),
                    Listing.district.ilike(f'%{location}%'),
                    Listing.city.ilike(f'%{location}%')
                )
            )
        
        results = search_query.order_by(Listing.created_at.desc()).limit(100).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='search',
                                    search_results=results,
                                    search_query=query,
                                    search_category=category,
                                    search_location=location,
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Search page error: {e}")
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='search',
                                    search_results=[],
                                    search_query=query,
                                    search_category=category,
                                    search_location=location,
                                    user_session=session)

# Listing detail page
@app.route('/listing/<int:listing_id>')
def listing_detail_page(listing_id):
    """Individual listing detail page"""
    try:
        db = next(get_db())
        listing = db.query(Listing).filter(
            Listing.id == listing_id,
            Listing.is_active == True
        ).first()
        
        if not listing:
            abort(404)
        
        # Get seller information
        seller = db.query(User).filter(User.id == listing.user_id).first()
        
        # Get similar listings
        similar_listings = db.query(Listing).filter(
            Listing.category_id == listing.category_id,
            Listing.id != listing_id,
            Listing.is_active == True
        ).limit(6).all()
        
        return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                    page='listing-detail',
                                    listing=listing,
                                    seller=seller,
                                    similar_listings=similar_listings,
                                    user_session=session)
        
    except Exception as e:
        logger.error(f"Listing detail page error: {e}")
        abort(404)

# Auth pages
@app.route('/auth/login')
def login_page():
    """Login page"""
    return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                page='login',
                                user_session=session)

@app.route('/auth/register')
def register_page():
    """Registration page"""
    return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                page='register',
                                user_session=session)

# Help and support pages
@app.route('/help')
def help_page():
    """Help and support page"""
    return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                page='help',
                                user_session=session)

@app.route('/about')
def about_page():
    """About us page"""
    return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                page='about',
                                user_session=session)

@app.route('/contact')
def contact_page():
    """Contact us page"""
    return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                page='contact',
                                user_session=session)

@app.route('/terms')
def terms_page():
    """Terms of service page"""
    return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                page='terms',
                                user_session=session)

@app.route('/privacy')
def privacy_page():
    """Privacy policy page"""
    return render_template_string(PRODUCTION_HTML_TEMPLATE, 
                                page='privacy',
                                user_session=session)

@app.route('/auth/register-simple', methods=['POST'])
@limiter.limit("10 per minute")
def register_user_simple():
    """Simplified user registration for testing"""
    try:
        data = request.get_json()
        
        # Basic validation only
        required_fields = ['email', 'phone', 'password', 'full_name', 'state', 'district', 'pincode', 'address']
        for field in required_fields:
            if not data.get(field):
                return jsonify({
                    'success': False,
                    'error': f'{field.replace("_", " ").title()} is required',
                    'code': 'MISSING_FIELD'
                }), 400
        
        # Simple email validation
        email = data['email'].lower().strip()
        if '@' not in email or '.' not in email:
            return jsonify({
                'success': False,
                'error': 'Invalid email format',
                'code': 'INVALID_EMAIL'
            }), 400
        
        # Simple phone validation
        phone = re.sub(r'[^\d]', '', data['phone'])
        if len(phone) != 10 or not phone.startswith(('6', '7', '8', '9')):
            return jsonify({
                'success': False,
                'error': 'Phone must be 10-digit number starting with 6, 7, 8, or 9',
                'code': 'INVALID_PHONE'
            }), 400
        
        # Simple password validation
        if len(data['password']) < 8:
            return jsonify({
                'success': False,
                'error': 'Password must be at least 8 characters',
                'code': 'WEAK_PASSWORD'
            }), 400
        
        db = next(get_db())
        
        # Check existing users
        existing_user = db.query(User).filter(
            or_(User.email == email, User.phone == phone)
        ).first()
        
        if existing_user:
            return jsonify({
                'success': False,
                'error': 'Email or phone already registered',
                'code': 'USER_EXISTS'
            }), 409
        
        # Create user
        user = User(
            email=email,
            phone=phone,
            password_hash=security_manager.hash_password(data['password']),
            full_name=data['full_name'].strip(),
            state=data['state'],
            district=data['district'],
            pincode=data['pincode'].strip(),
            address=data['address'].strip(),
            trust_score=50.0,
            is_active=True,
            email_verified=True,  # Auto-verify for testing
            phone_verified=True,  # Auto-verify for testing
            last_login_ip=request.remote_addr
        )
        
        db.add(user)
        db.commit()
        db.refresh(user)
        
        # Create session
        session.permanent = True
        session['user_id'] = user.id
        session['user_email'] = user.email
        session['user_name'] = user.full_name
        session['login_time'] = datetime.utcnow().isoformat()
        
        return jsonify({
            'success': True,
            'message': 'Registration successful! Welcome to DealHub India!',
            'user': {
                'id': user.id,
                'email': user.email,
                'full_name': user.full_name,
                'location': f"{user.district}, {user.state}"
            }
        })
        
    except Exception as e:
        if 'db' in locals():
            db.rollback()
        logger.error(f"Simple registration error: {e}")
        return jsonify({
            'success': False,
            'error': f'Registration failed: {str(e)}',
            'code': 'SERVER_ERROR'
        }), 500

@app.route('/auth/register', methods=['POST'])
@limiter.limit("5 per minute")
def register_user():
    """Production user registration with advanced validation"""
    try:
        data = request.get_json()
        
        # Validate required fields
        required_fields = ['email', 'phone', 'password', 'full_name', 'state', 'district', 'pincode', 'address']
        for field in required_fields:
            if not data.get(field):
                return jsonify({
                    'success': False,
                    'error': f'{field.replace("_", " ").title()} is required',
                    'code': 'MISSING_FIELD'
                }), 400
        
        # Advanced validation
        try:
            email_valid, email_msg = validation_helper.validate_email_production(data['email'])
            if not email_valid:
                return jsonify({
                    'success': False,
                    'error': email_msg,
                    'code': 'INVALID_EMAIL'
                }), 400
        except Exception as e:
            logger.error(f"Email validation error: {e}")
            # Fallback to basic email validation
            email_msg = data['email'].lower().strip()
            if '@' not in email_msg or '.' not in email_msg:
                return jsonify({
                    'success': False,
                    'error': 'Invalid email format',
                    'code': 'INVALID_EMAIL'
                }), 400
        
        try:
            phone_valid, phone_result = validation_helper.validate_indian_phone(data['phone'])
            if not phone_valid:
                return jsonify({
                    'success': False,
                    'error': phone_result,
                    'code': 'INVALID_PHONE'
                }), 400
        except Exception as e:
            logger.error(f"Phone validation error: {e}")
            # Fallback to basic phone validation
            phone_result = re.sub(r'[^\d]', '', data['phone'])
            if len(phone_result) != 10 or not phone_result.startswith(('6', '7', '8', '9')):
                return jsonify({
                    'success': False,
                    'error': 'Invalid phone number. Use 10-digit mobile number starting with 6, 7, 8, or 9',
                    'code': 'INVALID_PHONE'
                }), 400
        
        # Password strength validation
        try:
            password_analysis = validation_helper.validate_password_strength(data['password'])
            if not password_analysis['is_valid']:
                return jsonify({
                    'success': False,
                    'error': 'Password not strong enough',
                    'details': password_analysis,
                    'code': 'WEAK_PASSWORD'
                }), 400
        except Exception as e:
            logger.error(f"Password validation error: {e}")
            # Basic password check
            if len(data['password']) < 8:
                return jsonify({
                    'success': False,
                    'error': 'Password must be at least 8 characters long',
                    'code': 'WEAK_PASSWORD'
                }), 400
        
        # Content security check
        try:
            user_content = f"{data['full_name']} {data['address']}"
            threats = validation_helper.advanced_threat_detection(user_content, context="profile")
            if threats['action_required'] == 'block':
                return jsonify({
                    'success': False,
                    'error': 'Registration blocked due to security concerns',
                    'code': 'SECURITY_BLOCK'
                }), 400
        except Exception as e:
            logger.error(f"Security validation error: {e}")
            # Continue without security check if validation fails
        
        db = next(get_db())
        
        # Check for existing users
        existing_user = db.query(User).filter(
            or_(User.email == email_msg, User.phone == phone_result)
        ).first()
        
        if existing_user:
            if existing_user.email == email_msg:
                return jsonify({
                    'success': False,
                    'error': 'This email is already registered',
                    'code': 'EMAIL_EXISTS'
                }), 409
            else:
                return jsonify({
                    'success': False,
                    'error': 'This phone number is already registered',
                    'code': 'PHONE_EXISTS'
                }), 409
        
        # Validate location
        state_name = data['state']
        district_name = data['district']
        
        if state_name not in PRODUCTION_STATES_DISTRICTS:
            available_states = list(PRODUCTION_STATES_DISTRICTS.keys())
            return jsonify({
                'success': False,
                'error': f'Invalid state. Available states: {", ".join(available_states)}',
                'code': 'INVALID_STATE'
            }), 400
        
        district_found = False
        for district in PRODUCTION_STATES_DISTRICTS[state_name]['districts']:
            if district['name'] == district_name:
                district_found = True
                break
        
        if not district_found:
            available_districts = [d['name'] for d in PRODUCTION_STATES_DISTRICTS[state_name]['districts']]
            return jsonify({
                'success': False,
                'error': f'Invalid district. Available districts in {state_name}: {", ".join(available_districts)}',
                'code': 'INVALID_DISTRICT'
            }), 400
        
        # Create user with enhanced security
        user = User(
            email=email_msg,
            phone=phone_result,
            password_hash=security_manager.hash_password(data['password']),
            full_name=data['full_name'].strip(),
            state=state_name,
            district=district_name,
            pincode=data['pincode'].strip(),
            address=data['address'].strip(),
            bio=data.get('bio', '').strip()[:500],  # Limit bio length
            occupation=data.get('occupation', '').strip()[:100],
            trust_score=50.0,  # Starting trust score
            is_active=True,
            email_verified=False,  # Will need verification
            phone_verified=False,  # Will need verification
            last_login_ip=request.remote_addr
        )
        
        db.add(user)
        db.commit()
        db.refresh(user)
        
        # Create session
        session.permanent = True
        session['user_id'] = user.id
        session['user_email'] = user.email
        session['user_name'] = user.full_name
        session['login_time'] = datetime.utcnow().isoformat()
        
        # Cache user data
        try:
            cache_manager.set(f"user:{user.id}", {
                'id': user.id,
                'email': user.email,
                'full_name': user.full_name,
                'location': f"{user.district}, {user.state}",
                'trust_score': user.trust_score,
                'is_verified': user.email_verified and user.phone_verified
            }, 3600)
        except Exception as cache_error:
            logger.warning(f"Cache error (non-critical): {cache_error}")
            # Continue without caching
        
        logger.info(f"New user registered: {user.email} from {user.district}, {user.state}")
        
        return jsonify({
            'success': True,
            'message': 'Registration successful! Welcome to DealHub India 🎉',
            'user': {
                'id': user.id,
                'email': user.email,
                'full_name': user.full_name,
                'location': f"{user.district}, {user.state}",
                'trust_score': user.trust_score,
                'member_since': user.created_at.strftime("%B %Y"),
                'verification_required': True
            },
            'next_steps': [
                'Verify your email address',
                'Verify your phone number',
                'Complete your profile'
            ]
        })
        
    except IntegrityError as e:
        if 'db' in locals():
            db.rollback()
        logger.error(f"Registration integrity error: {e}")
        return jsonify({
            'success': False,
            'error': 'Registration failed due to data conflict',
            'code': 'DATA_CONFLICT'
        }), 409
        
    except Exception as e:
        if 'db' in locals():
            db.rollback()
        logger.error(f"Registration error: {e}")
        return jsonify({
            'success': False,
            'error': 'Registration failed due to server error',
            'code': 'SERVER_ERROR'
        }), 500
@app.route('/auth/login', methods=['POST'])
@limiter.limit("20 per minute")  # More generous limit
def login_user():
    """Simple and easy login"""
    try:
        data = request.get_json()
        email = data.get('email', '').lower().strip()
        password = data.get('password', '')
        remember_me = data.get('remember_me', False)
        
        if not email or not password:
            return jsonify({
                'success': False,
                'error': 'Email and password are required',
                'code': 'MISSING_CREDENTIALS'
            }), 400
        
        db = next(get_db())
        user = db.query(User).filter(User.email == email).first()
        
        if not user:
            return jsonify({
                'success': False,
                'error': 'Account not found. Please register first.',
                'code': 'USER_NOT_FOUND'
            }), 401
        
        # Check if account is active
        if not user.is_active:
            return jsonify({
                'success': False,
                'error': 'Account is disabled. Please contact support.',
                'code': 'ACCOUNT_DISABLED'
            }), 401
        
        # Simple password verification
        if not security_manager.verify_password(password, user.password_hash):
            return jsonify({
                'success': False,
                'error': 'Incorrect password. Please try again.',
                'code': 'INVALID_PASSWORD'
            }), 401
        
        # Successful login - update user
        user.last_active = datetime.utcnow()
        user.last_login_ip = request.remote_addr
        user.login_attempts = 0  # Reset any previous failed attempts
        db.commit()
        
        # Create session
        session.permanent = remember_me
        session['user_id'] = user.id
        session['user_email'] = user.email
        session['user_name'] = user.full_name
        session['login_time'] = datetime.utcnow().isoformat()
        session['is_premium'] = user.is_premium
        
        logger.info(f"User login: {user.email}")
        
        return jsonify({
            'success': True,
            'message': 'Welcome back!',
            'user': {
                'id': user.id,
                'email': user.email,
                'full_name': user.full_name,
                'location': f"{user.district}, {user.state}",
                'member_since': user.created_at.strftime("%B %Y")
            }
        })
        
    except Exception as e:
        logger.error(f"Login error: {e}")
        return jsonify({
            'success': False,
            'error': 'Login failed. Please try again.',
            'code': 'SERVER_ERROR'
        }), 500

@app.route('/auth/logout', methods=['POST'])
def logout_user():
    """Secure logout"""
    try:
        if 'user_id' in session:
            # Clear user cache
            cache_manager.delete(f"user:{session['user_id']}")
            logger.info(f"User logout: {session.get('user_email', 'unknown')}")
        
        session.clear()
        
        return jsonify({
            'success': True,
            'message': 'Logged out successfully'
        })
        
    except Exception as e:
        logger.error(f"Logout error: {e}")
        return jsonify({
            'success': False,
            'error': 'Logout failed'
        }), 500

@app.route('/upload/photo', methods=['POST'])
@limiter.limit("10 per minute")
def upload_photo():
    """Upload item photos with security validation"""
    try:
        if 'user_id' not in session:
            return jsonify({
                'success': False,
                'error': 'Authentication required',
                'code': 'AUTH_REQUIRED'
            }), 400
        
        if 'photo' not in request.files:
            return jsonify({
                'success': False,
                'error': 'No photo file provided',
                'code': 'NO_FILE'
            }), 400
        
        file = request.files['photo']
        if file.filename == '':
            return jsonify({
                'success': False,
                'error': 'No file selected',
                'code': 'NO_FILE'
            }), 400
        
        # Validate file type
        allowed_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.webp'}
        file_ext = os.path.splitext(file.filename)[1].lower()
        if file_ext not in allowed_extensions:
            return jsonify({
                'success': False,
                'error': 'Invalid file type. Only JPG, PNG, GIF, and WebP are allowed',
                'code': 'INVALID_FILE_TYPE'
            }), 400
        
        # Validate file size (5MB max)
        if len(file.read()) > 5 * 1024 * 1024:
            file.seek(0)  # Reset file pointer
            return jsonify({
                'success': False,
                'error': 'File too large. Maximum size is 5MB',
                'code': 'FILE_TOO_LARGE'
            }), 400
        
        file.seek(0)  # Reset file pointer
        
        # Generate secure filename
        filename = secure_filename(file.filename)
        unique_filename = f"{uuid.uuid4().hex}_{filename}"
        file_path = os.path.join(config.UPLOAD_PATH, unique_filename)
        
        # Save file
        file.save(file_path)
        
        # Generate thumbnail for optimization
        try:
            from PIL import Image
            with Image.open(file_path) as img:
                # Create thumbnail
                img.thumbnail((300, 300), Image.Resampling.LANCZOS)
                thumbnail_path = os.path.join(config.UPLOAD_PATH, f"thumb_{unique_filename}")
                img.save(thumbnail_path, optimize=True, quality=85)
        except ImportError:
            # PIL not available, skip thumbnail creation
            pass
        
        logger.info(f"Photo uploaded: {unique_filename} by user {session['user_id']}")
        
        return jsonify({
            'success': True,
            'message': 'Photo uploaded successfully',
            'filename': unique_filename,
            'url': f'/uploads/{unique_filename}'
        })
        
    except Exception as e:
        logger.error(f"Photo upload error: {e}")
        return jsonify({
            'success': False,
            'error': 'Photo upload failed',
            'code': 'SERVER_ERROR'
        }), 500
@app.route('/uploads/<filename>')
def serve_upload(filename):
    """Serve uploaded files with security checks"""
    try:
        # Validate filename format
        if not re.match(r'^[a-f0-9]{32}_[a-zA-Z0-9._-]+$', filename):
            abort(404)
        
        file_path = os.path.join(config.UPLOAD_PATH, filename)
        if not os.path.exists(file_path):
            abort(404)
        
        return send_from_directory(config.UPLOAD_PATH, filename)
        
    except Exception as e:
        logger.error(f"File serve error: {e}")
        abort(404)

@app.route('/upload/profile-photo', methods=['POST'])
@limiter.limit("5 per minute")
def upload_profile_photo():
    """Upload user profile photo"""
    try:
        if 'user_id' not in session:
            return jsonify({
                'success': False,
                'error': 'Authentication required',
                'code': 'AUTH_REQUIRED'
            }), 401
        
        if 'profile_photo' not in request.files:
            return jsonify({
                'success': False,
                'error': 'No profile photo provided',
                'code': 'NO_FILE'
            }), 400
        
        file = request.files['profile_photo']
        if file.filename == '':
            return jsonify({
                'success': False,
                'error': 'No file selected',
                'code': 'NO_FILE'
            }), 400
        
        # Validate file type
        allowed_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.webp'}
        file_ext = os.path.splitext(file.filename)[1].lower()
        if file_ext not in allowed_extensions:
            return jsonify({
                'success': False,
                'error': 'Invalid file type. Only JPG, PNG, GIF, and WebP are allowed',
                'code': 'INVALID_FILE_TYPE'
            }), 400
        
        # Validate file size (2MB max for profile photos)
        if len(file.read()) > 2 * 1024 * 1024:
            file.seek(0)
            return jsonify({
                'success': False,
                'error': 'File too large. Maximum size is 2MB',
                'code': 'FILE_TOO_LARGE'
            }), 400
        
        file.seek(0)
        
        # Generate secure filename
        filename = secure_filename(file.filename)
        unique_filename = f"profile_{uuid.uuid4().hex}_{filename}"
        file_path = os.path.join(config.UPLOAD_PATH, unique_filename)
        
        # Save file
        file.save(file_path)
        
        # Update user profile in database
        db = next(get_db())
        user = db.query(User).filter(User.id == session['user_id']).first()
        if user:
            # Remove old profile photo if exists
            if user.profile_picture:
                old_photo_path = os.path.join(config.UPLOAD_PATH, user.profile_picture)
                if os.path.exists(old_photo_path):
                    os.remove(old_photo_path)
            
            user.profile_picture = unique_filename
            db.commit()
        
        logger.info(f"Profile photo uploaded: {unique_filename} by user {session['user_id']}")
        
        return jsonify({
            'success': True,
            'message': 'Profile photo updated successfully',
            'filename': unique_filename,
            'url': f'/uploads/{unique_filename}'
        })
        
    except Exception as e:
        logger.error(f"Profile photo upload error: {e}")
        return jsonify({
            'success': False,
            'error': 'Profile photo upload failed',
            'code': 'SERVER_ERROR'
        }), 500

@app.route('/auth/update-profile', methods=['POST'])
@limiter.limit("10 per minute")
def update_profile():
    """Update user profile information"""
    try:
        if 'user_id' not in session:
            return jsonify({
                'success': False,
                'error': 'Authentication required',
                'code': 'AUTH_REQUIRED'
            }), 401
        
        data = request.get_json()
        
        # Validate required fields
        required_fields = ['full_name', 'phone', 'state', 'district', 'pincode', 'address']
        for field in required_fields:
            if not data.get(field):
                return jsonify({
                    'success': False,
                    'error': f'{field.replace("_", " ").title()} is required',
                    'code': 'MISSING_FIELD'
                }), 400
        
        # Validate phone number
        phone = re.sub(r'[^\d]', '', data['phone'])
        if len(phone) != 10 or not phone.startswith(('6', '7', '8', '9')):
            return jsonify({
                'success': False,
                'error': 'Phone must be 10-digit number starting with 6, 7, 8, or 9',
                'code': 'INVALID_PHONE'
            }), 400
        
        # Validate pincode
        if not re.match(r'^[0-9]{6}$', data['pincode']):
            return jsonify({
                'success': False,
                'error': 'Pincode must be 6 digits',
                'code': 'INVALID_PINCODE'
            }), 400
        
        db = next(get_db())
        user = db.query(User).filter(User.id == session['user_id']).first()
        
        if not user:
            return jsonify({
                'success': False,
                'error': 'User not found',
                'code': 'USER_NOT_FOUND'
            }), 404
        
        # Update user profile
        user.full_name = data['full_name'].strip()
        user.phone = phone
        user.state = data['state']
        user.district = data['district']
        user.pincode = data['pincode'].strip()
        user.address = data['address'].strip()
        user.bio = data.get('bio', '').strip()
        user.updated_at = datetime.utcnow()
        
        db.commit()
        
        # Update session
        session['user_name'] = user.full_name
        
        logger.info(f"Profile updated for user {user.id}")
        
        return jsonify({
            'success': True,
            'message': 'Profile updated successfully',
            'user': {
                'id': user.id,
                'full_name': user.full_name,
                'phone': user.phone,
                'state': user.state,
                'district': user.district,
                'pincode': user.pincode,
                'address': user.address,
                'bio': user.bio
            }
        })
        
    except Exception as e:
        if 'db' in locals():
            db.rollback()
        logger.error(f"Profile update error: {e}")
        return jsonify({
            'success': False,
            'error': 'Profile update failed',
            'code': 'SERVER_ERROR'
        }), 500
@app.route('/api/states')
def get_states():
    """Get states and districts data for frontend"""
    try:
        # Return the states data structure with all Indian states and districts
        states_data = {
            "Andhra Pradesh": {
                "districts": [
                    {"name": "Anantapur", "is_metro": False},
                    {"name": "Chittoor", "is_metro": False},
                    {"name": "East Godavari", "is_metro": False},
                    {"name": "Guntur", "is_metro": False},
                    {"name": "Krishna", "is_metro": False},
                    {"name": "Kurnool", "is_metro": False},
                    {"name": "Prakasam", "is_metro": False},
                    {"name": "Srikakulam", "is_metro": False},
                    {"name": "Visakhapatnam", "is_metro": True},
                    {"name": "Vizianagaram", "is_metro": False},
                    {"name": "West Godavari", "is_metro": False},
                    {"name": "YSR Kadapa", "is_metro": False}
                ]
            },
            "Arunachal Pradesh": {
                "districts": [
                    {"name": "Anjaw", "is_metro": False},
                    {"name": "Changlang", "is_metro": False},
                    {"name": "Dibang Valley", "is_metro": False},
                    {"name": "East Kameng", "is_metro": False},
                    {"name": "East Siang", "is_metro": False},
                    {"name": "Kamle", "is_metro": False},
                    {"name": "Kra Daadi", "is_metro": False},
                    {"name": "Kurung Kumey", "is_metro": False},
                    {"name": "Lepa Rada", "is_metro": False},
                    {"name": "Lohit", "is_metro": False},
                    {"name": "Longding", "is_metro": False},
                    {"name": "Lower Dibang Valley", "is_metro": False},
                    {"name": "Lower Siang", "is_metro": False},
                    {"name": "Lower Subansiri", "is_metro": False},
                    {"name": "Namsai", "is_metro": False},
                    {"name": "Pakke Kessang", "is_metro": False},
                    {"name": "Papum Pare", "is_metro": False},
                    {"name": "Shi Yomi", "is_metro": False},
                    {"name": "Siang", "is_metro": False},
                    {"name": "Tawang", "is_metro": False},
                    {"name": "Tirap", "is_metro": False},
                    {"name": "Upper Siang", "is_metro": False},
                    {"name": "Upper Subansiri", "is_metro": False},
                    {"name": "West Kameng", "is_metro": False},
                    {"name": "West Siang", "is_metro": False}
                ]
            },
            "Assam": {
                "districts": [
                    {"name": "Baksa", "is_metro": False},
                    {"name": "Barpeta", "is_metro": False},
                    {"name": "Biswanath", "is_metro": False},
                    {"name": "Bongaigaon", "is_metro": False},
                    {"name": "Cachar", "is_metro": False},
                    {"name": "Charaideo", "is_metro": False},
                    {"name": "Chirang", "is_metro": False},
                    {"name": "Darrang", "is_metro": False},
                    {"name": "Dhemaji", "is_metro": False},
                    {"name": "Dhubri", "is_metro": False},
                    {"name": "Dibrugarh", "is_metro": False},
                    {"name": "Dima Hasao", "is_metro": False},
                    {"name": "Goalpara", "is_metro": False},
                    {"name": "Golaghat", "is_metro": False},
                    {"name": "Hailakandi", "is_metro": False},
                    {"name": "Hojai", "is_metro": False},
                    {"name": "Jorhat", "is_metro": False},
                    {"name": "Kamrup", "is_metro": False},
                    {"name": "Kamrup Metropolitan", "is_metro": True},
                    {"name": "Karbi Anglong", "is_metro": False},
                    {"name": "Karimganj", "is_metro": False},
                    {"name": "Kokrajhar", "is_metro": False},
                    {"name": "Lakhimpur", "is_metro": False},
                    {"name": "Majuli", "is_metro": False},
                    {"name": "Morigaon", "is_metro": False},
                    {"name": "Nagaon", "is_metro": False},
                    {"name": "Nalbari", "is_metro": False},
                    {"name": "Sivasagar", "is_metro": False},
                    {"name": "Sonitpur", "is_metro": False},
                    {"name": "South Salmara-Mankachar", "is_metro": False},
                    {"name": "Tinsukia", "is_metro": False},
                    {"name": "Udalguri", "is_metro": False},
                    {"name": "West Karbi Anglong", "is_metro": False}
                ]
            },
            "Bihar": {
                "districts": [
                    {"name": "Araria", "is_metro": False},
                    {"name": "Arwal", "is_metro": False},
                    {"name": "Aurangabad", "is_metro": False},
                    {"name": "Banka", "is_metro": False},
                    {"name": "Begusarai", "is_metro": False},
                    {"name": "Bhagalpur", "is_metro": False},
                    {"name": "Bhojpur", "is_metro": False},
                    {"name": "Buxar", "is_metro": False},
                    {"name": "Darbhanga", "is_metro": False},
                    {"name": "East Champaran", "is_metro": False},
                    {"name": "Gaya", "is_metro": False},
                    {"name": "Gopalganj", "is_metro": False},
                    {"name": "Jamui", "is_metro": False},
                    {"name": "Jehanabad", "is_metro": False},
                    {"name": "Kaimur", "is_metro": False},
                    {"name": "Katihar", "is_metro": False},
                    {"name": "Khagaria", "is_metro": False},
                    {"name": "Kishanganj", "is_metro": False},
                    {"name": "Lakhisarai", "is_metro": False},
                    {"name": "Madhepura", "is_metro": False},
                    {"name": "Madhubani", "is_metro": False},
                    {"name": "Munger", "is_metro": False},
                    {"name": "Muzaffarpur", "is_metro": False},
                    {"name": "Nalanda", "is_metro": False},
                    {"name": "Nawada", "is_metro": False},
                    {"name": "Patna", "is_metro": True},
                    {"name": "Purnia", "is_metro": False},
                    {"name": "Rohtas", "is_metro": False},
                    {"name": "Saharsa", "is_metro": False},
                    {"name": "Samastipur", "is_metro": False},
                    {"name": "Saran", "is_metro": False},
                    {"name": "Sheikhpura", "is_metro": False},
                    {"name": "Sheohar", "is_metro": False},
                    {"name": "Sitamarhi", "is_metro": False},
                    {"name": "Siwan", "is_metro": False},
                    {"name": "Supaul", "is_metro": False},
                    {"name": "Vaishali", "is_metro": False},
                    {"name": "West Champaran", "is_metro": False}
                ]
            },
            "Chhattisgarh": {
                "districts": [
                    {"name": "Balod", "is_metro": False},
                    {"name": "Baloda Bazar", "is_metro": False},
                    {"name": "Balrampur", "is_metro": False},
                    {"name": "Bastar", "is_metro": False},
                    {"name": "Bemetara", "is_metro": False},
                    {"name": "Bijapur", "is_metro": False},
                    {"name": "Bilaspur", "is_metro": False},
                    {"name": "Dantewada", "is_metro": False},
                    {"name": "Dhamtari", "is_metro": False},
                    {"name": "Durg", "is_metro": False},
                    {"name": "Gariaband", "is_metro": False},
                    {"name": "Janjgir-Champa", "is_metro": False},
                    {"name": "Jashpur", "is_metro": False},
                    {"name": "Kabirdham", "is_metro": False},
                    {"name": "Kanker", "is_metro": False},
                    {"name": "Kondagaon", "is_metro": False},
                    {"name": "Korba", "is_metro": False},
                    {"name": "Koriya", "is_metro": False},
                    {"name": "Mahasamund", "is_metro": False},
                    {"name": "Mungeli", "is_metro": False},
                    {"name": "Narayanpur", "is_metro": False},
                    {"name": "Raigarh", "is_metro": False},
                    {"name": "Raipur", "is_metro": True},
                    {"name": "Rajnandgaon", "is_metro": False},
                    {"name": "Sukma", "is_metro": False},
                    {"name": "Surajpur", "is_metro": False},
                    {"name": "Surguja", "is_metro": False}
                ]
            },
            "Delhi": {
                "districts": [
                    {"name": "New Delhi", "is_metro": True},
                    {"name": "Central Delhi", "is_metro": True},
                    {"name": "North Delhi", "is_metro": True},
                    {"name": "South Delhi", "is_metro": True},
                    {"name": "East Delhi", "is_metro": True},
                    {"name": "West Delhi", "is_metro": True},
                    {"name": "North West Delhi", "is_metro": True},
                    {"name": "South West Delhi", "is_metro": True},
                    {"name": "Shahdara", "is_metro": True}
                ]
            },
            "Goa": {
                "districts": [
                    {"name": "North Goa", "is_metro": False},
                    {"name": "South Goa", "is_metro": False}
                ]
            },
            "Gujarat": {
                "districts": [
                    {"name": "Ahmedabad", "is_metro": True},
                    {"name": "Amreli", "is_metro": False},
                    {"name": "Anand", "is_metro": False},
                    {"name": "Aravalli", "is_metro": False},
                    {"name": "Banaskantha", "is_metro": False},
                    {"name": "Bharuch", "is_metro": False},
                    {"name": "Bhavnagar", "is_metro": False},
                    {"name": "Botad", "is_metro": False},
                    {"name": "Chhota Udaipur", "is_metro": False},
                    {"name": "Dahod", "is_metro": False},
                    {"name": "Dang", "is_metro": False},
                    {"name": "Devbhoomi Dwarka", "is_metro": False},
                    {"name": "Gandhinagar", "is_metro": False},
                    {"name": "Gir Somnath", "is_metro": False},
                    {"name": "Jamnagar", "is_metro": False},
                    {"name": "Junagadh", "is_metro": False},
                    {"name": "Kheda", "is_metro": False},
                    {"name": "Kutch", "is_metro": False},
                    {"name": "Mahisagar", "is_metro": False},
                    {"name": "Mehsana", "is_metro": False},
                    {"name": "Morbi", "is_metro": False},
                    {"name": "Narmada", "is_metro": False},
                    {"name": "Navsari", "is_metro": False},
                    {"name": "Panchmahal", "is_metro": False},
                    {"name": "Patan", "is_metro": False},
                    {"name": "Porbandar", "is_metro": False},
                    {"name": "Rajkot", "is_metro": False},
                    {"name": "Sabarkantha", "is_metro": False},
                    {"name": "Surat", "is_metro": True},
                    {"name": "Surendranagar", "is_metro": False},
                    {"name": "Tapi", "is_metro": False},
                    {"name": "Vadodara", "is_metro": False},
                    {"name": "Valsad", "is_metro": False}
                ]
            },
            "Madhya Pradesh": {
                "districts": [
                    {"name": "Agar Malwa", "is_metro": False},
                    {"name": "Alirajpur", "is_metro": False},
                    {"name": "Anuppur", "is_metro": False},
                    {"name": "Ashoknagar", "is_metro": False},
                    {"name": "Balaghat", "is_metro": False},
                    {"name": "Barwani", "is_metro": False},
                    {"name": "Betul", "is_metro": False},
                    {"name": "Bhind", "is_metro": False},
                    {"name": "Bhopal", "is_metro": True},
                    {"name": "Burhanpur", "is_metro": False},
                    {"name": "Chhatarpur", "is_metro": False},
                    {"name": "Chhindwara", "is_metro": False},
                    {"name": "Damoh", "is_metro": False},
                    {"name": "Datia", "is_metro": False},
                    {"name": "Dewas", "is_metro": False},
                    {"name": "Dhar", "is_metro": False},
                    {"name": "Dindori", "is_metro": False},
                    {"name": "Guna", "is_metro": False},
                    {"name": "Gwalior", "is_metro": False},
                    {"name": "Harda", "is_metro": False},
                    {"name": "Hoshangabad", "is_metro": False},
                    {"name": "Indore", "is_metro": True},
                    {"name": "Jabalpur", "is_metro": False},
                    {"name": "Jhabua", "is_metro": False},
                    {"name": "Katni", "is_metro": False},
                    {"name": "Khandwa", "is_metro": False},
                    {"name": "Khargone", "is_metro": False},
                    {"name": "Mandla", "is_metro": False},
                    {"name": "Mandsaur", "is_metro": False},
                    {"name": "Morena", "is_metro": False},
                    {"name": "Narsinghpur", "is_metro": False},
                    {"name": "Neemuch", "is_metro": False},
                    {"name": "Panna", "is_metro": False},
                    {"name": "Raisen", "is_metro": False},
                    {"name": "Rajgarh", "is_metro": False},
                    {"name": "Ratlam", "is_metro": False},
                    {"name": "Rewa", "is_metro": False},
                    {"name": "Sagar", "is_metro": False},
                    {"name": "Satna", "is_metro": False},
                    {"name": "Sehore", "is_metro": False},
                    {"name": "Seoni", "is_metro": False},
                    {"name": "Shahdol", "is_metro": False},
                    {"name": "Shajapur", "is_metro": False},
                    {"name": "Sheopur", "is_metro": False},
                    {"name": "Shivpuri", "is_metro": False},
                    {"name": "Sidhi", "is_metro": False},
                    {"name": "Singrauli", "is_metro": False},
                    {"name": "Tikamgarh", "is_metro": False},
                    {"name": "Ujjain", "is_metro": False},
                    {"name": "Umaria", "is_metro": False},
                    {"name": "Vidisha", "is_metro": False}
                ]
            },
            "Maharashtra": {
                "districts": [
                    {"name": "Ahmednagar", "is_metro": False},
                    {"name": "Akola", "is_metro": False},
                    {"name": "Amravati", "is_metro": False},
                    {"name": "Aurangabad", "is_metro": False},
                    {"name": "Beed", "is_metro": False},
                    {"name": "Bhandara", "is_metro": False},
                    {"name": "Buldhana", "is_metro": False},
                    {"name": "Chandrapur", "is_metro": False},
                    {"name": "Dhule", "is_metro": False},
                    {"name": "Gadchiroli", "is_metro": False},
                    {"name": "Gondia", "is_metro": False},
                    {"name": "Hingoli", "is_metro": False},
                    {"name": "Jalgaon", "is_metro": False},
                    {"name": "Jalna", "is_metro": False},
                    {"name": "Kolhapur", "is_metro": False},
                    {"name": "Latur", "is_metro": False},
                    {"name": "Mumbai City", "is_metro": True},
                    {"name": "Mumbai Suburban", "is_metro": True},
                    {"name": "Nagpur", "is_metro": False},
                    {"name": "Nanded", "is_metro": False},
                    {"name": "Nashik", "is_metro": False},
                    {"name": "Osmanabad", "is_metro": False},
                    {"name": "Palghar", "is_metro": False},
                    {"name": "Parbhani", "is_metro": False},
                    {"name": "Pune", "is_metro": False},
                    {"name": "Raigad", "is_metro": False},
                    {"name": "Ratnagiri", "is_metro": False},
                    {"name": "Sangli", "is_metro": False},
                    {"name": "Satara", "is_metro": False},
                    {"name": "Sindhudurg", "is_metro": False},
                    {"name": "Solapur", "is_metro": False},
                    {"name": "Thane", "is_metro": False},
                    {"name": "Wardha", "is_metro": False},
                    {"name": "Washim", "is_metro": False},
                    {"name": "Yavatmal", "is_metro": False}
                ]
            },
            "Jharkhand": {
                "districts": [
                    {"name": "Bokaro", "is_metro": False},
                    {"name": "Chatra", "is_metro": False},
                    {"name": "Deoghar", "is_metro": False},
                    {"name": "Dhanbad", "is_metro": False},
                    {"name": "Dumka", "is_metro": False},
                    {"name": "East Singhbhum", "is_metro": False},
                    {"name": "Garhwa", "is_metro": False},
                    {"name": "Giridih", "is_metro": False},
                    {"name": "Godda", "is_metro": False},
                    {"name": "Gumla", "is_metro": False},
                    {"name": "Hazaribagh", "is_metro": False},
                    {"name": "Jamtara", "is_metro": False},
                    {"name": "Khunti", "is_metro": False},
                    {"name": "Koderma", "is_metro": False},
                    {"name": "Latehar", "is_metro": False},
                    {"name": "Lohardaga", "is_metro": False},
                    {"name": "Pakur", "is_metro": False},
                    {"name": "Palamu", "is_metro": False},
                    {"name": "Ramgarh", "is_metro": False},
                    {"name": "Ranchi", "is_metro": True},
                    {"name": "Sahebganj", "is_metro": False},
                    {"name": "Seraikela Kharsawan", "is_metro": False},
                    {"name": "Simdega", "is_metro": False},
                    {"name": "West Singhbhum", "is_metro": False}
                ]
            },
            "Karnataka": {
                "districts": [
                    {"name": "Bagalkot", "is_metro": False},
                    {"name": "Ballari", "is_metro": False},
                    {"name": "Belagavi", "is_metro": False},
                    {"name": "Bengaluru Rural", "is_metro": False},
                    {"name": "Bengaluru Urban", "is_metro": True},
                    {"name": "Bidar", "is_metro": False},
                    {"name": "Chamarajanagar", "is_metro": False},
                    {"name": "Chikballapur", "is_metro": False},
                    {"name": "Chikkamagaluru", "is_metro": False},
                    {"name": "Chitradurga", "is_metro": False},
                    {"name": "Dakshina Kannada", "is_metro": False},
                    {"name": "Davangere", "is_metro": False},
                    {"name": "Dharwad", "is_metro": False},
                    {"name": "Gadag", "is_metro": False},
                    {"name": "Hassan", "is_metro": False},
                    {"name": "Haveri", "is_metro": False},
                    {"name": "Kalaburagi", "is_metro": False},
                    {"name": "Kodagu", "is_metro": False},
                    {"name": "Kolar", "is_metro": False},
                    {"name": "Koppal", "is_metro": False},
                    {"name": "Mandya", "is_metro": False},
                    {"name": "Mysuru", "is_metro": False},
                    {"name": "Raichur", "is_metro": False},
                    {"name": "Ramanagara", "is_metro": False},
                    {"name": "Shivamogga", "is_metro": False},
                    {"name": "Tumakuru", "is_metro": False},
                    {"name": "Udupi", "is_metro": False},
                    {"name": "Uttara Kannada", "is_metro": False},
                    {"name": "Vijayapura", "is_metro": False},
                    {"name": "Yadgir", "is_metro": False}
                ]
            },
            "Kerala": {
                "districts": [
                    {"name": "Alappuzha", "is_metro": False},
                    {"name": "Ernakulam", "is_metro": False},
                    {"name": "Idukki", "is_metro": False},
                    {"name": "Kannur", "is_metro": False},
                    {"name": "Kasaragod", "is_metro": False},
                    {"name": "Kollam", "is_metro": False},
                    {"name": "Kottayam", "is_metro": False},
                    {"name": "Kozhikode", "is_metro": False},
                    {"name": "Malappuram", "is_metro": False},
                    {"name": "Palakkad", "is_metro": False},
                    {"name": "Pathanamthitta", "is_metro": False},
                    {"name": "Thiruvananthapuram", "is_metro": True},
                    {"name": "Thrissur", "is_metro": False},
                    {"name": "Wayanad", "is_metro": False}
                ]
            },
            "Manipur": {
                "districts": [
                    {"name": "Bishnupur", "is_metro": False},
                    {"name": "Chandel", "is_metro": False},
                    {"name": "Churachandpur", "is_metro": False},
                    {"name": "Imphal East", "is_metro": False},
                    {"name": "Imphal West", "is_metro": False},
                    {"name": "Jiribam", "is_metro": False},
                    {"name": "Kakching", "is_metro": False},
                    {"name": "Kamjong", "is_metro": False},
                    {"name": "Kangpokpi", "is_metro": False},
                    {"name": "Noney", "is_metro": False},
                    {"name": "Pherzawl", "is_metro": False},
                    {"name": "Senapati", "is_metro": False},
                    {"name": "Tamenglong", "is_metro": False},
                    {"name": "Tengnoupal", "is_metro": False},
                    {"name": "Thoubal", "is_metro": False},
                    {"name": "Ukhrul", "is_metro": False}
                ]
            },
            "Meghalaya": {
                "districts": [
                    {"name": "East Garo Hills", "is_metro": False},
                    {"name": "East Jaintia Hills", "is_metro": False},
                    {"name": "East Khasi Hills", "is_metro": False},
                    {"name": "North Garo Hills", "is_metro": False},
                    {"name": "Ri Bhoi", "is_metro": False},
                    {"name": "South Garo Hills", "is_metro": False},
                    {"name": "South West Garo Hills", "is_metro": False},
                    {"name": "South West Khasi Hills", "is_metro": False},
                    {"name": "West Garo Hills", "is_metro": False},
                    {"name": "West Jaintia Hills", "is_metro": False},
                    {"name": "West Khasi Hills", "is_metro": False}
                ]
            },
            "Mizoram": {
                "districts": [
                    {"name": "Aizawl", "is_metro": False},
                    {"name": "Champhai", "is_metro": False},
                    {"name": "Hnahthial", "is_metro": False},
                    {"name": "Khawzawl", "is_metro": False},
                    {"name": "Kolasib", "is_metro": False},
                    {"name": "Lawngtlai", "is_metro": False},
                    {"name": "Lunglei", "is_metro": False},
                    {"name": "Mamit", "is_metro": False},
                    {"name": "Saiha", "is_metro": False},
                    {"name": "Saitual", "is_metro": False},
                    {"name": "Serchhip", "is_metro": False}
                ]
            },
            "Nagaland": {
                "districts": [
                    {"name": "Dimapur", "is_metro": False},
                    {"name": "Kiphire", "is_metro": False},
                    {"name": "Kohima", "is_metro": False},
                    {"name": "Longleng", "is_metro": False},
                    {"name": "Mokokchung", "is_metro": False},
                    {"name": "Mon", "is_metro": False},
                    {"name": "Peren", "is_metro": False},
                    {"name": "Phek", "is_metro": False},
                    {"name": "Tuensang", "is_metro": False},
                    {"name": "Wokha", "is_metro": False},
                    {"name": "Zunheboto", "is_metro": False}
                ]
            },
            "Tamil Nadu": {
                "districts": [
                    {"name": "Ariyalur", "is_metro": False},
                    {"name": "Chennai", "is_metro": True},
                    {"name": "Coimbatore", "is_metro": False},
                    {"name": "Cuddalore", "is_metro": False},
                    {"name": "Dharmapuri", "is_metro": False},
                    {"name": "Dindigul", "is_metro": False},
                    {"name": "Erode", "is_metro": False},
                    {"name": "Kanchipuram", "is_metro": False},
                    {"name": "Kanyakumari", "is_metro": False},
                    {"name": "Karur", "is_metro": False},
                    {"name": "Krishnagiri", "is_metro": False},
                    {"name": "Madurai", "is_metro": False},
                    {"name": "Mayiladuthurai", "is_metro": False},
                    {"name": "Nagapattinam", "is_metro": False},
                    {"name": "Namakkal", "is_metro": False},
                    {"name": "Nilgiris", "is_metro": False},
                    {"name": "Perambalur", "is_metro": False},
                    {"name": "Pudukkottai", "is_metro": False},
                    {"name": "Ramanathapuram", "is_metro": False},
                    {"name": "Ranipet", "is_metro": False},
                    {"name": "Salem", "is_metro": False},
                    {"name": "Sivaganga", "is_metro": False},
                    {"name": "Tenkasi", "is_metro": False},
                    {"name": "Thanjavur", "is_metro": False},
                    {"name": "Theni", "is_metro": False},
                    {"name": "Thoothukkudi", "is_metro": False},
                    {"name": "Tiruchirappalli", "is_metro": False},
                    {"name": "Tirunelveli", "is_metro": False},
                    {"name": "Tirupathur", "is_metro": False},
                    {"name": "Tiruppur", "is_metro": False},
                    {"name": "Tiruvallur", "is_metro": False},
                    {"name": "Tiruvannamalai", "is_metro": False},
                    {"name": "Vellore", "is_metro": False},
                    {"name": "Viluppuram", "is_metro": False},
                    {"name": "Virudhunagar", "is_metro": False}
                ]
            },
            "Gujarat": {
                "districts": [
                    {"name": "Ahmedabad", "is_metro": True},
                    {"name": "Surat", "is_metro": True},
                    {"name": "Vadodara", "is_metro": False},
                    {"name": "Rajkot", "is_metro": False},
                    {"name": "Bhavnagar", "is_metro": False},
                    {"name": "Jamnagar", "is_metro": False},
                    {"name": "Anand", "is_metro": False},
                    {"name": "Bharuch", "is_metro": False},
                    {"name": "Gandhinagar", "is_metro": False},
                    {"name": "Kheda", "is_metro": False}
                ]
            },
            "West Bengal": {
                "districts": [
                    {"name": "Kolkata", "is_metro": True},
                    {"name": "Howrah", "is_metro": True},
                    {"name": "North 24 Parganas", "is_metro": True},
                    {"name": "South 24 Parganas", "is_metro": True},
                    {"name": "Burdwan", "is_metro": False},
                    {"name": "Murshidabad", "is_metro": False},
                    {"name": "Nadia", "is_metro": False},
                    {"name": "Hooghly", "is_metro": False},
                    {"name": "Birbhum", "is_metro": False},
                    {"name": "Malda", "is_metro": False}
                ]
            },
            "Uttar Pradesh": {
                "districts": [
                    {"name": "Lucknow", "is_metro": True},
                    {"name": "Kanpur", "is_metro": False},
                    {"name": "Agra", "is_metro": False},
                    {"name": "Varanasi", "is_metro": False},
                    {"name": "Allahabad", "is_metro": False},
                    {"name": "Ghaziabad", "is_metro": False},
                    {"name": "Noida", "is_metro": False},
                    {"name": "Meerut", "is_metro": False},
                    {"name": "Bareilly", "is_metro": False},
                    {"name": "Aligarh", "is_metro": False}
                ]
            },
            "Rajasthan": {
                "districts": [
                    {"name": "Jaipur", "is_metro": True},
                    {"name": "Jodhpur", "is_metro": False},
                    {"name": "Kota", "is_metro": False},
                    {"name": "Bikaner", "is_metro": False},
                    {"name": "Ajmer", "is_metro": False},
                    {"name": "Udaipur", "is_metro": False},
                    {"name": "Sikar", "is_metro": False},
                    {"name": "Sri Ganganagar", "is_metro": False},
                    {"name": "Alwar", "is_metro": False},
                    {"name": "Bhilwara", "is_metro": False}
                ]
            },
            "Himachal Pradesh": {
                "districts": [
                    {"name": "Shimla", "is_metro": False},
                    {"name": "Kangra", "is_metro": False},
                    {"name": "Mandi", "is_metro": False},
                    {"name": "Solan", "is_metro": False},
                    {"name": "Una", "is_metro": False},
                    {"name": "Chamba", "is_metro": False},
                    {"name": "Kullu", "is_metro": False},
                    {"name": "Hamirpur", "is_metro": False},
                    {"name": "Bilaspur", "is_metro": False},
                    {"name": "Sirmaur", "is_metro": False}
                ]
            },
            "Odisha": {
                "districts": [
                    {"name": "Angul", "is_metro": False},
                    {"name": "Balangir", "is_metro": False},
                    {"name": "Balasore", "is_metro": False},
                    {"name": "Bargarh", "is_metro": False},
                    {"name": "Bhadrak", "is_metro": False},
                    {"name": "Bhubaneswar", "is_metro": True},
                    {"name": "Bhubaneswar Municipal Corporation", "is_metro": True},
                    {"name": "Boudh", "is_metro": False},
                    {"name": "Cuttack", "is_metro": False},
                    {"name": "Deogarh", "is_metro": False},
                    {"name": "Dhenkanal", "is_metro": False},
                    {"name": "Gajapati", "is_metro": False},
                    {"name": "Ganjam", "is_metro": False},
                    {"name": "Jagatsinghpur", "is_metro": False},
                    {"name": "Jajpur", "is_metro": False},
                    {"name": "Jharsuguda", "is_metro": False},
                    {"name": "Kalahandi", "is_metro": False},
                    {"name": "Kandhamal", "is_metro": False},
                    {"name": "Kendrapara", "is_metro": False},
                    {"name": "Kendujhar", "is_metro": False},
                    {"name": "Khordha", "is_metro": False},
                    {"name": "Koraput", "is_metro": False},
                    {"name": "Malkangiri", "is_metro": False},
                    {"name": "Mayurbhanj", "is_metro": False},
                    {"name": "Nabarangpur", "is_metro": False},
                    {"name": "Nayagarh", "is_metro": False},
                    {"name": "Nuapada", "is_metro": False},
                    {"name": "Puri", "is_metro": False},
                    {"name": "Rayagada", "is_metro": False},
                    {"name": "Sambalpur", "is_metro": False},
                    {"name": "Subarnapur", "is_metro": False},
                    {"name": "Sundargarh", "is_metro": False}
                ]
            },
            "Punjab": {
                "districts": [
                    {"name": "Amritsar", "is_metro": False},
                    {"name": "Barnala", "is_metro": False},
                    {"name": "Bathinda", "is_metro": False},
                    {"name": "Faridkot", "is_metro": False},
                    {"name": "Fatehgarh Sahib", "is_metro": False},
                    {"name": "Firozpur", "is_metro": False},
                    {"name": "Gurdaspur", "is_metro": False},
                    {"name": "Hoshiarpur", "is_metro": False},
                    {"name": "Jalandhar", "is_metro": False},
                    {"name": "Kapurthala", "is_metro": False},
                    {"name": "Ludhiana", "is_metro": False},
                    {"name": "Mansa", "is_metro": False},
                    {"name": "Moga", "is_metro": False},
                    {"name": "Muktsar", "is_metro": False},
                    {"name": "Pathankot", "is_metro": False},
                    {"name": "Patiala", "is_metro": False},
                    {"name": "Rupnagar", "is_metro": False},
                    {"name": "Sahibzada Ajit Singh Nagar", "is_metro": False},
                    {"name": "Sangrur", "is_metro": False},
                    {"name": "Shahid Bhagat Singh Nagar", "is_metro": False},
                    {"name": "Tarn Taran", "is_metro": False}
                ]
            },
            "Haryana": {
                "districts": [
                    {"name": "Ambala", "is_metro": False},
                    {"name": "Bhiwani", "is_metro": False},
                    {"name": "Charkhi Dadri", "is_metro": False},
                    {"name": "Faridabad", "is_metro": True},
                    {"name": "Fatehabad", "is_metro": False},
                    {"name": "Gurugram", "is_metro": True},
                    {"name": "Hisar", "is_metro": False},
                    {"name": "Jhajjar", "is_metro": False},
                    {"name": "Jind", "is_metro": False},
                    {"name": "Kaithal", "is_metro": False},
                    {"name": "Karnal", "is_metro": False},
                    {"name": "Kurukshetra", "is_metro": False},
                    {"name": "Mahendragarh", "is_metro": False},
                    {"name": "Nuh", "is_metro": False},
                    {"name": "Palwal", "is_metro": False},
                    {"name": "Panchkula", "is_metro": False},
                    {"name": "Panipat", "is_metro": False},
                    {"name": "Rewari", "is_metro": False},
                    {"name": "Rohtak", "is_metro": False},
                    {"name": "Sirsa", "is_metro": False},
                    {"name": "Sonipat", "is_metro": False},
                    {"name": "Yamunanagar", "is_metro": False}
                ]
            },
            "Himachal Pradesh": {
                "districts": [
                    {"name": "Bilaspur", "is_metro": False},
                    {"name": "Chamba", "is_metro": False},
                    {"name": "Hamirpur", "is_metro": False},
                    {"name": "Kangra", "is_metro": False},
                    {"name": "Kinnaur", "is_metro": False},
                    {"name": "Kullu", "is_metro": False},
                    {"name": "Lahaul and Spiti", "is_metro": False},
                    {"name": "Mandi", "is_metro": False},
                    {"name": "Shimla", "is_metro": False},
                    {"name": "Sirmaur", "is_metro": False},
                    {"name": "Solan", "is_metro": False},
                    {"name": "Una", "is_metro": False}
                ]
            },
            "Rajasthan": {
                "districts": [
                    {"name": "Ajmer", "is_metro": False},
                    {"name": "Alwar", "is_metro": False},
                    {"name": "Banswara", "is_metro": False},
                    {"name": "Baran", "is_metro": False},
                    {"name": "Barmer", "is_metro": False},
                    {"name": "Bharatpur", "is_metro": False},
                    {"name": "Bhilwara", "is_metro": False},
                    {"name": "Bikaner", "is_metro": False},
                    {"name": "Bundi", "is_metro": False},
                    {"name": "Chittorgarh", "is_metro": False},
                    {"name": "Churu", "is_metro": False},
                    {"name": "Dausa", "is_metro": False},
                    {"name": "Dholpur", "is_metro": False},
                    {"name": "Dungarpur", "is_metro": False},
                    {"name": "Hanumangarh", "is_metro": False},
                    {"name": "Jaipur", "is_metro": True},
                    {"name": "Jaisalmer", "is_metro": False},
                    {"name": "Jalore", "is_metro": False},
                    {"name": "Jhalawar", "is_metro": False},
                    {"name": "Jhunjhunu", "is_metro": False},
                    {"name": "Jodhpur", "is_metro": False},
                    {"name": "Karauli", "is_metro": False},
                    {"name": "Kota", "is_metro": False},
                    {"name": "Nagaur", "is_metro": False},
                    {"name": "Pali", "is_metro": False},
                    {"name": "Pratapgarh", "is_metro": False},
                    {"name": "Rajsamand", "is_metro": False},
                    {"name": "Sawai Madhopur", "is_metro": False},
                    {"name": "Sikar", "is_metro": False},
                    {"name": "Sirohi", "is_metro": False},
                    {"name": "Sri Ganganagar", "is_metro": False},
                    {"name": "Tonk", "is_metro": False},
                    {"name": "Udaipur", "is_metro": False}
                ]
            },
            "Sikkim": {
                "districts": [
                    {"name": "East Sikkim", "is_metro": False},
                    {"name": "North Sikkim", "is_metro": False},
                    {"name": "South Sikkim", "is_metro": False},
                    {"name": "West Sikkim", "is_metro": False}
                ]
            },
            "Telangana": {
                "districts": [
                    {"name": "Adilabad", "is_metro": False},
                    {"name": "Bhadradri Kothagudem", "is_metro": False},
                    {"name": "Hyderabad", "is_metro": True},
                    {"name": "Jagtial", "is_metro": False},
                    {"name": "Jangaon", "is_metro": False},
                    {"name": "Jayashankar Bhupalpally", "is_metro": False},
                    {"name": "Jogulamba Gadwal", "is_metro": False},
                    {"name": "Kamareddy", "is_metro": False},
                    {"name": "Karimnagar", "is_metro": False},
                    {"name": "Khammam", "is_metro": False},
                    {"name": "Kumuram Bheem Asifabad", "is_metro": False},
                    {"name": "Mahabubabad", "is_metro": False},
                    {"name": "Mahabubnagar", "is_metro": False},
                    {"name": "Mancherial", "is_metro": False},
                    {"name": "Medak", "is_metro": False},
                    {"name": "Medchal–Malkajgiri", "is_metro": False},
                    {"name": "Mulugu", "is_metro": False},
                    {"name": "Nagarkurnool", "is_metro": False},
                    {"name": "Nalgonda", "is_metro": False},
                    {"name": "Narayanpet", "is_metro": False},
                    {"name": "Nirmal", "is_metro": False},
                    {"name": "Nizamabad", "is_metro": False},
                    {"name": "Peddapalli", "is_metro": False},
                    {"name": "Rajanna Sircilla", "is_metro": False},
                    {"name": "Rangareddy", "is_metro": False},
                    {"name": "Sangareddy", "is_metro": False},
                    {"name": "Siddipet", "is_metro": False},
                    {"name": "Suryapet", "is_metro": False},
                    {"name": "Vikarabad", "is_metro": False},
                    {"name": "Wanaparthy", "is_metro": False},
                    {"name": "Warangal Rural", "is_metro": False},
                    {"name": "Warangal Urban", "is_metro": False},
                    {"name": "Yadadri Bhuvanagiri", "is_metro": False}
                ]
            },
            "Tripura": {
                "districts": [
                    {"name": "Dhalai", "is_metro": False},
                    {"name": "Gomati", "is_metro": False},
                    {"name": "Khowai", "is_metro": False},
                    {"name": "North Tripura", "is_metro": False},
                    {"name": "Sepahijala", "is_metro": False},
                    {"name": "South Tripura", "is_metro": False},
                    {"name": "Unakoti", "is_metro": False},
                    {"name": "West Tripura", "is_metro": False}
                ]
            },
            "Uttar Pradesh": {
                "districts": [
                    {"name": "Agra", "is_metro": False},
                    {"name": "Aligarh", "is_metro": False},
                    {"name": "Ambedkar Nagar", "is_metro": False},
                    {"name": "Amethi", "is_metro": False},
                    {"name": "Amroha", "is_metro": False},
                    {"name": "Auraiya", "is_metro": False},
                    {"name": "Azamgarh", "is_metro": False},
                    {"name": "Baghpat", "is_metro": False},
                    {"name": "Bahraich", "is_metro": False},
                    {"name": "Ballia", "is_metro": False},
                    {"name": "Balrampur", "is_metro": False},
                    {"name": "Banda", "is_metro": False},
                    {"name": "Barabanki", "is_metro": False},
                    {"name": "Bareilly", "is_metro": False},
                    {"name": "Basti", "is_metro": False},
                    {"name": "Bhadohi", "is_metro": False},
                    {"name": "Bijnor", "is_metro": False},
                    {"name": "Budaun", "is_metro": False},
                    {"name": "Bulandshahr", "is_metro": False},
                    {"name": "Chandauli", "is_metro": False},
                    {"name": "Chitrakoot", "is_metro": False},
                    {"name": "Deoria", "is_metro": False},
                    {"name": "Etah", "is_metro": False},
                    {"name": "Etawah", "is_metro": False},
                    {"name": "Ayodhya", "is_metro": False},
                    {"name": "Farrukhabad", "is_metro": False},
                    {"name": "Fatehpur", "is_metro": False},
                    {"name": "Firozabad", "is_metro": False},
                    {"name": "Gautam Buddha Nagar", "is_metro": False},
                    {"name": "Ghaziabad", "is_metro": False},
                    {"name": "Ghazipur", "is_metro": False},
                    {"name": "Gonda", "is_metro": False},
                    {"name": "Gorakhpur", "is_metro": False},
                    {"name": "Hamirpur", "is_metro": False},
                    {"name": "Hapur", "is_metro": False},
                    {"name": "Hardoi", "is_metro": False},
                    {"name": "Hathras", "is_metro": False},
                    {"name": "Jalaun", "is_metro": False},
                    {"name": "Jaunpur", "is_metro": False},
                    {"name": "Jhansi", "is_metro": False},
                    {"name": "Kannauj", "is_metro": False},
                    {"name": "Kanpur Dehat", "is_metro": False},
                    {"name": "Kanpur Nagar", "is_metro": False},
                    {"name": "Kasganj", "is_metro": False},
                    {"name": "Kaushambi", "is_metro": False},
                    {"name": "Kushinagar", "is_metro": False},
                    {"name": "Lakhimpur Kheri", "is_metro": False},
                    {"name": "Lalitpur", "is_metro": False},
                    {"name": "Lucknow", "is_metro": True},
                    {"name": "Maharajganj", "is_metro": False},
                    {"name": "Mahoba", "is_metro": False},
                    {"name": "Mainpuri", "is_metro": False},
                    {"name": "Mathura", "is_metro": False},
                    {"name": "Mau", "is_metro": False},
                    {"name": "Meerut", "is_metro": False},
                    {"name": "Mirzapur", "is_metro": False},
                    {"name": "Moradabad", "is_metro": False},
                    {"name": "Muzaffarnagar", "is_metro": False},
                    {"name": "Pilibhit", "is_metro": False},
                    {"name": "Pratapgarh", "is_metro": False},
                    {"name": "Prayagraj", "is_metro": False},
                    {"name": "Raebareli", "is_metro": False},
                    {"name": "Rampur", "is_metro": False},
                    {"name": "Saharanpur", "is_metro": False},
                    {"name": "Sambhal", "is_metro": False},
                    {"name": "Sant Kabir Nagar", "is_metro": False},
                    {"name": "Shahjahanpur", "is_metro": False},
                    {"name": "Shamli", "is_metro": False},
                    {"name": "Shravasti", "is_metro": False},
                    {"name": "Siddharthnagar", "is_metro": False},
                    {"name": "Sitapur", "is_metro": False},
                    {"name": "Sonbhadra", "is_metro": False},
                    {"name": "Sultanpur", "is_metro": False},
                    {"name": "Unnao", "is_metro": False},
                    {"name": "Varanasi", "is_metro": False}
                ]
            },
            "Uttarakhand": {
                "districts": [
                    {"name": "Almora", "is_metro": False},
                    {"name": "Bageshwar", "is_metro": False},
                    {"name": "Chamoli", "is_metro": False},
                    {"name": "Champawat", "is_metro": False},
                    {"name": "Dehradun", "is_metro": False},
                    {"name": "Haridwar", "is_metro": False},
                    {"name": "Nainital", "is_metro": False},
                    {"name": "Pauri Garhwal", "is_metro": False},
                    {"name": "Pithoragarh", "is_metro": False},
                    {"name": "Rudraprayag", "is_metro": False},
                    {"name": "Tehri Garhwal", "is_metro": False},
                    {"name": "Udham Singh Nagar", "is_metro": False},
                    {"name": "Uttarkashi", "is_metro": False}
                ]
            },
            "West Bengal": {
                "districts": [
                    {"name": "Alipurduar", "is_metro": False},
                    {"name": "Bankura", "is_metro": False},
                    {"name": "Birbhum", "is_metro": False},
                    {"name": "Cooch Behar", "is_metro": False},
                    {"name": "Dakshin Dinajpur", "is_metro": False},
                    {"name": "Darjeeling", "is_metro": False},
                    {"name": "Hooghly", "is_metro": False},
                    {"name": "Howrah", "is_metro": False},
                    {"name": "Jalpaiguri", "is_metro": False},
                    {"name": "Jhargram", "is_metro": False},
                    {"name": "Kalimpong", "is_metro": False},
                    {"name": "Kolkata", "is_metro": True},
                    {"name": "Malda", "is_metro": False},
                    {"name": "Murshidabad", "is_metro": False},
                    {"name": "Nadia", "is_metro": False},
                    {"name": "North 24 Parganas", "is_metro": False},
                    {"name": "Paschim Bardhaman", "is_metro": False},
                    {"name": "Paschim Medinipur", "is_metro": False},
                    {"name": "Purba Bardhaman", "is_metro": False},
                    {"name": "Purba Medinipur", "is_metro": False},
                    {"name": "Purulia", "is_metro": False},
                    {"name": "South 24 Parganas", "is_metro": False},
                    {"name": "Uttar Dinajpur", "is_metro": False}
                ]
            }
        }
        
        return jsonify(states_data)
        
    except Exception as e:
        logger.error(f"States API error: {e}")
        return jsonify({
            'success': False,
            'error': 'Failed to load states data'
        }), 500

@app.route('/listings', methods=['POST'])
@requires_auth
@limiter.limit("20 per hour")
def create_listing():
    """Create new listing with advanced validation"""
    try:
        data = request.get_json()
        user_id = session['user_id']
        
        # Validate required fields
        required_fields = ['title', 'description', 'category_name', 'asking_price']
        for field in required_fields:
            if not data.get(field):
                return jsonify({
                    'success': False,
                    'error': f'{field.replace("_", " ").title()} is required',
                    'code': 'MISSING_FIELD'
                }), 400
        
        # Advanced content validation
        content = f"{data['title']} {data['description']}"
        threats = validation_helper.advanced_threat_detection(content, context="listing")
        
        if threats['action_required'] == 'block':
            return jsonify({
                'success': False,
                'error': 'Listing blocked due to security concerns',
                'details': threats['recommendations'],
                'code': 'SECURITY_BLOCK'
            }), 400
        
        # Validate price
        try:
            asking_price = float(data['asking_price'])
            if asking_price <= 0 or asking_price > 100000000:  # 10 crore max
                return jsonify({
                    'success': False,
                    'error': 'Price must be between ₹1 and ₹10,00,00,000',
                    'code': 'INVALID_PRICE'
                }), 400
        except (ValueError, TypeError):
            return jsonify({
                'success': False,
                'error': 'Invalid price format',
                'code': 'INVALID_PRICE_FORMAT'
            }), 400
        
        db = next(get_db())
        
        # Get user and validate
        user = db.query(User).filter(User.id == user_id).first()
        if not user or not user.is_active:
            return jsonify({
                'success': False,
                'error': 'Invalid user account',
                'code': 'INVALID_USER'
            }), 401
        
        # Get category and validate
        category = db.query(Category).filter(
            Category.name == data['category_name'],
            Category.is_active == True
        ).first()
        
        if not category:
            available_categories = db.query(Category).filter(
                Category.parent_id == None,
                Category.is_active == True
            ).all()
            category_names = [cat.name for cat in available_categories]
            
            return jsonify({
                'success': False,
                'error': f'Invalid category. Available: {", ".join(category_names)}',
                'code': 'INVALID_CATEGORY'
            }), 400
        
        # Check user listing limits (prevent spam)
        today = datetime.utcnow().date()
        today_listings = db.query(Listing).filter(
            Listing.owner_id == user_id,
            func.date(Listing.created_at) == today
        ).count()
        
        max_daily_listings = 50 if user.is_premium else 10
        if today_listings >= max_daily_listings:
            return jsonify({
                'success': False,
                'error': f'Daily listing limit reached ({max_daily_listings}). Try again tomorrow.',
                'code': 'DAILY_LIMIT_EXCEEDED'
            }), 429
        
        # Create listing with enhanced features
        listing = Listing(
            title=data['title'].strip(),
            description=data['description'].strip(),
            category_id=category.id,
            owner_id=user_id,
            brand=data.get('brand', '').strip()[:100] if data.get('brand') else None,
            model=data.get('model', '').strip()[:100] if data.get('model') else None,
            condition_type=data.get('condition_type', 'good'),
            asking_price=asking_price,
            original_price=float(data['original_price']) if data.get('original_price') else None,
            price_negotiable=data.get('price_negotiable', True),
            state=user.state,
            district=user.district,
            pincode=user.pincode,
            currency='INR',
            specifications=data.get('specifications', {}),
            features=data.get('features', []),
            tags=data.get('tags', []),
            is_active=True,
            moderation_status='pending',  # Will be reviewed
            created_at=datetime.utcnow()
        )
        
        # Generate quality score based on content
        quality_factors = [
            min(20, len(listing.description) / 10),  # Description length
            10 if listing.brand else 0,  # Brand specified
            10 if listing.model else 0,  # Model specified
            10 if listing.original_price else 0,  # Original price given
            15 if len(data.get('features', [])) > 0 else 0,  # Features listed
            10 if listing.condition_type in ['new', 'like_new', 'excellent'] else 5,  # Good condition
            threats['risk_score'] * -0.2  # Deduct for security issues
        ]
        
        listing.quality_score = max(0, min(100, sum(quality_factors)))
        
        db.add(listing)
        db.commit()
        db.refresh(listing)
        
        # Update user stats
        user.total_sales += 1
        user.interaction_score += 2.0
        db.commit()
        
        # Update category stats
        category.total_listings += 1
        db.commit()
        
        # Clear relevant caches
        cache_manager.delete(f"user:{user_id}")
        cache_manager.delete("response:/api/categories")
        
        logger.info(f"New listing created: {listing.id} by user {user_id}")
        
        return jsonify({
            'success': True,
            'message': 'Listing created successfully! 🚀',
            'listing': {
                'id': listing.id,
                'uuid': listing.uuid,
                'title': listing.title,
                'asking_price': listing.asking_price,
                'quality_score': listing.quality_score,
                'moderation_status': listing.moderation_status,
                'expires_at': listing.expires_at.isoformat()
            },
            'next_steps': [
                'Your listing is under review',
                'Add photos to increase visibility',
                'Share with friends to get more views'
            ]
        })
        
    except Exception as e:
        if 'db' in locals():
            db.rollback()
        logger.error(f"Create listing error: {e}")
        return jsonify({
            'success': False,
            'error': 'Failed to create listing',
            'code': 'SERVER_ERROR'
        }), 500
@app.route('/search', methods=['POST'])
@limiter.limit("100 per minute")
def search_listings():
    """Advanced search with AI features"""
    try:
        data = request.get_json()
        data = request.get_json()
        query = data.get('query', '').strip()
        category = data.get('category', '')
        state = data.get('state', '')
        district = data.get('district', '')
        min_price = data.get('min_price')
        max_price = data.get('max_price')
        condition = data.get('condition', '')
        sort_by = data.get('sort_by', 'relevance')
        page = max(1, int(data.get('page', 1)))
        limit = min(50, max(1, int(data.get('limit', 20))))
        
        db = next(get_db())
        
        # Build base query
        search_query = db.query(Listing).filter(
            Listing.is_active == True,
            Listing.is_sold == False,
            Listing.moderation_status == 'approved'
        )
        
        # Text search with relevance scoring
        if query:
            search_terms = query.lower().split()
            for term in search_terms:
                search_query = search_query.filter(
                    or_(
                        Listing.title.ilike(f'%{term}%'),
                        Listing.description.ilike(f'%{term}%'),
                        Listing.brand.ilike(f'%{term}%'),
                        Listing.model.ilike(f'%{term}%')
                    )
                )
        
        # Category filter
        if category:
            category_obj = db.query(Category).filter(Category.name == category).first()
            if category_obj:
                # Include subcategories
                category_ids = [category_obj.id]
                subcategories = db.query(Category).filter(Category.parent_id == category_obj.id).all()
                category_ids.extend([sub.id for sub in subcategories])
                search_query = search_query.filter(Listing.category_id.in_(category_ids))
        
        # Location filters
        if state:
            search_query = search_query.filter(Listing.state == state)
            if district:
                search_query = search_query.filter(Listing.district == district)
        
        # Price filters
        if min_price is not None:
            try:
                search_query = search_query.filter(Listing.asking_price >= float(min_price))
            except (ValueError, TypeError):
                pass
        
        if max_price is not None:
            try:
                search_query = search_query.filter(Listing.asking_price <= float(max_price))
            except (ValueError, TypeError):
                pass
        
        # Condition filter
        if condition:
            search_query = search_query.filter(Listing.condition_type == condition)
        
        # Get total count for pagination
        total_count = search_query.count()
        
        # Sorting
        if sort_by == 'price_low_to_high':
            search_query = search_query.order_by(Listing.asking_price.asc())
        elif sort_by == 'price_high_to_low':
            search_query = search_query.order_by(Listing.asking_price.desc())
        elif sort_by == 'newest':
            search_query = search_query.order_by(Listing.created_at.desc())
        elif sort_by == 'oldest':
            search_query = search_query.order_by(Listing.created_at.asc())
        elif sort_by == 'most_viewed':
            search_query = search_query.order_by(Listing.views_count.desc())
        elif sort_by == 'quality':
            search_query = search_query.order_by(Listing.quality_score.desc())
        else:  # relevance (default)
            # Advanced relevance scoring
            search_query = search_query.order_by(
                Listing.quality_score.desc(),
                Listing.views_count.desc(),
                Listing.created_at.desc()
            )
        
        # Pagination
        offset = (page - 1) * limit
        listings = search_query.offset(offset).limit(limit).all()
        
        # Format results with enhanced data
        results = []
        for listing in listings:
            # Update view count (asynchronously in production)
            listing.views_count += 1
            
            results.append({
                'id': listing.id,
                'uuid': listing.uuid,
                'title': listing.title,
                'description': listing.description[:200] + '...' if len(listing.description) > 200 else listing.description,
                'price': listing.asking_price,
                'original_price': listing.original_price,
                'price_negotiable': listing.price_negotiable,
                'currency': listing.currency,
                'condition': listing.condition_type,
                'brand': listing.brand,
                'model': listing.model,
                'category': {
                    'id': listing.category.id,
                    'name': listing.category.name,
                    'icon': listing.category.icon
                } if listing.category else None,
                'location': {
                    'state': listing.state,
                    'district': listing.district,
                    'pincode': listing.pincode
                },
                'owner': {
                    'id': listing.owner.id,
                    'name': listing.owner.full_name,
                    'trust_score': listing.owner.trust_score,
                    'seller_rating': listing.owner.seller_rating,
                    'response_rate': listing.owner.response_rate,
                    'member_since': listing.owner.created_at.strftime("%Y")
                },
                'images': listing.images or [],
                'features': listing.features or [],
                'specifications': listing.specifications or {},
                'quality_score': listing.quality_score,
                'views_count': listing.views_count,
                'favorites_count': listing.favorites_count,
                'created_at': listing.created_at.isoformat(),
                'expires_at': listing.expires_at.isoformat() if listing.expires_at else None,
                'is_featured': listing.is_featured,
                'is_promoted': listing.is_promoted
            })
        
        # Commit view count updates
        db.commit()
        
        # Calculate pagination info
        total_pages = math.ceil(total_count / limit)
        
        # Generate search suggestions if no results
        suggestions = []
        if not results and query:
            # Simple suggestion logic
            all_brands = db.query(Listing.brand).filter(
                Listing.brand.isnot(None),
                Listing.is_active == True
            ).distinct().limit(5).all()
            suggestions = [brand[0] for brand in all_brands if brand[0]]
        
        return jsonify({
            'success': True,
            'results': results,
            'pagination': {
                'page': page,
                'limit': limit,
                'total': total_count,
                'pages': total_pages,
                'has_next': page < total_pages,
                'has_prev': page > 1
            },
            'search_info': {
                'query': query,
                'filters_applied': {
                    'category': category,
                    'location': f"{district}, {state}" if district and state else state or "All locations",
                    'price_range': f"₹{min_price} - ₹{max_price}" if min_price and max_price else None,
                    'condition': condition
                },
                'sort_by': sort_by,
                'suggestions': suggestions
            }
        })
        
    except Exception as e:
        logger.error(f"Search error: {e}")
        return jsonify({
            'success': False,
            'error': 'Search failed',
            'code': 'SEARCH_ERROR'
        }), 500

@app.route('/api/stats')
@cache_response(timeout=1800)  # Cache for 30 minutes
def get_platform_stats():
    """Get platform statistics"""
    try:
        db = next(get_db())
        
        stats = {
            'users': {
                'total': db.query(User).filter(User.is_active == True).count(),
                'verified': db.query(User).filter(
                    User.is_active == True,
                    User.email_verified == True,
                    User.phone_verified == True
                ).count(),
                'premium': db.query(User).filter(User.is_premium == True).count()
            },
            'listings': {
                'total': db.query(Listing).filter(Listing.is_active == True).count(),
                'active': db.query(Listing).filter(
                    Listing.is_active == True,
                    Listing.is_sold == False
                ).count(),
                'sold': db.query(Listing).filter(Listing.is_sold == True).count(),
                'featured': db.query(Listing).filter(Listing.is_featured == True).count()
            },
            'categories': {
                'total': db.query(Category).filter(Category.is_active == True).count(),
                'with_listings': db.query(Category).filter(
                    Category.is_active == True,
                    Category.total_listings > 0
                ).count()
            },
            'performance': {
                'cache_hit_rate': cache_manager.get_stats()['hit_rate'],
                'avg_response_time': '120ms',  # Would be calculated from monitoring
                'uptime': '99.9%'  # Would be from monitoring
            }
        }
        
        return jsonify({
            'success': True,
            'stats': stats,
            'generated_at': datetime.utcnow().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Stats error: {e}")
        return jsonify({
            'success': False,
            'error': 'Failed to load statistics'
        }), 500

@app.route('/health')
def health_check():
    """Production health check endpoint"""
    try:
        # Check database
        db = next(get_db())
        db.execute('SELECT 1')
        db_status = 'healthy'
    except Exception as e:
        db_status = f'unhealthy: {str(e)}'
    
    # Check cache
    cache_status = 'healthy' if cache_manager.redis_pool else 'memory_fallback'
    
    health_data = {
        'status': 'healthy' if db_status == 'healthy' else 'degraded',
        'timestamp': datetime.utcnow().isoformat(),
        'version': '5.0.0',
        'environment': 'production',
        'services': {
            'database': db_status,
            'cache': cache_status,
            'ml_engine': 'available' if ML_AVAILABLE else 'unavailable'
        },
        'performance': cache_manager.get_stats(),
        'features': {
            'compression': config.ENABLE_COMPRESSION,
            'profiling': config.ENABLE_PROFILING,
            'rate_limiting': True,
            'security_scanning': True
        }
    }
    
    status_code = 200 if health_data['status'] == 'healthy' else 503
    return jsonify(health_data), status_code

# ==================== WEB SCRAPING ROUTES ====================
@app.route('/api/web-scraping/start', methods=['POST'])
def start_web_scraping():
    """Start web scraping for selected states and categories"""
    try:
        data = request.get_json()
        selected_states = data.get('states', [])
        categories = data.get('categories', ['property', 'motors', 'marketplace'])
        scraping_method = data.get('method', 'test')  # 'test' or 'real'
        
        if not selected_states:
            return jsonify({
                'success': False,
                'error': 'No states selected for scraping'
            }), 400
        
        # Initialize appropriate scraper
        if scraping_method == 'real' and WEB_SCRAPING_AVAILABLE:
            try:
                scraper = RealWebScraper()
                print(f"🌐 Starting real web scraping for {len(selected_states)} states...")
            except ImportError:
                return jsonify({
                    'success': False,
                    'error': 'Real web scraping not available. Libraries not installed.'
                }), 400
        else:
            scraper = TestRealWebScraper()
            print(f"🧪 Starting test web scraping for {len(selected_states)} states...")
        
        # Start scraping in background thread
        def scrape_background():
            try:
                scraped_data = scraper.scrape_all_states(selected_states)
                if scraped_data:
                    save_scraped_data_to_db(scraped_data)
                    print(f"✅ Web scraping completed. {len(scraped_data)} items saved.")
                else:
                    print("⚠️ No data was scraped.")
            except Exception as e:
                print(f"❌ Web scraping failed: {str(e)}")
        
        # Start background thread
        thread = threading.Thread(target=scrape_background)
        thread.daemon = True
        thread.start()
        
        return jsonify({
            'success': True,
            'message': f'Web scraping started for {len(selected_states)} states',
            'method': scraping_method,
            'states': selected_states,
            'categories': categories
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Failed to start web scraping: {str(e)}'
        }), 500

@app.route('/api/web-scraping/status')
def web_scraping_status():
    """Get web scraping status and available options"""
    try:
        # Get available states
        states_data = {
            'Maharashtra': ['Mumbai', 'Pune', 'Nagpur', 'Thane', 'Nashik'],
            'Punjab': ['Chandigarh', 'Ludhiana', 'Amritsar', 'Jalandhar', 'Patiala'],
            'Himachal Pradesh': ['Shimla', 'Manali', 'Dharamshala', 'Kullu', 'Solan'],
            'Haryana': ['Gurgaon', 'Faridabad', 'Panipat', 'Hisar', 'Rohtak'],
            'Uttarakhand': ['Dehradun', 'Haridwar', 'Rishikesh', 'Nainital', 'Mussoorie']
        }
        
        # Get available categories
        categories = [
            {'id': 'property', 'name': 'Property & Real Estate', 'icon': '🏠'},
            {'id': 'motors', 'name': 'Motors & Vehicles', 'icon': '🚗'},
            {'id': 'marketplace', 'name': 'Marketplace & Products', 'icon': '🛒'}
        ]
        
        # Get scraping methods
        methods = [
            {'id': 'test', 'name': 'Test Scraping (Simulated)', 'description': 'Fast, reliable data generation without external dependencies'},
            {'id': 'real', 'name': 'Real Web Scraping', 'description': 'Actual data from e-commerce websites with pagination', 'available': WEB_SCRAPING_AVAILABLE}
        ]
        
        return jsonify({
            'success': True,
            'data': {
                'states': states_data,
                'categories': categories,
                'methods': methods,
                'web_scraping_available': WEB_SCRAPING_AVAILABLE
            }
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Failed to get web scraping status: {str(e)}'
        }), 500

@app.route('/api/web-scraping/test')
def test_web_scraping():
    """Test web scraping functionality"""
    try:
        # Use test scraper
        scraper = TestRealWebScraper()
        
        # Test with one state
        test_states = ['Maharashtra']
        print("🧪 Testing web scraping functionality...")
        
        scraped_data = scraper.scrape_all_states(test_states)
        
        if scraped_data:
            save_scraped_data_to_db(scraped_data)
            return jsonify({
                'success': True,
                'message': f'Test web scraping completed successfully. {len(scraped_data)} items generated and saved.',
                'items_count': len(scraped_data),
                'test_states': test_states
            })
        else:
            return jsonify({
                'success': False,
                'error': 'Test web scraping failed. No data generated.'
            }), 500
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Test web scraping failed: {str(e)}'
        }), 500

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'success': False,
        'error': 'Resource not found',
        'code': 'NOT_FOUND'
    }), 404

@app.errorhandler(429)
def rate_limit_exceeded(error):
    return jsonify({
        'success': False,
        'error': 'Rate limit exceeded. Please try again later.',
        'code': 'RATE_LIMITED'
    }), 429
# ==================== WEB SCRAPING SYSTEM ====================
class RealWebScraper:
    """Real web scraper for DealHub using requests and BeautifulSoup"""
    
    def __init__(self):
        if not WEB_SCRAPING_AVAILABLE:
            raise ImportError("Web scraping libraries not available")
            
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # Define target websites for different categories
        self.target_sites = {
            'property': [
                'https://www.99acres.com/property-in-mumbai-ffid',
                'https://www.magicbricks.com/property-for-sale-in-mumbai',
                'https://www.housing.com/property-for-sale-in-mumbai'
            ],
            'motors': [
                'https://www.carwale.com/used-cars-for-sale-in-mumbai/',
                'https://www.bikewale.com/used-bikes-for-sale-in-mumbai/',
                'https://www.olx.in/cars-cat-378/mumbai/'
            ],
            'marketplace': [
                'https://www.amazon.in/s?k=laptops',
                'https://www.flipkart.com/search?q=mobile+phones',
                'https://www.snapdeal.com/search?keyword=electronics'
            ]
        }
        
        # State and city mapping for regional data
        self.states_data = {
            'Maharashtra': ['Mumbai', 'Pune', 'Nagpur', 'Thane', 'Nashik'],
            'Punjab': ['Chandigarh', 'Ludhiana', 'Amritsar', 'Jalandhar', 'Patiala'],
            'Himachal Pradesh': ['Shimla', 'Manali', 'Dharamshala', 'Kullu', 'Solan'],
            'Haryana': ['Gurgaon', 'Faridabad', 'Panipat', 'Hisar', 'Rohtak'],
            'Uttarakhand': ['Dehradun', 'Haridwar', 'Rishikesh', 'Nainital', 'Mussoorie']
        }

    def scrape_ecommerce_site(self, url, category, city, state, max_pages=3):
        """Scrape e-commerce site with pagination support"""
        scraped_data = []
        
        try:
            # Try to scrape the main page first
            print(f"🔍 Scraping {url} for {category} in {city}, {state}")
            
            for page in range(1, max_pages + 1):
                try:
                    # Handle pagination
                    if page == 1:
                        page_url = url
                    else:
                        # Try different pagination patterns
                        if '?' in url:
                            page_url = f"{url}&page={page}"
                        else:
                            page_url = f"{url}?page={page}"
                    
                    print(f"  📄 Scraping page {page}: {page_url}")
                    
                    # Add delay to be respectful
                    time.sleep(random.uniform(1, 3))
                    
                    response = self.session.get(page_url, timeout=30, verify=False)
                    
                    if response.status_code != 200:
                        print(f"    ⚠️ Page {page} failed with status {response.status_code}")
                        continue
                    
                    # Parse HTML content
                    soup = BeautifulSoup(response.text, 'html.parser')
                    
                    # Extract data based on category
                    if category == 'property':
                        page_data = self._extract_property_data(soup, city, state, page)
                    elif category == 'motors':
                        page_data = self._extract_motors_data(soup, city, state, page)
                    else:  # marketplace
                        page_data = self._extract_marketplace_data(soup, city, state, page)
                    
                    if page_data:
                        scraped_data.extend(page_data)
                        print(f"    ✅ Page {page}: Found {len(page_data)} items")
                    else:
                        print(f"    ⚠️ Page {page}: No data found")
                    
                except Exception as e:
                    print(f"    ❌ Page {page} error: {str(e)}")
                    continue
                    
        except Exception as e:
            print(f"❌ Error scraping {url}: {str(e)}")
        
        return scraped_data

    def _extract_property_data(self, soup, city, state, page):
        """Extract property data from HTML"""
        properties = []
        
        # Try different selectors for property listings
        selectors = [
            'div[class*="property"]',
            'div[class*="listing"]',
            'div[class*="card"]',
            'div[class*="item"]'
        ]
        
        for selector in selectors:
            items = soup.select(selector)
            if items:
                print(f"      🏠 Found {len(items)} property items with selector: {selector}")
                break
        
        if not items:
            # Fallback: look for any div with price-like content
            items = soup.find_all('div', string=lambda text: text and ('₹' in text or 'Rs' in text or 'Lakh' in text or 'Crore' in text))
        
        for item in items[:10]:  # Limit to 10 items per page
            try:
                # Extract title
                title_elem = item.find(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']) or item.find('div', class_=lambda x: x and ('title' in x.lower() or 'name' in x.lower()))
                title = title_elem.text.strip() if title_elem else f"Property in {city}"
                
                # Extract price
                price_elem = item.find(string=lambda text: text and ('₹' in text or 'Rs' in text or 'Lakh' in text or 'Crore' in text))
                price_text = price_elem.strip() if price_elem else "Price on request"
                
                # Convert price to numeric value
                price = self._extract_price(price_text)
                
                # Extract description
                desc_elem = item.find(['p', 'span', 'div'], class_=lambda x: x and ('desc' in x.lower() or 'detail' in x.lower()))
                description = desc_elem.text.strip() if desc_elem else f"Beautiful property in {city}, {state}"
                
                # Generate location
                location = f"{city} {random.choice(['Central', 'West', 'East', 'North'])}"
                
                properties.append({
                    'title': title,
                    'description': description,
                    'price': price,
                    'price_type': 'fixed',
                    'category_id': 1,  # Property
                    'subcategory_id': 11,  # Residential
                    'location': location,
                    'city': city,
                    'state': state,
                    'main_photo': '🏠',
                    'additional_photos': '🏠,🌳,🏊‍♂️,🚗,🌅',
                    'tags': f'property, {city.lower()}, {state.lower()}, real estate',
                    'featured': random.choice([True, False]),
                    'source': 'Real Web Scraper',
                    'source_url': f'https://scraped-property-{city.lower()}.com',
                    'scraped_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                })
                
            except Exception as e:
                print(f"        ⚠️ Error extracting property item: {str(e)}")
                continue
        
        return properties

    def _extract_motors_data(self, soup, city, state, page):
        """Extract motors data from HTML"""
        motors = []
        
        # Try different selectors for vehicle listings
        selectors = [
            'div[class*="car"]',
            'div[class*="bike"]',
            'div[class*="vehicle"]',
            'div[class*="listing"]'
        ]
        
        for selector in selectors:
            items = soup.select(selector)
            if items:
                print(f"      🚗 Found {len(items)} vehicle items with selector: {selector}")
                break
        
        if not items:
            # Fallback: look for any div with vehicle-related content
            items = soup.find_all('div', string=lambda text: text and any(word in text.lower() for word in ['car', 'bike', 'vehicle', 'km', 'cc']))
        
        for item in items[:10]:  # Limit to 10 items per page
            try:
                # Extract title
                title_elem = item.find(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']) or item.find('div', class_=lambda x: x and ('title' in x.lower() or 'name' in x.lower()))
                title = title_elem.text.strip() if title_elem else f"Vehicle in {city}"
                
                # Extract price
                price_elem = item.find(string=lambda text: text and ('₹' in text or 'Rs' in text or 'Lakh' in text))
                price_text = price_elem.strip() if price_elem else "Price on request"
                
                # Convert price to numeric value
                price = self._extract_price(price_text)
                
                # Extract description
                desc_elem = item.find(['p', 'span', 'div'], class_=lambda x: x and ('desc' in x.lower() or 'detail' in x.lower()))
                description = desc_elem.text.strip() if desc_elem else f"Quality vehicle in {city}, {state}"
                
                # Determine vehicle type and icon
                if any(word in title.lower() for word in ['car', 'sedan', 'suv', 'hatchback']):
                    icon = '🚗'
                    subcategory_id = 21  # Cars
                else:
                    icon = '🏍️'
                    subcategory_id = 22  # Bikes
                
                # Generate location
                location = f"{city} {random.choice(['Central', 'West', 'East', 'North'])}"
                
                motors.append({
                    'title': title,
                    'description': description,
                    'price': price,
                    'price_type': 'fixed',
                    'category_id': 2,  # Motors
                    'subcategory_id': subcategory_id,
                    'location': location,
                    'city': city,
                    'state': state,
                    'main_photo': icon,
                    'additional_photos': f"{icon},🔑,📱,🔧,🛡️,📋",
                    'tags': f'vehicle, {city.lower()}, {state.lower()}, used',
                    'featured': random.choice([True, False]),
                    'source': 'Real Web Scraper',
                    'source_url': f'https://scraped-motors-{city.lower()}.com',
                    'scraped_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                })
                
            except Exception as e:
                print(f"        ⚠️ Error extracting vehicle item: {str(e)}")
                continue
        
        return motors

    def _extract_marketplace_data(self, soup, city, state, page):
        """Extract marketplace data from HTML"""
        items = []
        
        # Try different selectors for product listings
        selectors = [
            'div[class*="product"]',
            'div[class*="item"]',
            'div[class*="card"]',
            'div[class*="listing"]'
        ]
        
        for selector in selectors:
            products = soup.select(selector)
            if products:
                print(f"      🛒 Found {len(products)} product items with selector: {selector}")
                break
        
        if not products:
            # Fallback: look for any div with product-related content
            products = soup.find_all('div', string=lambda text: text and any(word in text.lower() for word in ['product', 'item', 'buy', 'sale']))
        
        for product in products[:10]:  # Limit to 10 items per page
            try:
                # Extract title
                title_elem = product.find(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']) or product.find('div', class_=lambda x: x and ('title' in x.lower() or 'name' in x.lower()))
                title = title_elem.text.strip() if title_elem else f"Product in {city}"
                
                # Extract price
                price_elem = product.find(string=lambda text: text and ('₹' in text or 'Rs' in text))
                price_text = price_elem.strip() if price_elem else "Price on request"
                
                # Convert price to numeric value
                price = self._extract_price(price_text)
                
                # Extract description
                desc_elem = product.find(['p', 'span', 'div'], class_=lambda x: x and ('desc' in x.lower() or 'detail' in x.lower()))
                description = desc_elem.text.strip() if desc_elem else f"Quality product in {city}, {state}"
                
                # Determine product category and icon
                if any(word in title.lower() for word in ['laptop', 'computer', 'phone', 'mobile', 'electronic']):
                    icon = '💻'
                    subcategory_id = 31  # Electronics
                else:
                    icon = '📦'
                    subcategory_id = 32  # General
                
                # Generate location
                location = f"{city} {random.choice(['Central', 'West', 'East', 'North'])}"
                
                items.append({
                    'title': title,
                    'description': description,
                    'price': price,
                    'price_type': 'fixed',
                    'category_id': 3,  # Marketplace
                    'subcategory_id': subcategory_id,
                    'location': location,
                    'city': city,
                    'state': state,
                    'main_photo': icon,
                    'additional_photos': f"{icon},📦,🔋,📱,🎯,✨",
                    'tags': f'product, {city.lower()}, {state.lower()}, online',
                    'featured': random.choice([True, False]),
                    'source': 'Real Web Scraper',
                    'source_url': f'https://scraped-marketplace-{city.lower()}.com',
                    'scraped_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                })
                
            except Exception as e:
                print(f"        ⚠️ Error extracting product item: {str(e)}")
                continue
        
        return items

    def _extract_price(self, price_text):
        """Extract numeric price from text"""
        try:
            # Remove currency symbols and convert to numeric
            price_text = price_text.replace('₹', '').replace('Rs', '').replace(',', '').replace(' ', '')
            
            # Handle different price formats
            if 'Lakh' in price_text or 'lakh' in price_text:
                price_text = price_text.replace('Lakh', '').replace('lakh', '')
                return int(float(price_text) * 100000)
            elif 'Crore' in price_text or 'crore' in price_text:
                price_text = price_text.replace('Crore', '').replace('crore', '')
                return int(float(price_text) * 10000000)
            else:
                # Try to extract just the numbers
                import re
                numbers = re.findall(r'\d+', price_text)
                if numbers:
                    return int(''.join(numbers))
                else:
                    return random.randint(5000, 100000)  # Fallback price
        except:
            return random.randint(5000, 100000)  # Fallback price

    def scrape_all_states(self, selected_states=None):
        """Scrape data for all selected states"""
        if selected_states is None:
            selected_states = list(self.states_data.keys())
        
        all_data = []
        
        print(f"🌐 Starting Real Web Scraping for {len(selected_states)} states...")
        print("=" * 60)
        
        for state in selected_states:
            if state not in self.states_data:
                continue
                
            cities = self.states_data[state]
            print(f"\n🏛️ Scraping data for {state}...")
            
            for city in cities:
                print(f"  📍 Scraping {city}...")
                
                # Scrape property data
                for url in self.target_sites['property']:
                    try:
                        # Modify URL for city-specific scraping
                        city_url = url.replace('mumbai', city.lower())
                        property_data = self.scrape_ecommerce_site(city_url, 'property', city, state)
                        all_data.extend(property_data)
                    except Exception as e:
                        print(f"    ❌ Property scraping failed for {city}: {str(e)}")
                
                # Scrape motors data
                for url in self.target_sites['motors']:
                    try:
                        # Modify URL for city-specific scraping
                        city_url = url.replace('mumbai', city.lower())
                        motors_data = self.scrape_ecommerce_site(city_url, 'motors', city, state)
                        all_data.extend(motors_data)
                    except Exception as e:
                        print(f"    ❌ Motors scraping failed for {city}: {str(e)}")
                
                # Scrape marketplace data
                for url in self.target_sites['marketplace']:
                    try:
                        marketplace_data = self.scrape_ecommerce_site(url, 'marketplace', city, state)
                        all_data.extend(marketplace_data)
                    except Exception as e:
                        print(f"    ❌ Marketplace scraping failed for {city}: {str(e)}")
                
                # Add delay between cities
                time.sleep(random.uniform(2, 5))
        
        print(f"\n📊 Real Web Scraping Summary:")
        print(f"🌍 States covered: {', '.join(selected_states)}")
        print(f"📊 Total items scraped: {len(all_data)}")
        
        return all_data

class TestRealWebScraper:
    """Test version of RealWebScraper that simulates web scraping without external dependencies"""
    
    def __init__(self):
        # State and city mapping for regional data
        self.states_data = {
            'Maharashtra': ['Mumbai', 'Pune', 'Nagpur', 'Thane', 'Nashik'],
            'Punjab': ['Chandigarh', 'Ludhiana', 'Amritsar', 'Jalandhar', 'Patiala'],
            'Himachal Pradesh': ['Shimla', 'Manali', 'Dharamshala', 'Kullu', 'Solan'],
            'Haryana': ['Gurgaon', 'Faridabad', 'Panipat', 'Hisar', 'Rohtak'],
            'Uttarakhand': ['Dehradun', 'Haridwar', 'Rishikesh', 'Nainital', 'Mussoorie']
        }
        
        # Simulated target websites
        self.target_sites = {
            'property': [
                'https://www.99acres.com/property-in-mumbai-ffid',
                'https://www.magicbricks.com/property-for-sale-in-mumbai',
                'https://www.housing.com/property-for-sale-in-mumbai'
            ],
            'motors': [
                'https://www.carwale.com/used-cars-for-sale-in-mumbai/',
                'https://www.bikewale.com/used-bikes-for-sale-in-mumbai/',
                'https://www.olx.in/cars-cat-378/mumbai/'
            ],
            'marketplace': [
                'https://www.amazon.in/s?k=laptops',
                'https://www.flipkart.com/search?q=mobile+phones',
                'https://www.snapdeal.com/search?keyword=electronics'
            ]
        }

    def simulate_web_scraping(self, url, category, city, state, max_pages=3):
        """Simulate web scraping with realistic delays and data"""
        scraped_data = []
        
        print(f"🔍 Simulating scraping {url} for {category} in {city}, {state}")
        
        for page in range(1, max_pages + 1):
            try:
                # Simulate pagination
                if page == 1:
                    page_url = url
                else:
                    if '?' in url:
                        page_url = f"{url}&page={page}"
                    else:
                        page_url = f"{url}?page={page}"
                
                print(f"  📄 Simulating page {page}: {page_url}")
                
                # Simulate respectful delays
                time.sleep(random.uniform(0.1, 0.3))  # Faster for testing
                
                # Simulate data extraction
                if category == 'property':
                    page_data = self._simulate_property_extraction(city, state, page)
                elif category == 'motors':
                    page_data = self._simulate_motors_extraction(city, state, page)
                else:  # marketplace
                    page_data = self._simulate_marketplace_extraction(city, state, page)
                
                if page_data:
                    scraped_data.extend(page_data)
                    print(f"    ✅ Page {page}: Simulated {len(page_data)} items")
                else:
                    print(f"    ⚠️ Page {page}: No data simulated")
                    
            except Exception as e:
                print(f"    ❌ Page {page} error: {str(e)}")
                continue
                
        return scraped_data

    def _simulate_property_extraction(self, city, state, page):
        """Simulate property data extraction"""
        properties = []
        
        # Simulate finding property items
        num_items = random.randint(3, 8)
        print(f"      🏠 Simulating {num_items} property items")
        
        for i in range(num_items):
            try:
                # Simulate extracted data
                property_types = ['Apartment', 'Villa', 'Penthouse', 'Studio', 'Townhouse']
                property_type = random.choice(property_types)
                
                title = f'{property_type} in {city} - Page {page}'
                description = f'Beautiful {property_type.lower()} in prime {city} location with modern amenities'
                price = random.randint(5000000, 50000000)
                location = f"{city} {random.choice(['Central', 'West', 'East', 'North'])}"
                
                properties.append({
                    'title': title,
                    'description': description,
                    'price': price,
                    'price_type': 'fixed',
                    'category_id': 1,  # Property
                    'subcategory_id': 11,  # Residential
                    'location': location,
                    'city': city,
                    'state': state,
                    'main_photo': '🏠',
                    'additional_photos': '🏠,🌳,🏊‍♂️,🚗,🌅',
                    'tags': f'property, {city.lower()}, {state.lower()}, real estate, page-{page}',
                    'featured': random.choice([True, False]),
                    'source': 'Test Real Web Scraper',
                    'source_url': f'https://test-scraped-property-{city.lower()}.com/page-{page}',
                    'scraped_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                })
                
            except Exception as e:
                print(f"        ⚠️ Error simulating property item: {str(e)}")
                continue
        
        return properties

    def _simulate_motors_extraction(self, city, state, page):
        """Simulate motors data extraction"""
        motors = []
        
        # Simulate finding vehicle items
        num_items = random.randint(3, 8)
        print(f"      🚗 Simulating {num_items} vehicle items")
        
        for i in range(num_items):
            try:
                # Simulate extracted data
                car_brands = ['Honda', 'Maruti', 'Hyundai', 'Tata', 'Mahindra', 'Toyota', 'Kia', 'MG']
                bike_brands = ['Royal Enfield', 'Bajaj', 'TVS', 'Hero', 'KTM', 'Yamaha', 'Honda', 'Suzuki']
                
                if random.choice([True, False]):  # Car or bike
                    brand = random.choice(car_brands)
                    model = f'{brand} {random.choice(["City", "Swift", "i20", "Nexon", "XUV", "Innova", "Seltos", "Hector"])}'
                    icon = '🚗'
                    subcategory_id = 21  # Cars
                else:
                    brand = random.choice(bike_brands)
                    model = f'{brand} {random.choice(["Classic", "Pulsar", "Apache", "Splendor", "Duke", "FZ", "Activa", "Access"])}'
                    icon = '🏍️'
                    subcategory_id = 22  # Bikes
                
                title = f'{model} {random.randint(2018, 2024)} - Page {page}'
                description = f'Well-maintained {brand} {model} in excellent condition, single owner, low mileage'
                price = random.randint(200000, 2000000)
                location = f"{city} {random.choice(['Central', 'West', 'East', 'North'])}"
                
                motors.append({
                    'title': title,
                    'description': description,
                    'price': price,
                    'price_type': 'fixed',
                    'category_id': 2,  # Motors
                    'subcategory_id': subcategory_id,
                    'location': location,
                    'city': city,
                    'state': state,
                    'main_photo': icon,
                    'additional_photos': f"{icon},🔑,📱,🔧,🛡️,📋",
                    'tags': f'vehicle, {brand.lower()}, {city.lower()}, {state.lower()}, used, page-{page}',
                    'featured': random.choice([True, False]),
                    'source': 'Test Real Web Scraper',
                    'source_url': f'https://test-scraped-motors-{city.lower()}.com/page-{page}',
                    'scraped_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                })
                
            except Exception as e:
                print(f"        ⚠️ Error simulating vehicle item: {str(e)}")
                continue
        
        return motors

    def _simulate_marketplace_extraction(self, city, state, page):
        """Simulate marketplace data extraction"""
        items = []
        
        # Simulate finding product items
        num_items = random.randint(3, 8)
        print(f"      🛒 Simulating {num_items} product items")
        
        for i in range(num_items):
            try:
                # Simulate extracted data
                products = ['iPhone 15 Pro Max', 'Samsung Galaxy S24', 'MacBook Air M2', 'Dell XPS 13', 'Sony Bravia TV', 'Bose QuietComfort', 'Apple Watch Series 9', 'Canon EOS R6']
                icons = ['📱', '💻', '📺', '🔊', '⌚', '📷', '🎧', '🖥️']
                
                product = random.choice(products)
                icon = random.choice(icons)
                price = random.randint(5000, 100000)
                condition = random.choice(["New", "Like New", "Excellent", "Good", "Mint"])
                
                title = f'{product} - {condition} Condition - Page {page}'
                description = f'High-quality {product.lower()} available at great price. Original packaging included.'
                location = f"{city} {random.choice(['Central', 'West', 'East', 'North'])}"
                
                # Determine product category
                if any(word in product.lower() for word in ['laptop', 'computer', 'phone', 'mobile', 'electronic']):
                    subcategory_id = 31  # Electronics
                else:
                    subcategory_id = 32  # General
                
                items.append({
                    'title': title,
                    'description': description,
                    'price': price,
                    'price_type': 'fixed',
                    'category_id': 3,  # Marketplace
                    'subcategory_id': subcategory_id,
                    'location': location,
                    'city': city,
                    'state': state,
                    'main_photo': icon,
                    'additional_photos': f"{icon},📦,🔋,📱,🎯,✨",
                    'tags': f'product, {product.lower()}, {city.lower()}, {state.lower()}, {condition.lower()}, page-{page}',
                    'featured': random.choice([True, False]),
                    'source': 'Test Real Web Scraper',
                    'source_url': f'https://test-scraped-marketplace-{city.lower()}.com/page-{page}',
                    'scraped_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                })
                
            except Exception as e:
                print(f"        ⚠️ Error simulating product item: {str(e)}")
                continue
        
        return items

    def scrape_all_states(self, selected_states=None):
        """Simulate scraping data for all selected states"""
        if selected_states is None:
            selected_states = list(self.states_data.keys())
        
        all_data = []
        
        print(f"🌐 Starting Test Real Web Scraping for {len(selected_states)} states...")
        print("=" * 60)
        
        for state in selected_states:
            if state not in self.states_data:
                continue
                
            cities = self.states_data[state]
            print(f"\n🏛️ Simulating scraping data for {state}...")
            
            for city in cities:
                print(f"  📍 Simulating scraping {city}...")
                
                # Simulate property data scraping
                for url in self.target_sites['property']:
                    try:
                        # Modify URL for city-specific scraping
                        city_url = url.replace('mumbai', city.lower())
                        property_data = self.simulate_web_scraping(city_url, 'property', city, state)
                        all_data.extend(property_data)
                    except Exception as e:
                        print(f"    ❌ Property scraping simulation failed for {city}: {str(e)}")
                
                # Simulate motors data scraping
                for url in self.target_sites['motors']:
                    try:
                        # Modify URL for city-specific scraping
                        city_url = url.replace('mumbai', city.lower())
                        motors_data = self.simulate_web_scraping(city_url, 'motors', city, state)
                        all_data.extend(motors_data)
                    except Exception as e:
                        print(f"    ❌ Motors scraping simulation failed for {city}: {str(e)}")
                
                # Simulate marketplace data scraping
                for url in self.target_sites['marketplace']:
                    try:
                        marketplace_data = self.simulate_web_scraping(url, 'marketplace', city, state)
                        all_data.extend(marketplace_data)
                    except Exception as e:
                        print(f"    ❌ Marketplace scraping simulation failed for {city}: {str(e)}")
                
                # Simulate delay between cities
                time.sleep(random.uniform(0.2, 0.5))  # Faster for testing
        
        print(f"\n📊 Test Real Web Scraping Summary:")
        print(f"🌍 States covered: {', '.join(selected_states)}")
        print(f"📊 Total items simulated: {len(all_data)}")
        
        return all_data

def save_scraped_data_to_db(data, table_name='listings'):
    """Save scraped data to SQLite database"""
    conn = sqlite3.connect('dealhub.db')
    cursor = conn.cursor()
    
    # Add source tracking columns if they don't exist
    try:
        cursor.execute('ALTER TABLE listings ADD COLUMN source TEXT')
        cursor.execute('ALTER TABLE listings ADD COLUMN source_url TEXT')
        cursor.execute('ALTER TABLE listings ADD COLUMN scraped_at TEXT')
    except sqlite3.OperationalError:
        pass  # Columns already exist
    
    # Insert scraped data
    for item in data:
        cursor.execute('''
            INSERT OR REPLACE INTO listings (
                title, description, price, price_type, category_id, subcategory_id,
                location, city, state, main_photo, additional_photos, tags, featured,
                source, source_url, scraped_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            item['title'], item['description'], item['price'], item['price_type'],
            item['category_id'], item['subcategory_id'], item['location'], item['city'],
            item['state'], item['main_photo'], item['additional_photos'], item['tags'],
            item['featured'], item['source'], item['source_url'], item['scraped_at']
        ))
    
    conn.commit()
    conn.close()
    print(f"✅ Saved {len(data)} items to database")
# ==================== HTML TEMPLATE ====================
PRODUCTION_HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TradeHub - Buy, Sell & Discover Amazing Deals</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f8f9fa;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        /* Header */
        .header {
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            color: white;
            padding: 1rem 0;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .logo {
            font-size: 2rem;
            font-weight: bold;
            color: #fbbf24;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .logo:hover {
            transform: scale(1.05);
            transition: transform 0.3s ease;
        }
        
        .search-container {
            flex: 1;
            max-width: 600px;
            position: relative;
        }
        
        .search-box {
            width: 100%;
            padding: 12px 20px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .search-btn {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            background: #fbbf24;
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            color: #1e293b;
            font-weight: 600;
        }
        
        .user-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 25px;
            background: rgba(255,255,255,0.1);
            cursor: pointer;
        }
        
        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #fbbf24;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #1e293b;
            font-weight: bold;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn-primary {
            background: #fbbf24;
            color: #1e293b;
        }
        
        .btn-outline {
            background: transparent;
            color: white;
            border: 2px solid white;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }
        
        /* Navigation */
        .nav {
            background: white;
            border-bottom: 1px solid #e2e8f0;
            padding: 1rem 0;
        }
        
        .nav-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }
        
        .nav-links a {
            color: #64748b;
            text-decoration: none;
            font-weight: 500;
            padding: 0.75rem 1rem;
            position: relative;
            transition: all 0.3s ease;
            border-radius: 6px;
        }
        
        .nav-links a:hover {
            color: #2563eb;
            background: rgba(37, 99, 235, 0.1);
        }
        
        .nav-links a.active {
            color: #2563eb;
            background: rgba(37, 99, 235, 0.1);
        }
        
        .nav-links a.active::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: #2563eb;
        }
        
        /* Pages */
        .page {
            display: none;
        }
        
        .page.active {
            display: block;
        }
        
        /* Category Images */
        .category-image {
            width: 100%;
            height: 200px;
            background: linear-gradient(45deg, #f1f5f9, #e2e8f0);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 4rem;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }
        
        .category-image::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, 
                rgba(37, 99, 235, 0.1), 
                rgba(59, 130, 246, 0.05));
        }
        
        .property-bg {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }
        
        .motors-bg {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            color: white;
        }
        
        .jobs-bg {
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            color: white;
        }
        
        .services-bg {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            color: white;
        }
        
        .marketplace-bg {
            background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
            color: white;
        }
        
        /* Hero Section */
        .hero {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 4rem 0;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"><circle cx="200" cy="200" r="3" fill="rgba(255,255,255,0.1)"/><circle cx="800" cy="400" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="400" cy="700" r="4" fill="rgba(255,255,255,0.1)"/></svg>');
        }
        
        .hero-content {
            position: relative;
            z-index: 1;
        }
        
        .hero h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            animation: fadeInUp 1s ease;
        }
        
        .hero p {
            font-size: 1.2rem;
            margin-bottom: 2rem;
            opacity: 0.9;
            animation: fadeInUp 1s ease 0.2s both;
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Categories Grid */
        .categories {
            padding: 4rem 0;
            background: white;
        }
        
        .section-title {
            text-align: center;
            font-size: 2.5rem;
            margin-bottom: 3rem;
            color: #1e293b;
        }
        
        .categories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }
        
        .category-card {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            border: 2px solid transparent;
        }
        
        .category-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            border-color: #2563eb;
        }
        
        .category-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            display: block;
        }
        
        .category-card h3 {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }
        
        .category-card p {
            color: #64748b;
            margin-bottom: 1rem;
        }
        
        .category-count {
            background: #f1f5f9;
            color: #2563eb;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 600;
        }
        
        /* Listings */
        .listings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 2rem;
        }
        
        .listing-card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .listing-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        .listing-image {
            height: 200px;
            background: linear-gradient(45deg, #f1f5f9, #e2e8f0);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 4rem;
            color: #94a3b8;
            position: relative;
            overflow: hidden;
        }
        
        .listing-content {
            padding: 1.5rem;
        }
        
        .listing-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }
        
        .listing-price {
            font-size: 1.5rem;
            font-weight: bold;
            color: #059669;
            margin-bottom: 0.5rem;
        }
        
        .listing-location {
            color: #64748b;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }
        
        .listing-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #e2e8f0;
        }
        
        .listing-date {
            color: #64748b;
            font-size: 0.85rem;
        }
        
        .listing-badge {
            background: #dcfce7;
            color: #166534;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        /* Breadcrumbs */
        .breadcrumb {
            background: #f1f5f9;
            padding: 1rem 0;
            font-size: 0.9rem;
            color: #64748b;
        }
        
        .breadcrumb a {
            color: #2563eb;
            text-decoration: none;
        }
        
        .breadcrumb a:hover {
            text-decoration: underline;
        }
        
        /* Subpage Layouts */
        .subpage-header {
            padding: 3rem 0;
            text-align: center;
        }
        
        .subpage-content {
            padding: 2rem 0;
        }
        
        .subcategory-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            margin: 2rem 0;
        }
        
        .subcategory-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border: 1px solid #e2e8f0;
        }
        
        .subcategory-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.15);
            border-color: #2563eb;
        }
        
        /* Filters Sidebar */
        .filters-sidebar {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            height: fit-content;
            position: sticky;
            top: 100px;
        }
        
        .results-container {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 2rem;
            padding: 2rem 0;
        }
        
        .filters-group {
            margin-bottom: 2rem;
        }
        
        .filters-group h4 {
            margin-bottom: 1rem;
            color: #1e293b;
        }
        
        .filter-option {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .filter-option input {
            margin-right: 0.5rem;
        }
        
        .price-range {
            display: flex;
            gap: 1rem;
            align-items: center;
        }
        
        .price-input {
            flex: 1;
            padding: 0.5rem;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
        }
        
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 2000;
            animation: fadeIn 0.3s ease;
        }
        
        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 12px;
            padding: 2rem;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            animation: slideIn 0.3s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideIn {
            from { transform: translate(-50%, -60%); opacity: 0; }
            to { transform: translate(-50%, -50%); opacity: 1; }
        }
        
        .close {
            position: absolute;
            top: 1rem;
            right: 1rem;
            font-size: 2rem;
            cursor: pointer;
            color: #64748b;
        }
        
        .close:hover {
            color: #e11d48;
        }
        
        /* Form Styles */
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e2e8f0;
            border-radius: 6px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }
        
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #2563eb;
        }
        
        /* User Authentication */
        .auth-container {
            max-width: 400px;
            margin: 2rem auto;
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        
        .auth-tabs {
            display: flex;
            border-bottom: 1px solid #e2e8f0;
            margin-bottom: 2rem;
        }
        
        .auth-tab {
            flex: 1;
            text-align: center;
            padding: 1rem;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.3s ease;
        }
        
        .auth-tab.active {
            color: #2563eb;
            border-bottom-color: #2563eb;
        }
        
        /* Notification */
        .notification {
            position: fixed;
            top: 100px;
            right: 20px;
            background: #059669;
            color: white;
            padding: 1rem 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            z-index: 1001;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        /* Footer */
        .footer {
            background: #1e293b;
            color: white;
            padding: 3rem 0 2rem;
            margin-top: 4rem;
        }
        
        .footer-content {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }
        
        .footer-section h4 {
            font-size: 1.2rem;
            margin-bottom: 1rem;
            color: #fbbf24;
        }
        
        .footer-section ul {
            list-style: none;
        }
        
        .footer-section ul li {
            margin-bottom: 0.5rem;
        }
        
        .footer-section ul li a {
            color: #cbd5e1;
            text-decoration: none;
            transition: color 0.3s ease;
        }
        
        .footer-section ul li a:hover {
            color: #fbbf24;
        }
        
        .footer-bottom {
            border-top: 1px solid #374151;
            padding-top: 2rem;
            text-align: center;
            color: #94a3b8;
        }
        
        /* Responsive Design */
        @media (max-width: 1024px) {
            .results-container {
                grid-template-columns: 1fr;
            }
            
            .filters-sidebar {
                position: static;
            }
        }
        
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
            }
            
            .nav-links {
                flex-wrap: wrap;
                gap: 1rem;
            }
            
            .hero h1 {
                font-size: 2rem;
            }
            
            .categories-grid {
                grid-template-columns: 1fr;
            }
            
            .listings-grid {
                grid-template-columns: 1fr;
            }
        }
        
        /* Specific Property Images */
        .property-types {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 2rem 0;
        }
        
        .property-type {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        
        .property-type:hover {
            transform: scale(1.02);
        }
        
        .property-type-image {
            height: 120px;
            background: linear-gradient(45deg, #e2e8f0, #cbd5e1);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
        }
        
        .property-type-content {
            padding: 1rem;
            text-align: center;
        }
        /* Loading State */
        .loading-spinner {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 3rem;
        }
        
        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f4f6;
            border-top: 4px solid #2563eb;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Enhanced Features */
        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin: 2rem 0;
        }
        
        .feature-card {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .feature-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            display: block;
        }
        
        .stats-section {
            background: #1e293b;
            color: white;
            padding: 3rem 0;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 2rem;
            text-align: center;
        }
        
        .stat-item h3 {
            font-size: 2.5rem;
            color: #fbbf24;
            margin-bottom: 0.5rem;
        }
        
        .stat-item p {
            color: #cbd5e1;
        }
        
        /* Advanced Search */
        .advanced-search {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        
        .search-filters {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        /* Image Gallery */
        .image-gallery {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin: 1rem 0;
        }
        
        .gallery-item {
            aspect-ratio: 1;
            background: linear-gradient(45deg, #f1f5f9, #e2e8f0);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            color: #94a3b8;
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        
        .gallery-item:hover {
            transform: scale(1.05);
        }
        
        /* User Profile */
        .profile-header {
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            color: white;
            padding: 2rem 0;
            border-radius: 12px;
            margin-bottom: 2rem;
            text-align: center;
        }
        
        .profile-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: #fbbf24;
            margin: 0 auto 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            color: #1e293b;
            font-weight: bold;
        }
        
        /* Verification Badges */
        .verification-badges {
            display: flex;
            gap: 0.5rem;
            margin: 1rem 0;
            flex-wrap: wrap;
        }
        
        .verification-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .verified-phone {
            background: #dcfce7;
            color: #166534;
        }
        
        .verified-email {
            background: #dbeafe;
            color: #1e40af;
        }
        
        .verified-id {
            background: #fef3c7;
            color: #92400e;
        }
        
        /* Web Scraping Page Styles */
        .scraping-controls {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .state-selection {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .state-checkbox {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            background: #f8fafc;
        }
        
        .state-checkbox input[type="checkbox"] {
            width: 18px;
            height: 18px;
            accent-color: #2563eb;
        }
        
        .scraping-method {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .method-selection {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .method-option {
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
            padding: 1rem;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            transition: border-color 0.3s ease;
        }
        
        .method-option:hover {
            border-color: #2563eb;
        }
        
        .method-option input[type="radio"] {
            margin-top: 0.25rem;
            accent-color: #2563eb;
        }
        
        .method-option label {
            font-weight: 600;
            color: #1e293b;
        }
        
        .method-option small {
            display: block;
            color: #64748b;
            margin-top: 0.25rem;
        }
        
        .scraping-actions {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .action-buttons {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .scraping-status {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .status-display {
            background: #f8fafc;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #2563eb;
        }
        
        .results-display {
            background: #f0fdf4;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #16a34a;
            margin-top: 1rem;
        }
        
        .scraping-info {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .info-content h4 {
            color: #1e293b;
            margin: 1.5rem 0 0.75rem 0;
        }
        
        .info-content ul {
            list-style: none;
            padding-left: 0;
        }
        
        .info-content li {
            padding: 0.5rem 0;
            border-bottom: 1px solid #f1f5f9;
        }
        
        .info-content li:last-child {
            border-bottom: none;
        }
        
        .info-content strong {
            color: #2563eb;
        }
        
        /* Status type styles */
        .status-info {
            border-left-color: #2563eb !important;
        }
        
        .status-success {
            border-left-color: #16a34a !important;
            background: #f0fdf4 !important;
        }
        
        .status-warning {
            border-left-color: #d97706 !important;
            background: #fffbeb !important;
        }
        
        .status-error {
            border-left-color: #dc2626 !important;
            background: #fef2f2 !important;
        }
        
        .result-item {
            padding: 0.5rem 0;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .result-item:last-child {
            border-bottom: none;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="container">
            <div class="header-content">
                <a href="#" class="logo" onclick="showPage('home')">
                    🏪 TradeHub
                </a>
                <div class="search-container">
                    <input type="text" class="search-box" placeholder="Search for anything..." id="globalSearch">
                    <button class="search-btn" onclick="performSearch()">Search</button>
                </div>
                <div class="user-actions">
                    <div id="userSection">
                        <a href="#" class="btn btn-outline" onclick="showModal('loginModal')">Login</a>
                        <a href="#" class="btn btn-primary" onclick="showModal('registerModal')">Register</a>
                    </div>
                    <div id="loggedInSection" style="display: none;">
                        <div class="user-info" onclick="showPage('profile')">
                            <div class="user-avatar" id="userAvatar">A</div>
                            <span id="userName">Arjun Mehta</span>
                        </div>
                        <a href="#" class="btn btn-outline" onclick="showPage('watchlist')">
                            ❤️ Saved
                        </a>
                        <a href="#" class="btn btn-primary" onclick="showModal('listingModal')">
                            📝 Sell
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Navigation -->
    <nav class="nav">
        <div class="container">
            <div class="nav-content">
                <ul class="nav-links">
                    <li><a href="/" class="nav-link">🏠 Home</a></li>
                    <li><a href="/property" class="nav-link">🏠 Property</a></li>
                    <li><a href="/motors" class="nav-link">🚗 Motors</a></li>
                    <li><a href="/jobs" class="nav-link">💼 Jobs</a></li>
                    <li><a href="/services" class="nav-link">🛠️ Services</a></li>
                    <li><a href="/marketplace" class="nav-link">🛒 Marketplace</a></li>
                    <li><a href="/web-scraping" class="nav-link">🌐 Web Scraping</a></li>
                </ul>
                <div>
                    <select id="locationSelect" onchange="filterByLocation()">
                        <option value="">All India</option>
                        <option value="mumbai">Mumbai, Maharashtra</option>
                        <option value="delhi">Delhi NCR</option>
                        <option value="bangalore">Bangalore, Karnataka</option>
                        <option value="hyderabad">Hyderabad, Telangana</option>
                        <option value="chennai">Chennai, Tamil Nadu</option>
                        <option value="kolkata">Kolkata, West Bengal</option>
                        <option value="pune">Pune, Maharashtra</option>
                        <option value="ahmedabad">Ahmedabad, Gujarat</option>
                        <option value="jaipur">Jaipur, Rajasthan</option>
                        <option value="kochi">Kochi, Kerala</option>
                    </select>
                </div>
            </div>
        </div>
    </nav>

    <!-- Home Page -->
    <div id="home" class="page active">
        <!-- Hero Section -->
        <section class="hero">
            <div class="container">
                <div class="hero-content">
                    <h1>Discover India's Largest Marketplace</h1>
                    <p>Buy, sell, and trade everything from properties to cars, jobs to services - all in one place</p>
                    <a href="#" class="btn btn-primary" onclick="showPage('marketplace')">Start Shopping</a>
                </div>
            </div>
        </section>

        <!-- Categories -->
        <section class="categories">
            <div class="container">
                <h2 class="section-title">Explore Categories</h2>
                <div class="categories-grid">
                    <div class="category-card">
                        <a href="/property" style="text-decoration: none; color: inherit;">
                            <span class="category-icon">🏘️</span>
                            <h3>Property</h3>
                            <p>Houses, apartments, commercial spaces</p>
                            <span class="category-count">45,000+ listings</span>
                        </a>
                    </div>
                    <div class="category-card">
                        <a href="/motors" style="text-decoration: none; color: inherit;">
                            <span class="category-icon">🚗</span>
                            <h3>Motors</h3>
                            <p>Cars, bikes, trucks & accessories</p>
                            <span class="category-count">89,000+ listings</span>
                        </a>
                    </div>
                    <div class="category-card">
                        <a href="/jobs" style="text-decoration: none; color: inherit;">
                            <span class="category-icon">💼</span>
                            <h3>Jobs</h3>
                            <p>Find your dream career</p>
                            <span class="category-count">25,000+ openings</span>
                        </a>
                    </div>
                    <div class="category-card">
                        <a href="/services" style="text-decoration: none; color: inherit;">
                            <span class="category-icon">🛠️</span>
                            <h3>Services</h3>
                            <p>Home services, repairs, tutoring</p>
                            <span class="category-count">15,000+ providers</span>
                        </a>
                    </div>
                    <div class="category-card">
                        <a href="/marketplace" style="text-decoration: none; color: inherit;">
                            <span class="category-icon">🛒</span>
                            <h3>Marketplace</h3>
                            <p>Electronics, fashion, furniture</p>
                            <span class="category-count">125,000+ items</span>
                        </a>
                    </div>
                    <div class="category-card">
                        <a href="/services/education-training" style="text-decoration: none; color: inherit;">
                            <span class="category-icon">📚</span>
                            <h3>Education</h3>
                            <p>Courses, books, tutoring</p>
                            <span class="category-count">8,500+ listings</span>
                        </a>
                    </div>
                </div>
            </div>
        </section>

        <!-- Featured Listings -->
        <section class="featured">
            <div class="container">
                <h2 class="section-title">Featured Listings</h2>
                <div class="listings-grid" id="featuredListings">
                    <!-- Featured listings will be populated by JavaScript -->
                </div>
            </div>
        </section>

        <!-- Stats Section -->
        <section class="stats-section">
            <div class="container">
                <div class="stats-grid">
                    <div class="stat-item">
                        <h3>2.5M+</h3>
                        <p>Active Users</p>
                    </div>
                    <div class="stat-item">
                        <h3>500K+</h3>
                        <p>Monthly Listings</p>
                    </div>
                    <div class="stat-item">
                        <h3>₹15B+</h3>
                        <p>Transactions Value</p>
                    </div>
                    <div class="stat-item">
                        <h3>99.2%</h3>
                        <p>Customer Satisfaction</p>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!-- Property Page -->
    <div id="property" class="page">
        <div class="breadcrumb">
            <div class="container">
                <a href="#" onclick="showPage('home')">Home</a> > Property
            </div>
        </div>
        
        <section class="subpage-header">
            <div class="container">
                <div class="category-image marketplace-bg">
                    <span style="font-size: 6rem;">🛒</span>
                </div>
                <h1 class="section-title">Marketplace - Buy & Sell Everything</h1>
                <p style="font-size: 1.2rem; color: #64748b; max-width: 600px; margin: 0 auto;">
                    Discover millions of products from electronics to fashion, books to furniture
                </p>
            </div>
        </section>

        <section class="subpage-content">
            <div class="container">
                <div class="subcategory-grid">
                    <div class="subcategory-card" onclick="showPage('electronics')">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">📱</span>
                        <h4>Electronics</h4>
                        <p>Mobiles, Laptops, Gadgets</p>
                        <span class="category-count">45,000+ items</span>
                    </div>
                    <div class="subcategory-card" onclick="showPage('fashion')">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">👗</span>
                        <h4>Fashion</h4>
                        <p>Clothing, Shoes, Accessories</p>
                        <span class="category-count">32,000+ items</span>
                    </div>
                    <div class="subcategory-card" onclick="showPage('furniture')">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">🪑</span>
                        <h4>Furniture</h4>
                        <p>Sofa, Bed, Tables, Storage</p>
                        <span class="category-count">18,500+ items</span>
                    </div>
                    <div class="subcategory-card" onclick="showPage('books')">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">📚</span>
                        <h4>Books & Media</h4>
                        <p>Books, Music, Movies</p>
                        <span class="category-count">25,000+ items</span>
                    </div>
                    <div class="subcategory-card" onclick="showPage('sports')">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">⚽</span>
                        <h4>Sports & Fitness</h4>
                        <p>Equipment, Apparel, Accessories</p>
                        <span class="category-count">12,000+ items</span>
                    </div>
                    <div class="subcategory-card" onclick="showPage('home-garden')">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">🏡</span>
                        <h4>Home & Garden</h4>
                        <p>Appliances, Tools, Plants</p>
                        <span class="category-count">15,500+ items</span>
                    </div>
                </div>

                <div class="results-container">
                    <div class="filters-sidebar">
                        <h4>Categories</h4>
                        <div class="filters-group">
                            <div class="filter-option">
                                <input type="checkbox" id="electronics" checked>
                                <label for="electronics">Electronics</label>
                            </div>
                            <div class="filter-option">
                                <input type="checkbox" id="fashion" checked>
                                <label for="fashion">Fashion</label>
                            </div>
                            <div class="filter-option">
                                <input type="checkbox" id="furniture">
                                <label for="furniture">Furniture</label>
                            </div>
                            <div class="filter-option">
                                <input type="checkbox" id="books">
                                <label for="books">Books</label>
                            </div>
                            <div class="filter-option">
                                <input type="checkbox" id="sports">
                                <label for="sports">Sports</label>
                            </div>
                        </div>
                        <div class="filters-group">
                            <h4>Condition</h4>
                            <div class="filter-option">
                                <input type="radio" name="condition" id="new" checked>
                                <label for="new">Brand New</label>
                            </div>
                            <div class="filter-option">
                                <input type="radio" name="condition" id="used">
                                <label for="used">Used</label>
                            </div>
                            <div class="filter-option">
                                <input type="radio" name="condition" id="any-condition">
                                <label for="any-condition">Any Condition</label>
                            </div>
                        </div>
                        <div class="filters-group">
                            <h4>Price Range</h4>
                            <div class="price-range">
                                <input type="number" class="price-input" placeholder="Min" id="marketplaceMinPrice">
                                <span>to</span>
                                <input type="number" class="price-input" placeholder="Max" id="marketplaceMaxPrice">
                            </div>
                        </div>
                        <button class="btn btn-primary" style="width: 100%; margin-top: 1rem;">Apply Filters</button>
                    </div>
                    <div>
                        <div class="listings-grid" id="marketplaceListings">
                            <!-- Marketplace listings populated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!-- Web Scraping Page -->
    <div id="web-scraping" class="page">
        <div class="breadcrumb">
            <div class="container">
                <a href="#" onclick="showPage('home')">Home</a> > Web Scraping
            </div>
        </div>
        
        <section class="subpage-header">
            <div class="container">
                <div class="category-image marketplace-bg">
                    <span style="font-size: 6rem;">🌐</span>
                </div>
                <h1 class="section-title">Web Scraping Dashboard</h1>
                <p style="font-size: 1.2rem; color: #64748b; max-width: 600px; margin: 0 auto;">
                    Generate data for multiple states using simulated or real web scraping
                </p>
            </div>
        </section>

        <section class="subpage-content">
            <div class="container">
                <!-- State Selection -->
                <div class="scraping-controls">
                    <h3>🌍 Select States for Data Generation</h3>
                    <div class="state-selection">
                        <div class="state-checkbox">
                            <input type="checkbox" id="maharashtra" value="Maharashtra" checked>
                            <label for="maharashtra">Maharashtra</label>
                        </div>
                        <div class="state-checkbox">
                            <input type="checkbox" id="punjab" value="Punjab" checked>
                            <label for="punjab">Punjab</label>
                        </div>
                        <div class="state-checkbox">
                            <input type="checkbox" id="himachal" value="Himachal Pradesh" checked>
                            <label for="himachal">Himachal Pradesh</label>
                        </div>
                        <div class="state-checkbox">
                            <input type="checkbox" id="haryana" value="Haryana" checked>
                            <label for="haryana">Haryana</label>
                        </div>
                        <div class="state-checkbox">
                            <input type="checkbox" id="uttarakhand" value="Uttarakhand" checked>
                            <label for="uttarakhand">Uttarakhand</label>
                        </div>
                    </div>
                </div>

                <!-- Scraping Method Selection -->
                <div class="scraping-method">
                    <h3>🔧 Select Scraping Method</h3>
                    <div class="method-selection">
                        <div class="method-option">
                            <input type="radio" name="scraping-method" id="test-method" value="test" checked>
                            <label for="test-method">🧪 Test Scraping (Simulated)</label>
                            <small>Fast, reliable data generation without external dependencies</small>
                        </div>
                        <div class="method-option">
                            <input type="radio" name="scraping-method" id="real-method" value="real">
                            <label for="real-method">🌐 Real Web Scraping</label>
                            <small>Actual data from e-commerce websites with pagination</small>
                        </div>
                    </div>
                </div>

                <!-- Scraping Controls -->
                <div class="scraping-actions">
                    <h3>📊 Generate Data</h3>
                    <div class="action-buttons">
                        <button class="btn btn-primary" onclick="startScraping('property')">
                            🏠 Generate Property Data
                        </button>
                        <button class="btn btn-primary" onclick="startScraping('motors')">
                            🚗 Generate Motors Data
                        </button>
                        <button class="btn btn-primary" onclick="startScraping('marketplace')">
                            🛒 Generate Marketplace Data
                        </button>
                        <button class="btn btn-secondary" onclick="testScraping()">
                            🧪 Test Scraping
                        </button>
                    </div>
                </div>

                <!-- Status and Results -->
                <div class="scraping-status">
                    <h3>📈 Status & Results</h3>
                    <div id="scrapingStatus" class="status-display">
                        <p>Ready to start web scraping. Select states and click generate buttons.</p>
                    </div>
                    <div id="scrapingResults" class="results-display" style="display: none;">
                        <h4>Generated Data Summary</h4>
                        <div id="resultsContent"></div>
                    </div>
                </div>

                <!-- Information Section -->
                <div class="scraping-info">
                    <h3>ℹ️ Information</h3>
                    <div class="info-content">
                        <h4>🌍 States Covered</h4>
                        <ul>
                            <li><strong>Maharashtra:</strong> Mumbai, Pune, Nagpur, Thane, Nashik</li>
                            <li><strong>Punjab:</strong> Chandigarh, Ludhiana, Amritsar, Jalandhar, Patiala</li>
                            <li><strong>Himachal Pradesh:</strong> Shimla, Manali, Dharamshala, Kullu, Solan</li>
                            <li><strong>Haryana:</strong> Gurgaon, Faridabad, Panipat, Hisar, Rohtak</li>
                            <li><strong>Uttarakhand:</strong> Dehradun, Haridwar, Rishikesh, Nainital, Mussoorie</li>
                        </ul>
                        
                        <h4>📊 Data Categories</h4>
                        <ul>
                            <li><strong>Property:</strong> Real estate listings with regional context</li>
                            <li><strong>Motors:</strong> Vehicle listings with state-specific locations</li>
                            <li><strong>Marketplace:</strong> Product listings with regional tags</li>
                        </ul>
                        
                        <h4>🔧 Scraping Methods</h4>
                        <ul>
                            <li><strong>Test Scraping:</strong> Fast, reliable data generation</li>
                            <li><strong>Real Web Scraping:</strong> Actual data from e-commerce sites</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!-- Electronics Subpage -->
    <div id="electronics" class="page">
        <div class="breadcrumb">
            <div class="container">
                <a href="#" onclick="showPage('home')">Home</a> > 
                <a href="#" onclick="showPage('marketplace')">Marketplace</a> > Electronics
            </div>
        </div>
        
        <section class="subpage-header">
            <div class="container">
                <div class="category-image marketplace-bg">
                    <span style="font-size: 6rem;">📱</span>
                </div>
                <h1 class="section-title">Electronics & Gadgets</h1>
                <p style="font-size: 1.2rem; color: #64748b; max-width: 600px; margin: 0 auto;">
                    Latest smartphones, laptops, and electronic gadgets at best prices
                </p>
            </div>
        </section>

        <section class="subpage-content">
            <div class="container">
                <div class="subcategory-grid">
                    <div class="subcategory-card">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">📱</span>
                        <h4>Smartphones</h4>
                        <p>Latest models from all brands</p>
                    </div>
                    <div class="subcategory-card">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">💻</span>
                        <h4>Laptops & Computers</h4>
                        <p>Gaming, Business, Student laptops</p>
                    </div>
                    <div class="subcategory-card">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">📺</span>
                        <h4>TVs & Monitors</h4>
                        <p>Smart TVs, Gaming monitors</p>
                    </div>
                    <div class="subcategory-card">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">🎧</span>
                        <h4>Audio & Headphones</h4>
                        <p>Speakers, Earphones, Headsets</p>
                    </div>
                    <div class="subcategory-card">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">📷</span>
                        <h4>Cameras</h4>
                        <p>DSLR, Mirrorless, Action cams</p>
                    </div>
                    <div class="subcategory-card">
                        <span style="font-size: 3rem; display: block; margin-bottom: 1rem;">🎮</span>
                        <h4>Gaming</h4>
                        <p>Consoles, Games, Accessories</p>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!-- User Profile Page -->
    <div id="profile" class="page">
        <div class="breadcrumb">
            <div class="container">
                <a href="#" onclick="showPage('home')">Home</a> > Profile
            </div>
        </div>
        
        <section class="subpage-content">
            <div class="container">
                <div class="profile-header">
                    <div class="profile-avatar" id="profileAvatar">A</div>
                    <h2 id="profileName">Arjun Mehta</h2>
                    <p>Member since January 2024</p>
                    <div class="verification-badges">
                        <span class="verification-badge verified-phone">📞 Phone Verified</span>
                        <span class="verification-badge verified-email">📧 Email Verified</span>
                        <span class="verification-badge verified-id">🆔 ID Verified</span>
                    </div>
                </div>

                <div class="feature-grid">
                    <div class="feature-card" onclick="showModal('myListingsModal')">
                        <span class="feature-icon">📝</span>
                        <h4>My Listings</h4>
                        <p>12 Active Listings</p>
                    </div>
                    <div class="feature-card" onclick="showModal('messagesModal')">
                        <span class="feature-icon">💬</span>
                        <h4>Messages</h4>
                        <p>5 Unread Messages</p>
                    </div>
                    <div class="feature-card" onclick="showPage('watchlist')">
                        <span class="feature-icon">❤️</span>
                        <h4>Saved Items</h4>
                        <p>23 Saved Items</p>
                    </div>
                    <div class="feature-card" onclick="showModal('transactionsModal')">
                        <span class="feature-icon">💳</span>
                        <h4>Transactions</h4>
                        <p>View Purchase History</p>
                    </div>
                    <div class="feature-card" onclick="showModal('profileSettingsModal')">
                        <span class="feature-icon">⚙️</span>
                        <h4>Settings</h4>
                        <p>Account Preferences</p>
                    </div>
                    <div class="feature-card" onclick="showModal('analyticsModal')">
                        <span class="feature-icon">📊</span>
                        <h4>Analytics</h4>
                        <p>Listing Performance</p>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!-- Watchlist Page -->
    <div id="watchlist" class="page">
        <div class="breadcrumb">
            <div class="container">
                <a href="#" onclick="showPage('home')">Home</a> > Saved Items
            </div>
        </div>
        
        <section class="subpage-content">
            <div class="container">
                <h1 class="section-title">My Saved Items</h1>
                <div class="listings-grid" id="watchlistItems">
                    <!-- Watchlist items populated by JavaScript -->
                </div>
            </div>
        </section>
    </div>

    <!-- Login Modal -->
    <div id="loginModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('loginModal')">&times;</span>
            <div class="auth-container" style="margin: 0; box-shadow: none;">
                <div class="auth-tabs">
                    <div class="auth-tab active" onclick="switchAuthTab('login')">Login</div>
                    <div class="auth-tab" onclick="switchAuthTab('register')">Register</div>
                </div>
                <form id="loginForm">
                    <div class="form-group">
                        <label for="loginEmail">Email or Phone</label>
                        <input type="text" id="loginEmail" required placeholder="Enter email or phone number">
                    </div>
                    <div class="form-group">
                        <label for="loginPassword">Password</label>
                        <input type="password" id="loginPassword" required placeholder="Enter password">
                    </div>
                    <button type="submit" class="btn btn-primary" style="width: 100%; margin-bottom: 1rem;">Login</button>
                    <p style="text-align: center;">
                        <a href="#" onclick="showModal('forgotPasswordModal')">Forgot Password?</a>
                    </p>
                </form>
            </div>
        </div>
    </div>

    <!-- Register Modal -->
    <div id="registerModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('registerModal')">&times;</span>
            <div class="auth-container" style="margin: 0; box-shadow: none;">
                <h2 style="text-align: center; margin-bottom: 2rem;">Create Account</h2>
                <form id="registerForm">
                    <div class="form-group">
                        <label for="registerName">Full Name</label>
                        <input type="text" id="registerName" required placeholder="Enter your full name">
                    </div>
                    <div class="form-group">
                        <label for="registerEmail">Email</label>
                        <input type="email" id="registerEmail" required placeholder="Enter your email">
                    </div>
                    <div class="form-group">
                        <label for="registerPhone">Phone Number</label>
                        <input type="tel" id="registerPhone" required placeholder="+91 9876543210">
                    </div>
                    <div class="form-group">
                        <label for="registerPassword">Password</label>
                        <input type="password" id="registerPassword" required placeholder="Create password (min 8 characters)">
                    </div>
                    <div class="form-group">
                        <label for="registerConfirmPassword">Confirm Password</label>
                        <input type="password" id="registerConfirmPassword" required placeholder="Re-enter password">
                    </div>
                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="agreeTerms" required>
                            I agree to the <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a>
                        </label>
                    </div>
                    <button type="submit" class="btn btn-primary" style="width: 100%;">Create Account</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Create Listing Modal -->
    <div id="listingModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('listingModal')">&times;</span>
            <h2 style="margin-bottom: 2rem;">Create New Listing</h2>
            <form id="listingForm">
                <div class="form-group">
                    <label for="listingCategory">Category</label>
                    <select id="listingCategory" required>
                        <option value="">Select Category</option>
                        <option value="property">Property</option>
                        <option value="motors">Motors</option>
                        <option value="marketplace">Marketplace</option>
                        <option value="services">Services</option>
                        <option value="jobs">Jobs</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="listingTitle">Title</label>
                    <input type="text" id="listingTitle" required placeholder="Enter listing title (min 10 characters)">
                </div>
                <div class="form-group">
                    <label for="listingDescription">Description</label>
                    <textarea id="listingDescription" rows="4" required placeholder="Describe your item/service in detail (min 50 characters)"></textarea>
                </div>
                <div class="form-group">
                    <label for="listingPrice">Price</label>
                    <input type="number" id="listingPrice" required placeholder="Enter price in rupees">
                </div>
                <div class="form-group">
                    <label for="listingLocation">Location</label>
                    <select id="listingLocation" required>
                        <option value="">Select City</option>
                        <option value="mumbai">Mumbai, Maharashtra</option>
                        <option value="delhi">Delhi NCR</option>
                        <option value="bangalore">Bangalore, Karnataka</option>
                        <option value="hyderabad">Hyderabad, Telangana</option>
                        <option value="chennai">Chennai, Tamil Nadu</option>
                        <option value="kolkata">Kolkata, West Bengal</option>
                        <option value="pune">Pune, Maharashtra</option>
                        <option value="ahmedabad">Ahmedabad, Gujarat</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="listingImages">Upload Images (Max 10)</label>
                    <input type="file" id="listingImages" multiple accept="image/*" style="padding: 0.5rem;">
                    <small style="color: #64748b;">Upload up to 10 high-quality images</small>
                </div>
                <div class="form-group">
                    <label for="listingCondition">Condition</label>
                    <select id="listingCondition">
                        <option value="new">Brand New</option>
                        <option value="like-new">Like New</option>
                        <option value="good">Good</option>
                        <option value="fair">Fair</option>
                        <option value="poor">Poor</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary" style="width: 100%; padding: 1rem; font-size: 1.1rem;">Create Listing</button>
            </form>
        </div>
    </div>

    <!-- Advanced Search Modal -->
    <div id="advancedSearchModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('advancedSearchModal')">&times;</span>
            <h2 style="margin-bottom: 2rem;">Advanced Search</h2>
            <form id="advancedSearchForm">
                <div class="search-filters">
                    <div class="form-group">
                        <label for="advSearchKeyword">Keywords</label>
                        <input type="text" id="advSearchKeyword" placeholder="Enter keywords">
                    </div>
                    <div class="form-group">
                        <label for="advSearchCategory">Category</label>
                        <select id="advSearchCategory">
                            <option value="">All Categories</option>
                            <option value="property">Property</option>
                            <option value="motors">Motors</option>
                            <option value="marketplace">Marketplace</option>
                            <option value="services">Services</option>
                            <option value="jobs">Jobs</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="advSearchLocation">Location</label>
                        <select id="advSearchLocation">
                            <option value="">All Locations</option>
                            <option value="mumbai">Mumbai</option>
                            <option value="delhi">Delhi NCR</option>
                            <option value="bangalore">Bangalore</option>
                            <option value="chennai">Chennai</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Price Range</label>
                        <div class="price-range">
                            <input type="number" placeholder="Min Price" id="advSearchMinPrice">
                            <span>to</span>
                            <input type="number" placeholder="Max Price" id="advSearchMaxPrice">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="advSearchSort">Sort By</label>
                        <select id="advSearchSort">
                            <option value="relevance">Most Relevant</option>
                            <option value="price-low">Price: Low to High</option>
                            <option value="price-high">Price: High to Low</option>
                            <option value="newest">Newest First</option>
                            <option value="oldest">Oldest First</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="advSearchCondition">Condition</label>
                        <select id="advSearchCondition">
                            <option value="">Any Condition</option>
                            <option value="new">Brand New</option>
                            <option value="like-new">Like New</option>
                            <option value="good">Good</option>
                            <option value="fair">Fair</option>
                        </select>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary" style="width: 100%; margin-top: 2rem;">Search Now</button>
            </form>
        </div>
    </div>

    <!-- Contact Seller Modal -->
    <div id="contactModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('contactModal')">&times;</span>
            <h2 style="margin-bottom: 2rem;">Contact Seller</h2>
            <form id="contactForm">
                <div class="form-group">
                    <label for="buyerName">Your Name</label>
                    <input type="text" id="buyerName" required placeholder="Enter your name">
                </div>
                <div class="form-group">
                    <label for="buyerEmail">Your Email</label>
                    <input type="email" id="buyerEmail" required placeholder="your.email@example.com">
                </div>
                <div class="form-group">
                    <label for="buyerPhone">Your Phone</label>
                    <input type="tel" id="buyerPhone" placeholder="+91 9876543210">
                </div>
                <div class="form-group">
                    <label for="inquiryMessage">Message</label>
                    <textarea id="inquiryMessage" rows="4" required placeholder="Hi, I'm interested in this item. Is it still available?"></textarea>
                </div>
                <button type="submit" class="btn btn-primary" style="width: 100%; padding: 1rem;">Send Message</button>
            </form>
        </div>
    </div>

    <!-- My Listings Modal -->
    <div id="myListingsModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('myListingsModal')">&times;</span>
            <h2 style="margin-bottom: 2rem;">My Listings</h2>
            <div id="userListings">
                <!-- User listings populated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Messages Modal -->
    <div id="messagesModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('messagesModal')">&times;</span>
            <h2 style="margin-bottom: 2rem;">Messages</h2>
            <div class="messages-list" id="messagesList">
                <!-- Messages populated by JavaScript -->
            </div>
        </div>
    </div>
    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h4>About TradeHub</h4>
                    <ul>
                        <li><a href="#" onclick="showModal('aboutModal')">About Us</a></li>
                        <li><a href="#" onclick="showModal('careersModal')">Careers</a></li>
                        <li><a href="#" onclick="showModal('pressModal')">Press & Media</a></li>
                        <li><a href="#" onclick="showModal('investorsModal')">Investors</a></li>
                        <li><a href="#" onclick="showModal('blogModal')">Blog</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h4>Support & Help</h4>
                    <ul>
                        <li><a href="#" onclick="showModal('helpModal')">Help Center</a></li>
                        <li><a href="#" onclick="showModal('safetyModal')">Safety Tips</a></li>
                        <li><a href="#" onclick="showModal('contactSupportModal')">Contact Support</a></li>
                        <li><a href="#" onclick="showModal('communityModal')">Community Guidelines</a></li>
                        <li><a href="#" onclick="showModal('disputeModal')">Report Issue</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h4>Legal & Policies</h4>
                    <ul>
                        <li><a href="#" onclick="showModal('termsModal')">Terms of Service</a></li>
                        <li><a href="#" onclick="showModal('privacyModal')">Privacy Policy</a></li>
                        <li><a href="#" onclick="showModal('cookiesModal')">Cookie Policy</a></li>
                        <li><a href="#" onclick="showModal('copyrightModal')">Copyright Policy</a></li>
                        <li><a href="#" onclick="showModal('accessibilityModal')">Accessibility</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h4>Connect With Us</h4>
                    <ul>
                        <li><a href="#" onclick="window.open('https://twitter.com/tradehub', '_blank')">Twitter</a></li>
                        <li><a href="#" onclick="window.open('https://facebook.com/tradehub', '_blank')">Facebook</a></li>
                        <li><a href="#" onclick="window.open('https://instagram.com/tradehub', '_blank')">Instagram</a></li>
                        <li><a href="#" onclick="window.open('https://linkedin.com/company/tradehub', '_blank')">LinkedIn</a></li>
                        <li><a href="#" onclick="showModal('appModal')">Mobile App</a></li>
                    </ul>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2024 TradeHub Marketplace Private Limited. All rights reserved. | Made with care in India</p>
            </div>
        </div>
    </footer>

    <!-- Notification -->
    <div id="notification" class="notification">
        <span id="notificationText">Action completed successfully!</span>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 3000; justify-content: center; align-items: center;">
        <div class="loading-spinner">
            <div class="spinner"></div>
            <p style="color: white; margin-top: 1rem;">Loading...</p>
        </div>
    </div>

    <script>
        // Global variables
        let currentUser = null;
        let currentListings = [];
        let watchlistItems = JSON.parse(localStorage.getItem('tradehub_watchlist') || '[]');
        let userListings = JSON.parse(localStorage.getItem('tradehub_userListings') || '[]');
        let userMessages = JSON.parse(localStorage.getItem('tradehub_messages') || '[]');
        
        // Sample comprehensive data for millions of users
        const sampleListings = {
            property: [
                {
                    id: 1001,
                    title: "Luxury 3BHK Apartment with Sea View in Bandra West",
                    price: "₹2.5 Cr",
                    location: "Bandra West, Mumbai",
                    date: "1 day ago",
                    badge: "Verified",
                    icon: "🚗",
                    category: "motors",
                    images: ["🚗", "🛞", "🎵", "🔧"],
                    description: "Well-maintained Honda City with low mileage, single owner, all services done at authorized Honda service center. Complete documentation available.",
                    seller: { name: "Suresh Motors", email: "suresh@motors.com", phone: "+91 9820456789", rating: 4.7, verified: true },
                    details: { year: 2022, mileage: "15,000 km", fuel: "Petrol", owner: "First Owner", transmission: "CVT Automatic", color: "Pearl White" }
                },
                {
                    id: 2002,
                    title: "Royal Enfield Classic 350 - Excellent Condition",
                    price: "₹1.2 Lakh",
                    location: "Koramangala, Bangalore",
                    date: "5 days ago",
                    badge: "Great Deal",
                    icon: "🏍️",
                    category: "motors",
                    images: ["🏍️", "⛽", "🔧", "📋"],
                    description: "Royal Enfield Classic 350 in excellent condition, recently serviced, new tires and battery. Perfect for long rides and city commuting.",
                    seller: { name: "Biker's Paradise", email: "bikes@paradise.com", phone: "+91 9845678901", rating: 4.5, verified: true },
                    details: { year: 2021, mileage: "8,500 km", fuel: "Petrol", owner: "Second Owner", transmission: "Manual", color: "Desert Storm" }
                }
            ],
            jobs: [
                {
                    id: 3001,
                    title: "Senior Software Engineer - Full Stack Development",
                    price: "₹25-35 LPA",
                    location: "Whitefield, Bangalore",
                    date: "2 days ago",
                    badge: "Remote OK",
                    icon: "💻",
                    category: "jobs",
                    images: ["💻", "🏢", "👥", "📈"],
                    description: "Join our growing tech team! Looking for experienced full-stack developers with React, Node.js experience. Work on cutting-edge projects with flexible work arrangements.",
                    seller: { name: "TechCorp India", email: "hr@techcorp.com", phone: "+91 9876501234", rating: 4.9, verified: true },
                    details: { experience: "5-8 years", type: "Full Time", skills: "React, Node.js, MongoDB, AWS", benefits: "Health Insurance, Stock Options" }
                }
            ],
            services: [
                {
                    id: 4001,
                    title: "Professional Home Deep Cleaning Service",
                    price: "₹2,500",
                    location: "All Mumbai",
                    date: "Today",
                    badge: "Top Rated",
                    icon: "🧹",
                    category: "services",
                    images: ["🧹", "🧽", "✨", "🏠"],
                    description: "Professional home cleaning with eco-friendly products, trained staff, 100% satisfaction guarantee. We clean every corner of your home.",
                    seller: { name: "CleanPro Services", email: "book@cleanpro.com", phone: "+91 9876545678", rating: 4.8, verified: true },
                    details: { duration: "4-6 hours", team: "2-3 cleaners", guarantee: "30-day warranty", includes: "All cleaning supplies" }
                }
            ],
            marketplace: [
                {
                    id: 5001,
                    title: "iPhone 15 Pro Max 256GB - Brand New Sealed",
                    price: "₹1,45,000",
                    location: "Cyber City, Gurgaon",
                    date: "Today",
                    badge: "Brand New",
                    icon: "📱",
                    category: "marketplace",
                    images: ["📱", "📦", "🔋", "📞"],
                    description: "Latest iPhone 15 Pro Max in Titanium Blue, sealed box with all accessories, official Apple warranty and bill included.",
                    seller: { name: "Mobile Zone", email: "sales@mobilezone.com", phone: "+91 9876501122", rating: 4.9, verified: true },
                    details: { condition: "Brand New", warranty: "1 Year Apple Warranty", storage: "256GB", color: "Titanium Blue" }
                }
            ]
        };

        // Enhanced user authentication system
        class UserManager {
            constructor() {
                this.users = new Map(JSON.parse(localStorage.getItem('tradehub_users') || '[]'));
                this.currentUser = JSON.parse(localStorage.getItem('tradehub_currentUser') || 'null');
                this.updateUI();
            }

            register(userData) {
                if (this.users.has(userData.email)) {
                    throw new Error('User already exists with this email');
                }
                
                const user = {
                    id: Date.now(),
                    ...userData,
                    createdAt: new Date(),
                    verified: { phone: false, email: false, id: false },
                    rating: 5.0,
                    totalTransactions: 0
                };
                
                this.users.set(userData.email, user);
                this.saveUsers();
                return user;
            }

            login(email, password) {
                const user = this.users.get(email);
                if (!user || user.password !== password) {
                    throw new Error('Invalid credentials');
                }
                
                this.currentUser = user;
                localStorage.setItem('tradehub_currentUser', JSON.stringify(user));
                this.updateUI();
                return user;
            }

            logout() {
                this.currentUser = null;
                localStorage.removeItem('tradehub_currentUser');
                this.updateUI();
            }

            updateUI() {
                const userSection = document.getElementById('userSection');
                const loggedInSection = document.getElementById('loggedInSection');
                
                if (this.currentUser) {
                    userSection.style.display = 'none';
                    loggedInSection.style.display = 'flex';
                    document.getElementById('userName').textContent = this.currentUser.name;
                    document.getElementById('userAvatar').textContent = this.currentUser.name.charAt(0).toUpperCase();
                    document.getElementById('profileName').textContent = this.currentUser.name;
                    document.getElementById('profileAvatar').textContent = this.currentUser.name.charAt(0).toUpperCase();
                } else {
                    userSection.style.display = 'flex';
                    loggedInSection.style.display = 'none';
                }
            }

            saveUsers() {
                localStorage.setItem('tradehub_users', JSON.stringify([...this.users]));
            }
        }

        const userManager = new UserManager();

        // Enhanced listing management
        class ListingManager {
            constructor() {
                this.listings = new Map();
                this.loadSampleData();
            }

            loadSampleData() {
                Object.values(sampleListings).flat().forEach(listing => {
                    this.listings.set(listing.id, listing);
                });
                this.generateMoreListings();
            }

            generateMoreListings() {
                const categories = ['property', 'motors', 'jobs', 'services', 'marketplace'];
                const locations = ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Hyderabad', 'Pune', 'Kolkata', 'Ahmedabad', 'Jaipur', 'Kochi'];
                
                for (let i = 0; i < 1000; i++) {
                    const category = categories[Math.floor(Math.random() * categories.length)];
                    const location = locations[Math.floor(Math.random() * locations.length)];
                    
                    const listing = this.generateListingForCategory(category, location, 10000 + i);
                    this.listings.set(listing.id, listing);
                }
            }

            generateListingForCategory(category, location, id) {
                const baseListings = {
                    property: {
                        titles: ['2BHK Apartment', '3BHK Flat', 'Independent House', 'Studio Apartment', 'Commercial Space'],
                        priceRange: [50, 500],
                        icons: ['🏠', '🏢', '🏘️', '🏬'],
                        priceUnit: ' Lakh'
                    },
                    motors: {
                        titles: ['Maruti Swift', 'Honda City', 'Hyundai i20', 'Toyota Innova', 'Mahindra XUV'],
                        priceRange: [3, 25],
                        icons: ['🚗', '🏍️', '🚙'],
                        priceUnit: ' Lakh'
                    },
                    jobs: {
                        titles: ['Software Engineer', 'Marketing Manager', 'Sales Executive', 'Data Analyst', 'HR Manager'],
                        priceRange: [3, 30],
                        icons: ['💼', '💻', '📊'],
                        priceUnit: ' LPA'
                    },
                    services: {
                        titles: ['Home Cleaning', 'AC Repair', 'Plumbing Service', 'Painting Work', 'Electrical Work'],
                        priceRange: [500, 10000],
                        icons: ['🛠️', '🧹', '🔧'],
                        priceUnit: ''
                    },
                    marketplace: {
                        titles: ['iPhone 14', 'MacBook Air', 'Samsung TV', 'Gaming Laptop', 'Wireless Headphones'],
                        priceRange: [5000, 150000],
                        icons: ['📱', '💻', '📺', '🎧'],
                        priceUnit: ''
                    }
                };

                const config = baseListings[category];
                const title = config.titles[Math.floor(Math.random() * config.titles.length)];
                const price = Math.floor(Math.random() * (config.priceRange[1] - config.priceRange[0])) + config.priceRange[0];
                const priceFormatted = config.priceUnit ? `₹${price}${config.priceUnit}` : `₹${price.toLocaleString()}`;

                return {
                    id: id,
                    title: `${title} in ${location}`,
                    price: priceFormatted,
                    location: location,
                    date: `${Math.floor(Math.random() * 30) + 1} days ago`,
                    badge: ['New', 'Hot Deal', 'Premium', 'Verified'][Math.floor(Math.random() * 4)],
                    icon: config.icons[Math.floor(Math.random() * config.icons.length)],
                    category: category,
                    description: `Quality ${title} available in ${location}. Contact for more details.`,
                    seller: {
                        name: `Seller ${Math.floor(Math.random() * 1000)}`,
                        phone: `+91 ${Math.floor(Math.random() * 9000000000) + 1000000000}`,
                        verified: Math.random() > 0.3
                    }
                };
            }

            search(query, filters = {}) {
                let results = Array.from(this.listings.values());
                
                if (query) {
                    results = results.filter(listing => 
                        listing.title.toLowerCase().includes(query.toLowerCase()) ||
                        listing.description.toLowerCase().includes(query.toLowerCase()) ||
                        listing.location.toLowerCase().includes(query.toLowerCase())
                    );
                }
                
                if (filters.category) {
                    results = results.filter(listing => listing.category === filters.category);
                }
                
                if (filters.location) {
                    results = results.filter(listing => 
                        listing.location.toLowerCase().includes(filters.location.toLowerCase())
                    );
                }
                
                return results;
            }
        }

        const listingManager = new ListingManager();

        // UI Management Functions
        function showPage(pageId) {
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            
            document.getElementById(pageId).classList.add('active');
            
            document.querySelectorAll('.nav-links a').forEach(link => {
                link.classList.remove('active');
            });
            
            populatePageContent(pageId);
        }

        function populatePageContent(pageId) {
            switch(pageId) {
                case 'home':
                    populateFeaturedListings();
                    break;
                case 'property':
                    populateListings('property', 'propertyListings');
                    break;
                case 'motors':
                    populateListings('motors', 'motorListings');
                    break;
                case 'cars':
                    populateCarListings();
                    break;
                case 'jobs':
                    populateListings('jobs', 'jobListings');
                    break;
                case 'services':
                    populateListings('services', 'serviceListings');
                    break;
                case 'home-services':
                    populateHomeServicesListings();
                    break;
                case 'marketplace':
                    populateListings('marketplace', 'marketplaceListings');
                    break;
                case 'electronics':
                    populateElectronicsListings();
                    break;
                case 'watchlist':
                    populateWatchlist();
                    break;
                case 'web-scraping':
                    initWebScrapingPage();
                    break;
            }
        }

        function populateListings(category, containerId) {
            const container = document.getElementById(containerId);
            if (!container) return;
            
            showLoading(container);
            
            setTimeout(() => {
                const listings = listingManager.search('', { category: category }).slice(0, 20);
                let html = '';
                
                listings.forEach(listing => {
                    html += createListingHTML(listing);
                });
                
                container.innerHTML = html;
                currentListings = listings;
            }, 500);
        }

        function createListingHTML(listing) {
            return `
                <div class="listing-card" onclick="showListingDetail(${listing.id})">
                    <div class="listing-image">
                        ${listing.icon}
                        ${listing.images ? createImageGallery(listing.images.slice(0, 4)) : ''}
                    </div>
                    <div class="listing-content">
                        <div class="listing-title">${listing.title}</div>
                        <div class="listing-price">${listing.price}</div>
                        <div class="listing-location">📍 ${listing.location}</div>
                        ${listing.seller?.verified ? '<div style="margin-top: 0.5rem;"><span class="verification-badge verified-phone">✅ Verified Seller</span></div>' : ''}
                        <div class="listing-meta">
                            <div class="listing-date">${listing.date}</div>
                            <div class="listing-badge">${listing.badge}</div>
                        </div>
                    </div>
                </div>
            `;
        }

        function createImageGallery(images) {
            if (!images || images.length === 0) return '';
            
            return `
                <div class="image-gallery" style="position: absolute; bottom: 10px; right: 10px; display: flex; gap: 5px;">
                    ${images.map(img => `<span style="font-size: 1rem; background: rgba(0,0,0,0.5); padding: 2px 5px; border-radius: 3px; color: white;">${img}</span>`).join('')}
                </div>
            `;
        }

        function populateFeaturedListings() {
            const container = document.getElementById('featuredListings');
            if (!container) return;
            
            const featuredListings = Object.values(sampleListings).flat();
            let html = '';
            
            featuredListings.forEach(listing => {
                html += createListingHTML(listing);
            });
            
            container.innerHTML = html;
        }

        function populateCarListings() {
            const container = document.getElementById('carListings');
            if (!container) return;
            
            const carListings = listingManager.search('car').slice(0, 15);
            let html = '';
            
            carListings.forEach(listing => {
                html += createListingHTML(listing);
            });
            
            container.innerHTML = html;
        }

        function populateElectronicsListings() {
            const electronics = listingManager.search('', { category: 'marketplace' }).filter(item => 
                item.title.toLowerCase().includes('phone') || 
                item.title.toLowerCase().includes('laptop') ||
                item.title.toLowerCase().includes('tv') ||
                item.title.toLowerCase().includes('headphones')
            ).slice(0, 20);
            
            // This would populate electronics listings
            console.log('Electronics listings:', electronics.length);
        }

        function populateWatchlist() {
            const container = document.getElementById('watchlistItems');
            if (!container) return;
            
            let html = '';
            
            watchlistItems.forEach(id => {
                const listing = listingManager.listings.get(id);
                if (listing) {
                    html += createListingHTML(listing);
                }
            });
            
            if (html === '') {
                html = `
                    <div style="grid-column: 1 / -1; text-align: center; padding: 3rem; color: #64748b;">
                        <h3>Your watchlist is empty</h3>
                        <p>Start adding items you're interested in!</p>
                        <button class="btn btn-primary" onclick="showPage('marketplace')" style="margin-top: 1rem;">Browse Items</button>
                    </div>
                `;
            }
            
            container.innerHTML = html;
        }

        // Modal Management
        function showModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'block';
                
                // Populate modal content based on type
                switch(modalId) {
                    case 'myListingsModal':
                        populateUserListings();
                        break;
                    case 'messagesModal':
                        populateMessages();
                        break;
                }
            }
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'none';
            }
        }

        function populateUserListings() {
            const container = document.getElementById('userListings');
            if (!container) return;
            
            let html = `
                <div style="border: 1px solid #e2e8f0; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <strong>iPhone 14 Pro 256GB</strong>
                            <p style="color: #64748b; margin: 0;">₹85,000 • Mumbai</p>
                            <small style="color: #059669;">✅ Active • 45 views • 12 inquiries</small>
                        </div>
                        <div>
                            <button class="btn btn-outline" style="padding: 0.5rem 1rem; margin-right: 0.5rem;">Edit</button>
                            <button class="btn" style="background: #dc2626; color: white; padding: 0.5rem 1rem;">Delete</button>
                        </div>
                    </div>
                </div>
                <div style="border: 1px solid #e2e8f0; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <strong>Wedding Photography Services</strong>
                            <p style="color: #64748b; margin: 0;">₹40,000 • Delhi NCR</p>
                            <small style="color: #059669;">✅ Active • 67 views • 8 inquiries</small>
                        </div>
                        <div>
                            <button class="btn btn-outline" style="padding: 0.5rem 1rem; margin-right: 0.5rem;">Edit</button>
                            <button class="btn" style="background: #dc2626; color: white; padding: 0.5rem 1rem;">Delete</button>
                        </div>
                    </div>
                </div>
                <div style="border: 1px solid #e2e8f0; border-radius: 8px; padding: 1rem;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <strong>2BHK Apartment for Rent</strong>
                            <p style="color: #64748b; margin: 0;">₹25,000/month • Pune</p>
                            <small style="color: #f59e0b;">⏳ Under Review • 23 views</small>
                        </div>
                        <div>
                            <button class="btn btn-outline" style="padding: 0.5rem 1rem; margin-right: 0.5rem;">Edit</button>
                            <button class="btn" style="background: #dc2626; color: white; padding: 0.5rem 1rem;">Delete</button>
                        </div>
                    </div>
                </div>
            `;
            
            container.innerHTML = html;
        }

        function populateMessages() {
            const container = document.getElementById('messagesList');
            if (!container) return;
            
            const messages = [
                {
                    sender: "Rahul Kumar",
                    message: "Hi, is the Honda City still available? Can I inspect it tomorrow?",
                    time: "2 hours ago",
                    unread: true
                },
                {
                    sender: "Priya Sharma",
                    message: "Interested in the apartment. What's the rent and security deposit?",
                    time: "1 day ago",
                    unread: true
                },
                {
                    sender: "Amit Patel",
                    message: "Can you provide more details about the MacBook? Any warranty?",
                    time: "3 days ago",
                    unread: false
                }
            ];
            
            let html = '';
            messages.forEach(msg => {
                html += `
                    <div style="border: 1px solid #e2e8f0; border-radius: 8px; padding: 1rem; margin-bottom: 1rem; ${msg.unread ? 'border-left: 4px solid #2563eb;' : ''}">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                            <strong>${msg.sender}</strong>
                            <span style="color: #64748b; font-size: 0.9rem;">${msg.time}</span>
                        </div>
                        <p style="margin: 0.5rem 0; color: #374151;">${msg.message}</p>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn btn-primary" style="padding: 0.5rem 1rem; font-size: 0.9rem;">Reply</button>
                            <button class="btn btn-outline" style="padding: 0.5rem 1rem; font-size: 0.9rem;">Mark as Read</button>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        // Form Handlers
        document.addEventListener('DOMContentLoaded', function() {
            // Login form
            document.getElementById('loginForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;
                
                try {
                    userManager.login(email, password);
                    closeModal('loginModal');
                    showNotification('Login successful!');
                } catch (error) {
                    showNotification(error.message, 'error');
                }
            });

            // Register form
            document.getElementById('registerForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = {
                    name: document.getElementById('registerName').value,
                    email: document.getElementById('registerEmail').value,
                    phone: document.getElementById('registerPhone').value,
                    password: document.getElementById('registerPassword').value
                };
                
                const confirmPassword = document.getElementById('registerConfirmPassword').value;
                
                if (formData.password !== confirmPassword) {
                    showNotification('Passwords do not match', 'error');
                    return;
                }
                
                try {
                    userManager.register(formData);
                    userManager.login(formData.email, formData.password);
                    closeModal('registerModal');
                    showNotification('Account created successfully!');
                } catch (error) {
                    showNotification(error.message, 'error');
                }
            });

            // Listing form
            document.getElementById('listingForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                if (!userManager.currentUser) {
                    showModal('loginModal');
                    return;
                }
                
                const formData = {
                    category: document.getElementById('listingCategory').value,
                    title: document.getElementById('listingTitle').value,
                    description: document.getElementById('listingDescription').value,
                    price: document.getElementById('listingPrice').value,
                    location: document.getElementById('listingLocation').value,
                    condition: document.getElementById('listingCondition').value
                };
                
                // Validate form
                if (formData.title.length < 10) {
                    showNotification('Title must be at least 10 characters', 'error');
                    return;
                }
                
                if (formData.description.length < 50) {
                    showNotification('Description must be at least 50 characters', 'error');
                    return;
                }
                
                userListings.push({
                    ...formData,
                    id: Date.now(),
                    seller: userManager.currentUser,
                    createdAt: new Date(),
                    status: 'active'
                });
                
                localStorage.setItem('tradehub_userListings', JSON.stringify(userListings));
                
                closeModal('listingModal');
                showNotification('Listing created successfully!');
                document.getElementById('listingForm').reset();
            });

            // Contact form
            document.getElementById('contactForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const messageData = {
                    buyerName: document.getElementById('buyerName').value,
                    buyerEmail: document.getElementById('buyerEmail').value,
                    buyerPhone: document.getElementById('buyerPhone').value,
                    message: document.getElementById('inquiryMessage').value,
                    timestamp: new Date()
                };
                
                userMessages.push(messageData);
                localStorage.setItem('tradehub_messages', JSON.stringify(userMessages));
                
                closeModal('contactModal');
                showNotification('Message sent successfully!');
                document.getElementById('contactForm').reset();
            });

            // Initialize the page
            populateFeaturedListings();
            initializeNavigation();
        });

        // Utility Functions
        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            const notificationText = document.getElementById('notificationText');
            
            notificationText.textContent = message;
            notification.className = `notification ${type === 'error' ? 'error' : ''}`;
            notification.style.background = type === 'error' ? '#dc2626' : '#059669';
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        function showLoading(container) {
            container.innerHTML = `
                <div class="loading-spinner" style="grid-column: 1 / -1;">
                    <div class="spinner"></div>
                    <p style="margin-top: 1rem; color: #64748b;">Loading listings...</p>
                </div>
            `;
        }
        function showListingDetail(listingId) {
            const listing = listingManager.listings.get(listingId);
            if (!listing) return;

            // Create and show listing detail modal
            let modalHtml = `
                <div class="modal" id="listingDetailModal" style="display: block;">
                    <div class="modal-content" style="max-width: 900px;">
                        <span class="close" onclick="closeModal('listingDetailModal')">&times;</span>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem;">
                            <div>
                                <div class="category-image" style="height: 300px; margin-bottom: 1rem;">
                                    ${listing.icon}
                                </div>
                                ${listing.images ? `
                                <div class="image-gallery">
                                    ${listing.images.map(img => `
                                        <div class="gallery-item">${img}</div>
                                    `).join('')}
                                </div>
                                ` : ''}
                            </div>
                            <div>
                                <h2>${listing.title}</h2>
                                <div style="font-size: 2rem; color: #059669; font-weight: bold; margin: 1rem 0;">${listing.price}</div>
                                <div style="color: #64748b; margin-bottom: 2rem;">📍 ${listing.location}</div>
                                <p style="margin-bottom: 2rem; line-height: 1.6;">${listing.description}</p>
                                
                                ${listing.details ? `
                                <div style="background: #f8fafc; padding: 1.5rem; border-radius: 8px; margin-bottom: 2rem;">
                                    <h4 style="margin-bottom: 1rem;">Details</h4>
                                    ${Object.entries(listing.details).map(([key, value]) => `
                                        <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem; padding-bottom: 0.5rem; border-bottom: 1px solid #e2e8f0;">
                                            <span style="color: #64748b; text-transform: capitalize;">${key.replace(/([A-Z])/g, ' $1')}:</span>
                                            <span style="font-weight: 600;">${value}</span>
                                        </div>
                                    `).join('')}
                                </div>
                                ` : ''}
                                
                                <div style="display: flex; gap: 1rem;">
                                    <button class="btn btn-primary" onclick="addToWatchlist(${listingId})" style="flex: 1;">
                                        ❤️ Save Item
                                    </button>
                                    <button class="btn btn-primary" onclick="showContactForm(${listingId})" style="flex: 1;">
                                        📞 Contact Seller
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        ${listing.seller ? `
                        <div style="background: #f8fafc; padding: 1.5rem; border-radius: 8px; margin-top: 2rem;">
                            <h4 style="margin-bottom: 1rem;">Seller Information</h4>
                            <div style="display: flex; align-items: center; gap: 1rem;">
                                <div class="user-avatar" style="width: 50px; height: 50px; font-size: 1.5rem;">
                                    ${listing.seller.name.charAt(0)}
                                </div>
                                <div>
                                    <div style="font-weight: 600;">${listing.seller.name}</div>
                                    <div style="color: #64748b;">${listing.seller.phone}</div>
                                    ${listing.seller.verified ? '<div class="verification-badge verified-phone" style="margin-top: 0.5rem;">✅ Verified Seller</div>' : ''}
                                </div>
                            </div>
                        </div>
                        ` : ''}
                    </div>
                </div>
            `;
            
            // Remove existing modal if present
            const existingModal = document.getElementById('listingDetailModal');
            if (existingModal) {
                existingModal.remove();
            }
            
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }

        function addToWatchlist(listingId) {
            if (!watchlistItems.includes(listingId)) {
                watchlistItems.push(listingId);
                localStorage.setItem('tradehub_watchlist', JSON.stringify(watchlistItems));
                showNotification('Item saved to your watchlist!');
            } else {
                showNotification('Item already in your watchlist!');
            }
        }

        function showContactForm(listingId) {
            closeModal('listingDetailModal');
            showModal('contactModal');
            
            const listing = listingManager.listings.get(listingId);
            if (listing) {
                document.getElementById('inquiryMessage').value = `Hi, I'm interested in "${listing.title}". Is it still available? Can we discuss the details?`;
            }
        }

        function performSearch() {
            const query = document.getElementById('globalSearch').value;
            if (query.trim()) {
                showNotification(`Searching for "${query}"...`);
                
                setTimeout(() => {
                    const results = listingManager.search(query);
                    showSearchResults(results, query);
                }, 500);
            }
        }

        function showSearchResults(results, query) {
            // Create search results page
            const searchPageHtml = `
                <div id="searchResults" class="page active">
                    <div class="breadcrumb">
                        <div class="container">
                            <a href="#" onclick="showPage('home')">Home</a> > Search Results
                        </div>
                    </div>
                    <section class="subpage-content">
                        <div class="container">
                            <h1 class="section-title">Search Results for "${query}"</h1>
                            <p style="text-align: center; color: #64748b; margin-bottom: 3rem;">
                                Found ${results.length} results
                            </p>
                            <div class="results-container">
                                <div class="filters-sidebar">
                                    <h4>Refine Results</h4>
                                    <div class="filters-group">
                                        <h4>Category</h4>
                                        <div class="filter-option">
                                            <input type="checkbox" id="searchProperty">
                                            <label for="searchProperty">Property</label>
                                        </div>
                                        <div class="filter-option">
                                            <input type="checkbox" id="searchMotors">
                                            <label for="searchMotors">Motors</label>
                                        </div>
                                        <div class="filter-option">
                                            <input type="checkbox" id="searchJobs">
                                            <label for="searchJobs">Jobs</label>
                                        </div>
                                        <div class="filter-option">
                                            <input type="checkbox" id="searchServices">
                                            <label for="searchServices">Services</label>
                                        </div>
                                        <div class="filter-option">
                                            <input type="checkbox" id="searchMarketplace">
                                            <label for="searchMarketplace">Marketplace</label>
                                        </div>
                                    </div>
                                    <button class="btn btn-primary" style="width: 100%; margin-top: 1rem;">Apply Filters</button>
                                </div>
                                <div>
                                    <div class="listings-grid" id="searchResultsListings">
                                        ${results.slice(0, 20).map(listing => createListingHTML(listing)).join('')}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
            `;
            
            // Hide all pages and show search results
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            
            const existingSearch = document.getElementById('searchResults');
            if (existingSearch) {
                existingSearch.remove();
            }
            
            document.body.insertAdjacentHTML('beforeend', searchPageHtml);
            showNotification(`Found ${results.length} results for "${query}"`);
        }

        function filterByLocation() {
            const selectedLocation = document.getElementById('locationSelect').value;
            if (selectedLocation) {
                showNotification(`Filtering results for ${selectedLocation}...`);
                
                setTimeout(() => {
                    const filtered = listingManager.search('', { location: selectedLocation });
                    updateCurrentView(filtered.slice(0, 20));
                }, 300);
            }
        }

        function updateCurrentView(listings) {
            const activePageElement = document.querySelector('.page.active');
            const listingContainer = activePageElement.querySelector('.listings-grid');
            
            if (listingContainer) {
                let html = '';
                listings.forEach(listing => {
                    html += createListingHTML(listing);
                });
                
                if (html === '') {
                    html = '<div style="grid-column: 1 / -1; text-align: center; padding: 3rem; color: #64748b;"><h3>No results found</h3><p>Try adjusting your filters or search terms.</p></div>';
                }
                
                listingContainer.innerHTML = html;
            }
        }

        function applyFilters() {
            showNotification('Filters applied successfully!');
            
            // Simulate filter application
            setTimeout(() => {
                const activePage = document.querySelector('.page.active').id;
                populatePageContent(activePage);
            }, 500);
        }

        // Advanced Features
        function switchAuthTab(tab) {
            document.querySelectorAll('.auth-tab').forEach(t => t.classList.remove('active'));
            event.target.classList.add('active');
            
            if (tab === 'register') {
                closeModal('loginModal');
                showModal('registerModal');
            }
        }

        function filterPropertyType(type) {
            showNotification(`Filtering ${type} properties...`);
            setTimeout(() => {
                const filtered = listingManager.search(type, { category: 'property' });
                updateCurrentView(filtered.slice(0, 20));
            }, 300);
        }

        function filterJobs(category) {
            showNotification(`Filtering ${category} jobs...`);
            setTimeout(() => {
                const filtered = listingManager.search(category, { category: 'jobs' });
                updateCurrentView(filtered.slice(0, 20));
            }, 300);
        }

        // Click outside modal to close
        window.addEventListener('click', function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.key === 'k') {
                e.preventDefault();
                document.getElementById('globalSearch').focus();
            }
            
            if (e.key === 'Escape') {
                document.querySelectorAll('.modal').forEach(modal => {
                    modal.style.display = 'none';
                });
            }
        });

        // Enhanced mobile experience
        function initializeMobileFeatures() {
            if (window.innerWidth <= 768) {
                // Add mobile navigation
                const mobileNavHtml = `
                    <div id="mobileNav" style="position: fixed; bottom: 0; left: 0; right: 0; background: white; border-top: 1px solid #e2e8f0; display: flex; justify-content: space-around; padding: 1rem; z-index: 1000;">
                        <a href="#" onclick="showPage('home')" style="text-decoration: none; color: #64748b; text-align: center; flex: 1;">
                            <div style="font-size: 1.5rem;">🏠</div>
                            <div style="font-size: 0.8rem;">Home</div>
                        </a>
                        <a href="#" onclick="showPage('marketplace')" style="text-decoration: none; color: #64748b; text-align: center; flex: 1;">
                            <div style="font-size: 1.5rem;">🛒</div>
                            <div style="font-size: 0.8rem;">Shop</div>
                        </a>
                        <a href="#" onclick="showModal('listingModal')" style="text-decoration: none; color: #64748b; text-align: center; flex: 1;">
                            <div style="font-size: 1.5rem;">➕</div>
                            <div style="font-size: 0.8rem;">Sell</div>
                        </a>
                        <a href="#" onclick="showPage('watchlist')" style="text-decoration: none; color: #64748b; text-align: center; flex: 1;">
                            <div style="font-size: 1.5rem;">❤️</div>
                            <div style="font-size: 0.8rem;">Saved</div>
                        </a>
                        <a href="#" onclick="showPage('profile')" style="text-decoration: none; color: #64748b; text-align: center; flex: 1;">
                            <div style="font-size: 1.5rem;">👤</div>
                            <div style="font-size: 0.8rem;">Profile</div>
                        </a>
                    </div>
                `;
                
                document.body.insertAdjacentHTML('beforeend', mobileNavHtml);
                document.body.style.paddingBottom = '80px';
            }
        }

        // Initialize mobile features on load and resize
        window.addEventListener('load', initializeMobileFeatures);
        window.addEventListener('resize', function() {
            const mobileNav = document.getElementById('mobileNav');
            if (window.innerWidth <= 768 && !mobileNav) {
                initializeMobileFeatures();
            } else if (window.innerWidth > 768 && mobileNav) {
                mobileNav.remove();
                document.body.style.paddingBottom = '0';
            }
        });

        // Advanced search functionality
        function initializeAdvancedSearch() {
            const searchBox = document.getElementById('globalSearch');
            
            // Search suggestions
            searchBox.addEventListener('input', function(e) {
                const query = e.target.value.toLowerCase();
                if (query.length > 2) {
                    // Show suggestions dropdown (simplified)
                    showSearchSuggestions(query);
                }
            });
        }

        function showSearchSuggestions(query) {
            const suggestions = [
                'iPhone 15 Pro Max',
                '3BHK apartment Mumbai',
                'Honda City',
                'Software developer jobs',
                'Home cleaning services'
            ].filter(s => s.toLowerCase().includes(query));
            
            // Create suggestions dropdown
            let existingDropdown = document.getElementById('searchSuggestions');
            if (existingDropdown) {
                existingDropdown.remove();
            }
            
            if (suggestions.length > 0) {
                const dropdownHtml = `
                    <div id="searchSuggestions" style="position: absolute; top: 100%; left: 0; right: 0; background: white; border: 1px solid #e2e8f0; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); z-index: 1001;">
                        ${suggestions.slice(0, 5).map(suggestion => `
                            <div onclick="selectSuggestion('${suggestion}')" style="padding: 0.75rem 1rem; cursor: pointer; border-bottom: 1px solid #f1f5f9; hover: background: #f8fafc;">
                                🔍 ${suggestion}
                            </div>
                        `).join('')}
                    </div>
                `;
                
                document.querySelector('.search-container').insertAdjacentHTML('beforeend', dropdownHtml);
            }
        }

        function selectSuggestion(suggestion) {
            document.getElementById('globalSearch').value = suggestion;
            document.getElementById('searchSuggestions').remove();
            performSearch();
        }

        // Data persistence and caching
        class DataCache {
            constructor() {
                this.cache = new Map();
                this.maxSize = 1000;
                this.ttl = 300000; // 5 minutes
            }
            
            set(key, value) {
                if (this.cache.size >= this.maxSize) {
                    const firstKey = this.cache.keys().next().value;
                    this.cache.delete(firstKey);
                }
                
                this.cache.set(key, {
                    value,
                    timestamp: Date.now()
                });
            }
            
            get(key) {
                const item = this.cache.get(key);
                if (item && (Date.now() - item.timestamp < this.ttl)) {
                    return item.value;
                }
                return null;
            }
        }

        const dataCache = new DataCache();

        // Analytics and tracking
        function trackUserAction(action, details) {
            const analytics = {
                action,
                details,
                timestamp: new Date(),
                user: userManager.currentUser?.id || 'anonymous',
                page: document.querySelector('.page.active')?.id || 'unknown'
            };
            
            // Store in local storage for demo purposes
            let userAnalytics = JSON.parse(localStorage.getItem('tradehub_analytics') || '[]');
            userAnalytics.push(analytics);
            
            // Keep only last 1000 events
            if (userAnalytics.length > 1000) {
                userAnalytics = userAnalytics.slice(-1000);
            }
            
            localStorage.setItem('tradehub_analytics', JSON.stringify(userAnalytics));
        }

        // Performance monitoring
        function measurePageLoadTime() {
            window.addEventListener('load', function() {
                const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
                console.log(`Page load time: ${loadTime}ms`);
                
                if (loadTime > 3000) {
                    console.warn('Page load time is higher than expected');
                }
            });
        }

        // Initialize performance monitoring
        measurePageLoadTime();
        
        // Navigation initialization
        function initializeNavigation() {
            // Get current page from URL
            const currentPath = window.location.pathname;
            
            // Remove active class from all nav links
            document.querySelectorAll('.nav-links a').forEach(link => {
                link.classList.remove('active');
            });
            
            // Add active class to current page
            if (currentPath === '/') {
                document.querySelector('a[href="/"]').classList.add('active');
            } else if (currentPath === '/property') {
                document.querySelector('a[href="/property"]').classList.add('active');
            } else if (currentPath === '/motors') {
                document.querySelector('a[href="/motors"]').classList.add('active');
            } else if (currentPath === '/jobs') {
                document.querySelector('a[href="/jobs"]').classList.add('active');
            } else if (currentPath === '/services') {
                document.querySelector('a[href="/services"]').classList.add('active');
            } else if (currentPath === '/marketplace') {
                document.querySelector('a[href="/marketplace"]').classList.add('active');
            }
        }

        // Service worker for offline functionality
        function initializeServiceWorker() {
            if ('serviceWorker' in navigator) {
                window.addEventListener('load', function() {
                    // Service worker would be registered here in a real app
                    console.log('Service worker support detected');
                });
            }
        }

        initializeServiceWorker();

        // Image optimization and lazy loading
        function initializeLazyLoading() {
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        // Load actual images here
                        observer.unobserve(img);
                    }
                });
            });
            
            document.querySelectorAll('.listing-image').forEach(img => {
                imageObserver.observe(img);
            });
        }

        // Advanced user verification system
        class VerificationSystem {
            constructor() {
                this.verificationMethods = ['phone', 'email', 'document', 'social'];
            }
            
            async verifyPhone(phoneNumber) {
                // Simulate OTP verification
                const otp = Math.floor(100000 + Math.random() * 900000);
                showNotification(`OTP sent to ${phoneNumber}: ${otp}`);
                
                return new Promise(resolve => {
                    setTimeout(() => {
                        showNotification('Phone verified successfully!');
                        resolve(true);
                    }, 3000);
                });
            }
            
            async verifyEmail(email) {
                showNotification(`Verification email sent to ${email}`);
                
                return new Promise(resolve => {
                    setTimeout(() => {
                        showNotification('Email verified successfully!');
                        resolve(true);
                    }, 5000);
                });
            }
        }

        const verificationSystem = new VerificationSystem();

        // Multi-language support
        const translations = {
            en: {
                home: 'Home',
                property: 'Property',
                motors: 'Motors',
                jobs: 'Jobs',
                services: 'Services',
                marketplace: 'Marketplace',
                search: 'Search for anything...',
                login: 'Login',
                register: 'Register'
            },
            hi: {
                home: 'होम',
                property: 'संपत्ति',
                motors: 'वाहन',
                jobs: 'नौकरियां',
                services: 'सेवाएं',
                marketplace: 'बाज़ार',
                search: 'कुछ भी खोजें...',
                login: 'लॉगिन',
                register: 'रजिस्टर'
            }
        };

        function changeLanguage(lang) {
            const t = translations[lang] || translations.en;
            
            // Update placeholders and text content
            document.getElementById('globalSearch').placeholder = t.search;
            
            // Update navigation
            const navLinks = document.querySelectorAll('.nav-links a');
            navLinks[0].innerHTML = `🏠 ${t.property}`;
            navLinks[1].innerHTML = `🚗 ${t.motors}`;
            navLinks[2].innerHTML = `💼 ${t.jobs}`;
            navLinks[3].innerHTML = `🛠️ ${t.services}`;
            navLinks[4].innerHTML = `🛒 ${t.marketplace}`;
            
            showNotification('Language updated successfully!');
        }

        // Real-time chat system (simplified)
        class ChatSystem {
            constructor() {
                this.conversations = new Map();
                this.activeChats = new Set();
            }
            
            startChat(listingId, sellerId) {
                const chatId = `${listingId}-${userManager.currentUser?.id}-${sellerId}`;
                this.activeChats.add(chatId);
                
                showNotification('Chat started with seller!');
                return chatId;
            }
            
            sendMessage(chatId, message) {
                if (!this.conversations.has(chatId)) {
                    this.conversations.set(chatId, []);
                }
                
                const conversation = this.conversations.get(chatId);
                conversation.push({
                    id: Date.now(),
                    sender: userManager.currentUser?.id || 'anonymous',
                    message,
                    timestamp: new Date()
                });
                
                showNotification('Message sent!');
            }
        }

        const chatSystem = new ChatSystem();

        // Initialize advanced features
        document.addEventListener('DOMContentLoaded', function() {
            initializeAdvancedSearch();
            initializeLazyLoading();
            
            // Track page views
            trackUserAction('page_view', { page: 'home' });
            
            // Add click tracking to major elements
            document.addEventListener('click', function(e) {
                if (e.target.matches('.category-card')) {
                    trackUserAction('category_click', { category: e.target.textContent });
                }
                
                if (e.target.matches('.listing-card')) {
                    trackUserAction('listing_click', { listing: e.target.querySelector('.listing-title')?.textContent });
                }
            });
        });

        // Auto-save feature for forms
        function enableAutoSave() {
            const forms = ['listingForm', 'registerForm'];
            
            forms.forEach(formId => {
                const form = document.getElementById(formId);
                if (form) {
                    const inputs = form.querySelectorAll('input, textarea, select');
                    inputs.forEach(input => {
                        input.addEventListener('input', function() {
                            const formData = new FormData(form);
                            localStorage.setItem(`tradehub_draft_${formId}`, JSON.stringify(Object.fromEntries(formData)));
                        });
                    });
                }
            });
        }

        // Load saved drafts
        function loadSavedDrafts() {
            const draftKeys = Object.keys(localStorage).filter(key => key.startsWith('tradehub_draft_'));
            
            draftKeys.forEach(key => {
                const formId = key.replace('tradehub_draft_', '');
                const form = document.getElementById(formId);
                
                if (form) {
                    try {
                        const draftData = JSON.parse(localStorage.getItem(key));
                        Object.entries(draftData).forEach(([fieldName, value]) => {
                            const field = form.querySelector(`[name="${fieldName}"]`);
                            if (field) field.value = value;
                        });
                    } catch (e) {
                        console.warn('Could not load draft for', formId);
                    }
                }
            });
        }

        // Enhanced security measures
        function sanitizeInput(input) {
            const div = document.createElement('div');
            div.textContent = input;
            return div.innerHTML;
        }

        function validateEmail(email) {
            const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
            return re.test(email);
        }

        function validatePhone(phone) {
            const re = /^\\+?[\\d\\s-()]{10,}$/;
            return re.test(phone);
        }

        // Initialize all features
        console.log('TradeHub Enhanced Marketplace initialized successfully!');
        console.log('Features loaded:', {
            'User Management': '✅',
            'Advanced Search': '✅',
            'Listing System': '✅',
            'Mobile Support': '✅',
            'Real-time Features': '✅',
            'Analytics': '✅',
            'Multi-language': '✅',
            'Security': '✅'
        });

        // Enable advanced features
        setTimeout(() => {
            enableAutoSave();
            loadSavedDrafts();
        }, 1000);
        
        // ==================== WEB SCRAPING FUNCTIONS ====================
        
        // Start web scraping for selected category
        function startScraping(category) {
            const selectedStates = getSelectedStates();
            const scrapingMethod = getSelectedScrapingMethod();
            
            if (selectedStates.length === 0) {
                updateStatus('⚠️ Please select at least one state first!', 'warning');
                return;
            }
            
            updateStatus(`🚀 Starting ${scrapingMethod} for ${category} in ${selectedStates.length} states...`, 'info');
            
            // Prepare request data
            const requestData = {
                states: selectedStates,
                categories: [category],
                method: scrapingMethod
            };
            
            // Start scraping
            fetch('/api/web-scraping/start', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateStatus(`✅ ${data.message}`, 'success');
                    // Start polling for status
                    pollScrapingStatus();
                } else {
                    updateStatus(`❌ ${data.error}`, 'error');
                }
            })
            .catch(error => {
                updateStatus(`❌ Failed to start scraping: ${error.message}`, 'error');
            });
        }
        
        // Test web scraping functionality
        function testScraping() {
            updateStatus('🧪 Testing web scraping functionality...', 'info');
            
            fetch('/api/web-scraping/test')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateStatus(`✅ ${data.message}`, 'success');
                    showResults(data);
                } else {
                    updateStatus(`❌ ${data.error}`, 'error');
                }
            })
            .catch(error => {
                updateStatus(`❌ Test failed: ${error.message}`, 'error');
            });
        }
        
        // Get selected states from checkboxes
        function getSelectedStates() {
            const stateCheckboxes = document.querySelectorAll('.state-checkbox input[type="checkbox"]:checked');
            return Array.from(stateCheckboxes).map(cb => cb.value);
        }
        
        // Get selected scraping method
        function getSelectedScrapingMethod() {
            const methodRadio = document.querySelector('input[name="scraping-method"]:checked');
            return methodRadio ? methodRadio.value : 'test';
        }
        
        // Update status display
        function updateStatus(message, type = 'info') {
            const statusDisplay = document.getElementById('scrapingStatus');
            const statusClass = `status-${type}`;
            
            statusDisplay.innerHTML = `<p class="${statusClass}">${message}</p>`;
            statusDisplay.className = `status-display ${statusClass}`;
        }
        
        // Show results
        function showResults(data) {
            const resultsDisplay = document.getElementById('scrapingResults');
            const resultsContent = document.getElementById('resultsContent');
            
            resultsContent.innerHTML = `
                <div class="result-item">
                    <strong>Items Generated:</strong> ${data.items_count || 'N/A'}
                </div>
                <div class="result-item">
                    <strong>Test States:</strong> ${(data.test_states || []).join(', ')}
                </div>
                <div class="result-item">
                    <strong>Status:</strong> ${data.message || 'Completed'}
                </div>
            `;
            
            resultsDisplay.style.display = 'block';
        }
        // Poll scraping status (simplified)
        function pollScrapingStatus() {
            // In a real implementation, you would poll the server for status updates
            setTimeout(() => {
                updateStatus('✅ Web scraping completed successfully! Check the listings for new data.', 'success');
            }, 5000);
        }
        
        // Initialize web scraping page
        function initWebScrapingPage() {
            // Add event listeners for state selection
            document.querySelectorAll('.state-checkbox input[type="checkbox"]').forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    const selectedStates = getSelectedStates();
                    updateStatus(`🌍 ${selectedStates.length} states selected for data generation`, 'info');
                });
            });
            
            // Add event listeners for method selection
            document.querySelectorAll('input[name="scraping-method"]').forEach(radio => {
                radio.addEventListener('change', () => {
                    const method = radio.value;
                    const methodName = method === 'test' ? 'Test Scraping' : 'Real Web Scraping';
                    updateStatus(`🔧 Selected method: ${methodName}`, 'info');
                });
            });
        }
        
        // Call initialization when page loads
        document.addEventListener('DOMContentLoaded', () => {
            if (document.getElementById('web-scraping')) {
                initWebScrapingPage();
            }
        });
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DealHub India - Enhanced Multi-Page Marketplace</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
    
    <style>
        :root {
            --primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --accent: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --success: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            --glass-bg: rgba(255, 255, 255, 0.08);
            --glass-border: rgba(255, 255, 255, 0.15);
            --text-primary: #ffffff;
            --text-secondary: rgba(255, 255, 255, 0.9);
            --text-muted: rgba(255, 255, 255, 0.7);
            --border-radius: 28px;
            --transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--primary);
            min-height: 100vh;
            color: var(--text-primary);
            line-height: 1.6;
        }

        /* Navigation */
        .nav {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            padding: 16px 0;
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(32px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.15);
        }

        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 24px;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 800;
            background: linear-gradient(45deg, #FFD700, #FFA500, #FF6B6B);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-decoration: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .nav-actions {
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.9rem;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            transition: var(--transition);
            backdrop-filter: blur(16px);
        }

        .btn-primary {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            color: white;
            box-shadow: 0 4px 20px rgba(67, 233, 123, 0.3);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: var(--text-primary);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        /* Page System */
        .page {
            display: none;
            min-height: 100vh;
            padding-top: 80px;
        }

        .page.active {
            display: block;
        }

        /* Home Page */
        .hero {
            min-height: 60vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 64px 24px;
        }

        .hero-title {
            font-size: clamp(2.5rem, 6vw, 4rem);
            font-weight: 800;
            line-height: 1.1;
            margin-bottom: 20px;
            background: linear-gradient(135deg, #ffffff 0%, #e0e7ff 50%, #a5b4fc 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .hero-subtitle {
            font-size: 1.2rem;
            color: var(--text-secondary);
            margin-bottom: 32px;
        }

        /* Categories Grid */
        .categories {
            padding: 64px 24px;
        }

        .categories-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .section-title {
            font-size: 2rem;
            font-weight: 700;
            text-align: center;
            margin-bottom: 48px;
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .categories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
        }

        .category-card {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(24px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: var(--border-radius);
            padding: 32px;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
        }

        .category-card:hover {
            transform: translateY(-8px);
            border-color: rgba(255, 255, 255, 0.3);
            background: rgba(255, 255, 255, 0.12);
        }

        .category-icon {
            font-size: 2.5rem;
            margin-bottom: 16px;
            display: block;
        }

        .category-name {
            font-size: 1.2rem;
            font-weight: 700;
            margin-bottom: 8px;
        }

        .category-stats {
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        /* Category Page */
        .category-page {
            padding: 32px 24px;
        }

        .page-header {
            max-width: 1200px;
            margin: 0 auto 40px auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .back-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 16px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: var(--transition);
        }

        .back-btn:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateX(-4px);
        }

        .page-title {
            font-size: 2rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        /* Listings Grid */
        .listings-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .listings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
        }

        .listings-count {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .add-listing-btn {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            color: white;
            border: none;
            padding: 14px 28px;
            border-radius: 20px;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: var(--transition);
            box-shadow: 0 4px 20px rgba(67, 233, 123, 0.3);
        }

        .add-listing-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 25px rgba(67, 233, 123, 0.4);
        }

        .listings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 24px;
        }

        .listing-card {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(24px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 24px;
            overflow: hidden;
            transition: var(--transition);
            cursor: pointer;
        }

        .listing-card:hover {
            transform: translateY(-4px);
            border-color: rgba(255, 255, 255, 0.25);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }

        .listing-image {
            width: 100%;
            height: 200px;
            background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: rgba(255,255,255,0.5);
            font-size: 3rem;
            position: relative;
            overflow: hidden;
        }

        .listing-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .photo-count-badge {
            position: absolute;
            bottom: 8px;
            right: 8px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .listing-content {
            padding: 20px;
        }

        .listing-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 8px;
            line-height: 1.3;
        }

        .listing-price {
            font-size: 1.4rem;
            font-weight: 700;
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 8px;
        }

        .listing-details {
            font-size: 0.85rem;
            color: var(--text-muted);
            margin-bottom: 12px;
        }

        .listing-location {
            font-size: 0.8rem;
            color: var(--text-secondary);
            display: flex;
            align-items: center;
            gap: 4px;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            z-index: 3000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex !important;
        }

        .modal-content {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(32px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 24px;
            padding: 32px;
            max-width: 800px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.15);
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--text-secondary);
            cursor: pointer;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
        }

        .close-btn:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--text-primary);
        }

        /* Enhanced Photo Upload */
        .photo-upload-section {
            margin: 24px 0;
        }

        .photo-upload-area {
            border: 3px dashed rgba(255, 255, 255, 0.3);
            border-radius: 20px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            background: rgba(255, 255, 255, 0.05);
            position: relative;
        }

        .photo-upload-area:hover,
        .photo-upload-area.dragover {
            border-color: #43e97b;
            background: rgba(67, 233, 123, 0.1);
            transform: scale(1.02);
        }

        .photo-upload-prompt {
            color: var(--text-secondary);
        }

        .photo-upload-prompt i {
            font-size: 3rem;
            margin-bottom: 16px;
            color: var(--text-muted);
            display: block;
        }

        .photo-preview-container {
            margin-top: 24px;
        }

        .photos-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }

        .photo-preview-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 16px;
        }

        .photo-preview-item {
            position: relative;
            aspect-ratio: 1;
            border-radius: 16px;
            overflow: hidden;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid transparent;
            transition: var(--transition);
            cursor: pointer;
        }

        .photo-preview-item.main-photo {
            border-color: #43e97b;
            box-shadow: 0 0 20px rgba(67, 233, 123, 0.3);
        }

        .photo-preview-item:hover {
            transform: scale(1.05);
            border-color: rgba(255, 255, 255, 0.3);
        }

        .photo-preview-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .photo-controls {
            position: absolute;
            top: 8px;
            right: 8px;
            display: flex;
            gap: 4px;
        }

        .photo-btn {
            width: 28px;
            height: 28px;
            border: none;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .remove-btn {
            background: rgba(255, 0, 0, 0.8);
            color: white;
        }

        .main-btn {
            background: rgba(67, 233, 123, 0.8);
            color: white;
        }

        .photo-info {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
            color: white;
            padding: 8px;
            font-size: 0.7rem;
            text-align: center;
        }

        .main-badge {
            position: absolute;
            top: 8px;
            left: 8px;
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.7rem;
            font-weight: 600;
        }

        /* Photo Highlight Modal */
        .photo-modal .modal-content {
            max-width: 1000px;
            padding: 24px;
        }

        .photo-viewer {
            display: flex;
            gap: 24px;
            height: 600px;
        }

        .main-photo-container {
            flex: 2;
            position: relative;
            border-radius: 20px;
            overflow: hidden;
        }

        .main-photo {
            width: 100%;
            height: 100%;
            object-fit: contain;
            background: rgba(0, 0, 0, 0.5);
        }

        .photo-nav {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
        }

        .photo-nav:hover {
            background: rgba(0, 0, 0, 0.9);
            transform: translateY(-50%) scale(1.1);
        }

        .photo-nav.prev {
            left: 16px;
        }

        .photo-nav.next {
            right: 16px;
        }

        .photo-thumbnails {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 12px;
            overflow-y: auto;
            max-height: 600px;
        }

        .photo-thumbnail {
            aspect-ratio: 1;
            border-radius: 12px;
            overflow: hidden;
            cursor: pointer;
            border: 2px solid transparent;
            transition: var(--transition);
        }

        .photo-thumbnail.active {
            border-color: #43e97b;
            box-shadow: 0 0 15px rgba(67, 233, 123, 0.4);
        }

        .photo-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .photo-counter {
            position: absolute;
            bottom: 16px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-secondary);
        }

        .form-control {
            width: 100%;
            padding: 14px 18px;
            border: 2px solid rgba(255, 255, 255, 0.15);
            border-radius: 16px;
            background: rgba(255, 255, 255, 0.08);
            color: var(--text-primary);
            font-size: 1rem;
            transition: var(--transition);
            backdrop-filter: blur(8px);
        }

        .form-control:focus {
            outline: none;
            border-color: #43e97b;
            background: rgba(255, 255, 255, 0.12);
            box-shadow: 0 0 20px rgba(67, 233, 123, 0.2);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
        }

        .submit-btn {
            width: 100%;
            padding: 16px;
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            color: white;
            border: none;
            border-radius: 20px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            margin-top: 24px;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(67, 233, 123, 0.4);
        }

        /* Loading States */
        .loading {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Success Message */
        .success-message {
            background: linear-gradient(135deg, rgba(67, 233, 123, 0.2), rgba(56, 249, 215, 0.2));
            border: 1px solid rgba(67, 233, 123, 0.3);
            color: #43e97b;
            padding: 16px;
            border-radius: 16px;
            margin: 16px 0;
            display: none;
            align-items: center;
            gap: 12px;
        }
        /* Responsive Design */
        @media (max-width: 768px) {
            .nav-container {
                flex-direction: column;
                gap: 16px;
                padding: 12px;
            }

            .page-header {
                flex-direction: column;
                gap: 16px;
                align-items: flex-start;
            }

            .listings-header {
                flex-direction: column;
                gap: 16px;
                align-items: flex-start;
            }

            .categories-grid,
            .listings-grid {
                grid-template-columns: 1fr;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .photo-viewer {
                flex-direction: column;
                height: auto;
            }

            .photo-thumbnails {
                flex-direction: row;
                max-height: 120px;
                overflow-x: auto;
                overflow-y: hidden;
            }

            .modal-content {
                margin: 16px;
                padding: 24px;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="nav">
        <div class="nav-container">
            <div class="logo" onclick="showPage('home')">
                <i class="fas fa-store"></i>
                TradeHub India
            </div>
            <div class="nav-actions">
                <button class="btn btn-secondary" onclick="showPage('home')">
                    <i class="fas fa-home"></i> Home
                </button>
                <button class="btn btn-primary" onclick="openModal('createListingModal')">
                    <i class="fas fa-plus"></i> Sell
                </button>
            </div>
        </div>
    </nav>

    <!-- Home Page -->
    <div id="homePage" class="page active">
        <section class="hero">
            <div class="hero-content">
                <h1 class="hero-title">Multi-Page Marketplace</h1>
                <p class="hero-subtitle">Browse categories, create listings with photo highlights, and discover amazing deals</p>
            </div>
        </section>

        <section class="categories">
            <div class="categories-container">
                <h2 class="section-title">Browse Categories</h2>
                <div class="categories-grid" id="categoriesGrid">
                    <!-- Categories will be populated by JavaScript -->
                </div>
            </div>
        </section>
    </div>

    <!-- Category Page Template -->
    <div id="categoryPage" class="page category-page">
        <div class="page-header">
            <button class="back-btn" onclick="showPage('home')">
                <i class="fas fa-arrow-left"></i> Back to Home
            </button>
            <h1 class="page-title" id="categoryTitle">
                <span id="categoryIcon"></span>
                <span id="categoryName">Category</span>
            </h1>
        </div>

        <div class="listings-container">
            <div class="listings-header">
                <div class="listings-count" id="listingsCount">0 listings found</div>
                <button class="add-listing-btn" onclick="openCategoryListing()">
                    <i class="fas fa-camera"></i>
                    Add New Listing
                </button>
            </div>
            <div class="listings-grid" id="listingsGrid">
                <!-- Listings will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Create Listing Modal -->
    <div id="createListingModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">
                    <i class="fas fa-camera"></i>
                    Create New Listing
                </h2>
                <button class="close-btn" onclick="closeModal('createListingModal')">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <form id="createListingForm">
                <div class="form-group">
                    <label class="form-label">Listing Title</label>
                    <input type="text" name="title" class="form-control" required 
                           placeholder="e.g., iPhone 14 Pro Max - Excellent Condition">
                </div>

                <div class="form-group">
                    <label class="form-label">Category</label>
                    <select name="category" class="form-control" required id="categorySelect">
                        <option value="">Select a category</option>
                    </select>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Price (₹)</label>
                        <input type="number" name="price" class="form-control" required 
                               placeholder="25000" min="1">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Condition</label>
                        <select name="condition" class="form-control" required>
                            <option value="new">Brand New</option>
                            <option value="like-new">Like New</option>
                            <option value="excellent">Excellent</option>
                            <option value="good" selected>Good</option>
                            <option value="fair">Fair</option>
                            <option value="poor">Poor</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea name="description" class="form-control" rows="4" required 
                              placeholder="Describe your item in detail - features, condition, reason for selling..."></textarea>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Location</label>
                        <input type="text" name="location" class="form-control" required 
                               placeholder="Mumbai, Maharashtra">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Brand (Optional)</label>
                        <input type="text" name="brand" class="form-control" 
                               placeholder="Apple, Samsung, etc.">
                    </div>
                </div>

                <!-- Enhanced Photo Upload Section -->
                <div class="photo-upload-section">
                    <label class="form-label">
                        <i class="fas fa-images"></i>
                        Photos (Up to 10 images)
                    </label>
                    
                    <div class="photo-upload-area" id="photoUploadArea">
                        <div class="photo-upload-prompt">
                            <i class="fas fa-cloud-upload-alt"></i>
                            <p><strong>Drag & drop photos here or click to browse</strong></p>
                            <p>Add up to 10 photos for better visibility</p>
                            <small>Supported: JPG, PNG, GIF, WebP | Max 5MB per photo</small>
                            <input type="file" id="photoInput" multiple accept=".jpg,.jpeg,.png,.gif,.webp" style="display: none;">
                        </div>
                    </div>

                    <!-- Photo Preview Container -->
                    <div class="photo-preview-container" id="photoPreviewContainer" style="display: none;">
                        <div class="photos-header">
                            <div>
                                <strong><span id="photoCount">0</span> photos selected</strong>
                                <small style="margin-left: 12px; color: var(--text-muted);">
                                    First photo will be the main image
                                </small>
                            </div>
                            <button type="button" class="btn btn-secondary" onclick="clearAllPhotos()">
                                <i class="fas fa-trash"></i> Clear All
                            </button>
                        </div>
                        <div class="photo-preview-grid" id="photoPreviewGrid"></div>
                    </div>
                </div>

                <button type="submit" class="submit-btn">
                    <span class="loading" id="submitLoading"></span>
                    <span id="submitText">
                        <i class="fas fa-rocket"></i>
                        Create Listing
                    </span>
                </button>

                <div class="success-message" id="successMessage">
                    <i class="fas fa-check-circle"></i>
                    <span>Listing created successfully!</span>
                </div>
            </form>
        </div>
    </div>

    <!-- Photo Highlight Modal -->
    <div id="photoModal" class="modal photo-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">
                    <i class="fas fa-images"></i>
                    Photo Gallery
                </h2>
                <button class="close-btn" onclick="closeModal('photoModal')">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="photo-viewer">
                <div class="main-photo-container">
                    <img id="mainPhoto" class="main-photo" src="" alt="Main Photo">
                    <button class="photo-nav prev" onclick="previousPhoto()">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button class="photo-nav next" onclick="nextPhoto()">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                    <div class="photo-counter">
                        <span id="currentPhotoIndex">1</span> / <span id="totalPhotos">1</span>
                    </div>
                </div>

                <div class="photo-thumbnails" id="photoThumbnails">
                    <!-- Thumbnails will be populated by JavaScript -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // App State
        let currentPage = 'home';
        let currentCategory = null;
        let uploadedPhotos = [];
        let currentPhotoIndex = 0;
        let allPhotos = [];

        // Sample Data
        const categories = [
            {
                id: 'electronics',
                name: 'Electronics',
                icon: '📱',
                description: 'Phones, laptops, gadgets',
                listings: []
            },
            {
                id: 'vehicles',
                name: 'Vehicles',
                icon: '🚗',
                description: 'Cars, bikes, scooters',
                listings: []
            },
            {
                id: 'fashion',
                name: 'Fashion',
                icon: '👗',
                description: 'Clothes, shoes, accessories',
                listings: []
            },
            {
                id: 'home',
                name: 'Home & Garden',
                icon: '🏠',
                description: 'Furniture, decor, appliances',
                listings: []
            },
            {
                id: 'sports',
                name: 'Sports',
                icon: '⚽',
                description: 'Equipment, gear, fitness',
                listings: []
            },
            {
                id: 'books',
                name: 'Books & Media',
                icon: '📚',
                description: 'Books, movies, music',
                listings: []
            }
        ];

        // Initialize App
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
            initializePhotoUpload();
            populateCategories();
            populateCategorySelect();
            addSampleListings();
        });

        function initializeApp() {
            console.log('TradeHub India - Multi-Page Marketplace Initialized');
        }

        // Page Management
        function showPage(pageId, categoryId = null) {
            // Hide all pages
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });

            // Show requested page
            if (pageId === 'home') {
                document.getElementById('homePage').classList.add('active');
                currentPage = 'home';
            } else if (pageId === 'category') {
                document.getElementById('categoryPage').classList.add('active');
                currentPage = 'category';
                currentCategory = categoryId;
                loadCategoryPage(categoryId);
            }
        }

        function loadCategoryPage(categoryId) {
            const category = categories.find(cat => cat.id === categoryId);
            if (!category) return;

            // Update category header
            document.getElementById('categoryIcon').textContent = category.icon;
            document.getElementById('categoryName').textContent = category.name;
            
            // Update listings count
            document.getElementById('listingsCount').textContent = `${category.listings.length} listings found`;
            
            // Populate listings
            populateListings(category.listings);
        }

        // Categories
        function populateCategories() {
            const grid = document.getElementById('categoriesGrid');
            grid.innerHTML = '';

            categories.forEach(category => {
                const card = document.createElement('div');
                card.className = 'category-card';
                card.onclick = () => showPage('category', category.id);
                
                card.innerHTML = `
                    <div class="category-icon">${category.icon}</div>
                    <div class="category-name">${category.name}</div>
                    <div class="category-stats">${category.listings.length} listings</div>
                `;
                
                grid.appendChild(card);
            });
        }

        function populateCategorySelect() {
            const select = document.getElementById('categorySelect');
            select.innerHTML = '<option value="">Select a category</option>';
            
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = `${category.icon} ${category.name}`;
                select.appendChild(option);
            });
        }

        // Listings
        function populateListings(listings) {
            const grid = document.getElementById('listingsGrid');
            grid.innerHTML = '';

            if (listings.length === 0) {
                grid.innerHTML = `
                    <div style="grid-column: 1/-1; text-align: center; padding: 64px; color: var(--text-muted);">
                        <i class="fas fa-box-open" style="font-size: 4rem; margin-bottom: 16px; opacity: 0.5;"></i>
                        <h3>No listings yet</h3>
                        <p>Be the first to add a listing in this category!</p>
                    </div>
                `;
                return;
            }

            listings.forEach(listing => {
                const card = document.createElement('div');
                card.className = 'listing-card';
                card.onclick = () => openPhotoModal(listing.photos);
                
                const mainPhoto = listing.photos && listing.photos.length > 0 
                    ? `<img src="${listing.photos[0].url}" alt="${listing.title}">`
                    : `<i class="fas fa-image"></i>`;

                const photoCount = listing.photos ? listing.photos.length : 0;
                const photoBadge = photoCount > 0 
                    ? `<div class="photo-count-badge"><i class="fas fa-images"></i> ${photoCount}</div>`
                    : '';

                card.innerHTML = `
                    <div class="listing-image">
                        ${mainPhoto}
                        ${photoBadge}
                    </div>
                    <div class="listing-content">
                        <div class="listing-title">${listing.title}</div>
                        <div class="listing-price">₹${listing.price.toLocaleString()}</div>
                        <div class="listing-details">${listing.condition} • ${listing.brand || 'No brand'}</div>
                        <div class="listing-location">
                            <i class="fas fa-map-marker-alt"></i>
                            ${listing.location}
                        </div>
                    </div>
                `;
                
                grid.appendChild(card);
            });
        }

        // Photo Upload System
        function initializePhotoUpload() {
            const uploadArea = document.getElementById('photoUploadArea');
            const photoInput = document.getElementById('photoInput');

            // Click to upload
            uploadArea.addEventListener('click', () => photoInput.click());

            // File input change
            photoInput.addEventListener('change', handleFileSelect);

            // Drag and drop
            uploadArea.addEventListener('dragover', handleDragOver);
            uploadArea.addEventListener('dragleave', handleDragLeave);
            uploadArea.addEventListener('drop', handleDrop);
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.currentTarget.classList.add('dragover');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
            const files = Array.from(e.dataTransfer.files);
            handleFiles(files);
        }

        function handleFileSelect(e) {
            const files = Array.from(e.target.files);
            handleFiles(files);
        }

        function handleFiles(files) {
            const validFiles = files.filter(file => {
                const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
                const maxSize = 5 * 1024 * 1024; // 5MB

                if (!validTypes.includes(file.type)) {
                    alert(`${file.name} is not a valid image type`);
                    return false;
                }

                if (file.size > maxSize) {
                    alert(`${file.name} is too large (max 5MB)`);
                    return false;
                }

                return true;
            });

            if (uploadedPhotos.length + validFiles.length > 10) {
                alert('Maximum 10 photos allowed');
                return;
            }

            validFiles.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const photoData = {
                        id: Date.now() + index,
                        file: file,
                        url: e.target.result,
                        name: file.name,
                        size: file.size,
                        isMain: uploadedPhotos.length === 0 // First photo is main
                    };
                    uploadedPhotos.push(photoData);
                    updatePhotoPreview();
                };
                reader.readAsDataURL(file);
            });
        }

        function updatePhotoPreview() {
            const container = document.getElementById('photoPreviewContainer');
            const grid = document.getElementById('photoPreviewGrid');
            const count = document.getElementById('photoCount');

            if (uploadedPhotos.length === 0) {
                container.style.display = 'none';
                return;
            }

            container.style.display = 'block';
            count.textContent = uploadedPhotos.length;
            grid.innerHTML = '';

            uploadedPhotos.forEach((photo, index) => {
                const item = document.createElement('div');
                item.className = `photo-preview-item ${photo.isMain ? 'main-photo' : ''}`;
                
                item.innerHTML = `
                    <img src="${photo.url}" alt="Preview ${index + 1}">
                    ${photo.isMain ? '<div class="main-badge">Main Photo</div>' : ''}
                    <div class="photo-controls">
                        ${!photo.isMain ? `<button type="button" class="photo-btn main-btn" onclick="setMainPhoto(${photo.id})" title="Set as main photo">
                            <i class="fas fa-star"></i>
                        </button>` : ''}
                        <button type="button" class="photo-btn remove-btn" onclick="removePhoto(${photo.id})" title="Remove photo">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="photo-info">
                        ${formatFileSize(photo.size)}
                    </div>
                `;
                
                grid.appendChild(item);
            });
        }

        function setMainPhoto(photoId) {
            // Remove main status from all photos
            uploadedPhotos.forEach(photo => photo.isMain = false);
            
            // Set new main photo
            const photo = uploadedPhotos.find(p => p.id === photoId);
            if (photo) {
                photo.isMain = true;
            }
            
            updatePhotoPreview();
        }

        function removePhoto(photoId) {
            const photoIndex = uploadedPhotos.findIndex(p => p.id === photoId);
            if (photoIndex === -1) return;
            
            const wasMain = uploadedPhotos[photoIndex].isMain;
            uploadedPhotos.splice(photoIndex, 1);
            
            // If removed photo was main, set first remaining photo as main
            if (wasMain && uploadedPhotos.length > 0) {
                uploadedPhotos[0].isMain = true;
            }
            
            updatePhotoPreview();
        }

        function clearAllPhotos() {
            if (confirm('Are you sure you want to remove all photos?')) {
                uploadedPhotos = [];
                updatePhotoPreview();
                document.getElementById('photoInput').value = '';
            }
        }

        function formatFileSize(bytes) {
            if (bytes < 1024) return bytes + ' B';
            if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
            return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
        }

        // Photo Modal System
        function openPhotoModal(photos) {
            if (!photos || photos.length === 0) return;
            
            allPhotos = photos;
            currentPhotoIndex = 0;
            
            updatePhotoModal();
            openModal('photoModal');
        }

        function updatePhotoModal() {
            const mainPhoto = document.getElementById('mainPhoto');
            const thumbnails = document.getElementById('photoThumbnails');
            const currentIndex = document.getElementById('currentPhotoIndex');
            const totalPhotos = document.getElementById('totalPhotos');

            // Update main photo
            mainPhoto.src = allPhotos[currentPhotoIndex].url;
            
            // Update counter
            currentIndex.textContent = currentPhotoIndex + 1;
            totalPhotos.textContent = allPhotos.length;

            // Update thumbnails
            thumbnails.innerHTML = '';
            allPhotos.forEach((photo, index) => {
                const thumb = document.createElement('div');
                thumb.className = `photo-thumbnail ${index === currentPhotoIndex ? 'active' : ''}`;
                thumb.onclick = () => {
                    currentPhotoIndex = index;
                    updatePhotoModal();
                };
                
                thumb.innerHTML = `<img src="${photo.url}" alt="Photo ${index + 1}">`;
                thumbnails.appendChild(thumb);
            });

            // Show/hide navigation buttons
            const prevBtn = document.querySelector('.photo-nav.prev');
            const nextBtn = document.querySelector('.photo-nav.next');
            
            prevBtn.style.display = allPhotos.length > 1 ? 'flex' : 'none';
            nextBtn.style.display = allPhotos.length > 1 ? 'flex' : 'none';
        }

        function previousPhoto() {
            currentPhotoIndex = currentPhotoIndex > 0 ? currentPhotoIndex - 1 : allPhotos.length - 1;
            updatePhotoModal();
        }

        function nextPhoto() {
            currentPhotoIndex = currentPhotoIndex < allPhotos.length - 1 ? currentPhotoIndex + 1 : 0;
            updatePhotoModal();
        }

        // Form Handling
        function openCategoryListing() {
            if (currentCategory) {
                const select = document.getElementById('categorySelect');
                select.value = currentCategory;
            }
            openModal('createListingModal');
        }

        document.getElementById('createListingForm').addEventListener('submit', function(e) {
            e.preventDefault();
            handleCreateListing();
        });

        async function handleCreateListing() {
            const form = document.getElementById('createListingForm');
            const formData = new FormData(form);
            
            // Show loading
            document.getElementById('submitLoading').style.display = 'inline-block';
            document.getElementById('submitText').innerHTML = 'Creating listing...';

            // Simulate API call
            setTimeout(() => {
                const listingData = {
                    id: Date.now(),
                    title: formData.get('title'),
                    category: formData.get('category'),
                    price: parseInt(formData.get('price')),
                    condition: formData.get('condition'),
                    description: formData.get('description'),
                    location: formData.get('location'),
                    brand: formData.get('brand') || null,
                    photos: uploadedPhotos.map(photo => ({
                        id: photo.id,
                        url: photo.url,
                        isMain: photo.isMain
                    })),
                    createdAt: new Date().toISOString()
                };

                // Add to category
                const category = categories.find(cat => cat.id === listingData.category);
                if (category) {
                    category.listings.unshift(listingData);
                }

                // Show success
                document.getElementById('successMessage').style.display = 'flex';
                
                // Reset form after delay
                setTimeout(() => {
                    closeModal('createListingModal');
                    form.reset();
                    uploadedPhotos = [];
                    updatePhotoPreview();
                    populateCategories();
                    
                    if (currentPage === 'category') {
                        loadCategoryPage(currentCategory);
                    }
                    
                    document.getElementById('successMessage').style.display = 'none';
                }, 2000);

                // Hide loading
                document.getElementById('submitLoading').style.display = 'none';
                document.getElementById('submitText').innerHTML = '<i class="fas fa-rocket"></i> Create Listing';
            }, 1500);
        }

        // Modal Management
        function openModal(modalId) {
            document.getElementById(modalId).classList.add('show');
            document.body.style.overflow = 'hidden';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('show');
            document.body.style.overflow = 'auto';
        }

        // Sample Data
        function addSampleListings() {
            const sampleListings = [
                {
                    id: 1,
                    title: "iPhone 14 Pro Max 256GB Space Black",
                    category: "electronics",
                    price: 85000,
                    condition: "like-new",
                    description: "Barely used iPhone 14 Pro Max in pristine condition. All original accessories included.",
                    location: "Mumbai, Maharashtra",
                    brand: "Apple",
                    photos: [
                        { id: 1, url: "https://images.unsplash.com/photo-1592899677977-9c10ca588bbd?w=400", isMain: true },
                        { id: 2, url: "https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=400", isMain: false }
                    ],
                    createdAt: "2024-01-15T10:30:00Z"
                },
                {
                    id: 2,
                    title: "Honda City VX CVT - Single Owner",
                    category: "vehicles", 
                    price: 750000,
                    condition: "excellent",
                    description: "Well maintained Honda City with complete service history. Non-smoking, pet-free car.",
                    location: "Delhi, Delhi",
                    brand: "Honda",
                    photos: [
                        { id: 3, url: "https://images.unsplash.com/photo-1555215695-3004980ad54e?w=400", isMain: true },
                        { id: 4, url: "https://images.unsplash.com/photo-1552519507-da3b142c6e3d?w=400", isMain: false },
                        { id: 5, url: "https://images.unsplash.com/photo-1549317661-bd32c8ce0db2?w=400", isMain: false }
                    ],
                    createdAt: "2024-01-14T15:45:00Z"
                }
            ];

            sampleListings.forEach(listing => {
                const category = categories.find(cat => cat.id === listing.category);
                if (category) {
                    category.listings.push(listing);
                }
            });
        }

        // Keyboard Navigation
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const openModals = document.querySelectorAll('.modal.show');
                openModals.forEach(modal => closeModal(modal.id));
            }
            
            if (document.getElementById('photoModal').classList.contains('show')) {
                if (e.key === 'ArrowLeft') previousPhoto();
                if (e.key === 'ArrowRight') nextPhoto();
            }
        });
        console.log('🎉 Enhanced Multi-Page Marketplace Loaded Successfully!');
        console.log('Features: Category pages, Photo highlights, Advanced upload system');
    </script>
</body>
</html>
'''

# ==================== ERROR HANDLERS ====================
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'success': False,
        'error': 'Resource not found',
        'code': 'NOT_FOUND'
    }), 404

@app.errorhandler(429)
def rate_limit_exceeded(error):
    return jsonify({
        'success': False,
        'error': 'Rate limit exceeded. Please try again later.',
        'code': 'RATE_LIMITED'
    }), 429

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal server error: {error}")
    return jsonify({
        'success': False,
        'code': 'INTERNAL_ERROR'
    }), 500

# ==================== MAIN APPLICATION ====================
if __name__ == '__main__':
    print("""
DEALHUB INDIA - PRODUCTION AI MARKETPLACE V5.0
===============================================

PREMIUM FEATURES:
- Production-Ready for Millions of Users
- Advanced AI-Powered Security & Validation
- Military-Grade Authentication System
- Redis-Powered Caching for Performance
- Real-time Rate Limiting & DDoS Protection
- Comprehensive Logging & Monitoring
- Beautiful Glass Morphism UI Design
- Mobile-First Responsive Design

SCALABILITY FEATURES:
- Connection Pooling (50+ concurrent connections)
- Advanced Caching (Redis + Memory fallback)
- Optimized Database Queries with Indexes
- Compression Middleware for Speed
- Background Task Processing Ready
- Horizontal Scaling Support

SECURITY FEATURES:
- Advanced Threat Detection System
- Rate Limiting (1000 req/min per user)
- SQL Injection Protection
- XSS Prevention
- CSRF Protection
- Account Lockout Protection
- Password Strength Validation

PRODUCTION READY:
- 12 States with 60+ Districts Coverage
  * Delhi, Maharashtra, Karnataka, Tamil Nadu
  * Gujarat, West Bengal, Uttar Pradesh, Rajasthan
  * Himachal Pradesh, Punjab, Haryana, Uttarakhand
- 8 Major Categories with Subcategories
- Advanced Search with AI Ranking
- Real-time Analytics & Stats
- Production Error Handling
- Health Check Endpoints

Starting production server...
    """)
    
    try:
        # Check if we need to reset database due to conflicts
        try:
            # Initialize production database
            initialize_production_database()
        except Exception as init_error:
            if "UNIQUE constraint failed" in str(init_error):
                print("Database conflict detected. Resetting database...")
                reset_database()
                initialize_production_database()
            else:
                raise init_error
        
        # Run production server
        app.run(
            host='0.0.0.0',
            port=int(os.getenv('PORT', 5000)),
            debug=os.getenv('FLASK_ENV') == 'development',
            threaded=True
        )
        
    except KeyboardInterrupt:
        print("\\nServer stopped by user")
    except Exception as e:
        logger.error(f"Server startup error: {e}")
        print(f"Failed to start server: {e}")
        print("Check your configuration and try again")